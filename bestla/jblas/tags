!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	jit_blas_prologue.h	/^    const AType* A;$/;"	m	struct:jblas::prologue::gemm::ActivationBase::Param
A	jit_blas_prologue.h	/^    const SrcType* A;$/;"	m	struct:jblas::prologue::gemm::ActivationConverterFp32::Param
A	jit_blas_prologue.h	/^    const float* A;$/;"	m	struct:jblas::prologue::gemm::ActivationF32S8KBlockQuantize::Param
A	jit_blas_prologue.h	/^    const float* A;$/;"	m	struct:jblas::prologue::gemm::ActivationF32U8KBlockQuantize::Param
A	jit_blas_prologue.h	/^    const float* A;$/;"	m	struct:jblas::prologue::gemm::ActivationFp32AsymU8Quantize::Param
A	jit_blas_prologue.h	/^    const float* A;$/;"	m	struct:jblas::prologue::gemm::ActivationFp32SymS8Quantize::Param
ADD_FLAG	jit_blas_utils.h	467;"	d
ADD_FLAG	jit_blas_utils.h	498;"	d
AH	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
AKStepSize	jit_blas_gemm.h	/^    static int constexpr AKStepSize = KTILE * sizeof(AType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
AL	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
ALIGN_PAGE_SIZE	xbyak/xbyak.h	/^static const size_t ALIGN_PAGE_SIZE = 4096;$/;"	m	namespace:Xbyak::inner
ALLOC_BUF	xbyak/xbyak.h	/^		ALLOC_BUF, \/\/ use new(alignment, protect)$/;"	e	enum:Xbyak::CodeArray::Type
AMX_BF16	jit_blas_utils.h	/^  inline bool AMX_BF16() { return mHasAMX_BF16; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AMX_BF16_16x48	jit_blas_gemm.h	/^  AMX_BF16_16x48,$/;"	m	class:jblas::gemm::GemmCoreType
AMX_BF16_16x64	jit_blas_gemm.h	/^  AMX_BF16_16x64,$/;"	m	class:jblas::gemm::GemmCoreType
AMX_INT8	jit_blas_utils.h	/^  inline bool AMX_INT8() { return mHasAMX_INT8; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AMX_INT8_16X48_KBLOCK	jit_blas_gemm.h	/^  AMX_INT8_16X48_KBLOCK,$/;"	m	class:jblas::gemm::GemmCoreType
AMX_INT8_16x48	jit_blas_gemm.h	/^  AMX_INT8_16x48,$/;"	m	class:jblas::gemm::GemmCoreType
AMX_INT8_16x48_SS	jit_blas_gemm.h	/^  AMX_INT8_16x48_SS,$/;"	m	class:jblas::gemm::GemmCoreType
AMX_INT8_16x64	jit_blas_gemm.h	/^  AMX_INT8_16x64,$/;"	m	class:jblas::gemm::GemmCoreType
ARCH_GET_XCOMP_PERM	jit_blas_utils.h	215;"	d
ARCH_REQ_XCOMP_PERM	jit_blas_utils.h	216;"	d
AReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 12, AReg = 15, TmpReg = BReg;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
AReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 26, TmpReg = 27;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
AReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
AReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
AReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
AReg	jit_blas_gemm.h	/^    int CReg = 0, CF32Reg = 9, BReg = 18, AReg = 21, ZpAReg = 22, ZpTmp = 25;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
ARegCount	jit_blas_gemm.h	/^    int CRegCount = 12, BRegCount = 3, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
ARegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 2, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
ARegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 3, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
ARegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 6, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
ARegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 6, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
ARegCount	jit_blas_gemm.h	/^    int CRegCount = 9, BRegCount = 3, ARegCount = 1, ZpARegCount = MTILE;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
ATile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
ATile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
ATile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
ATile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
ATile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
ATile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
AType	jit_blas_gemm.h	/^  typedef float AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
AType	jit_blas_gemm.h	/^  typedef float AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
AType	jit_blas_gemm.h	/^  typedef int8_t AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
AType	jit_blas_gemm.h	/^  typedef int8_t AType;$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
AType	jit_blas_gemm.h	/^  typedef uint8_t AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
AType	jit_blas_gemm.h	/^  typedef uint8_t AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
AType	jit_blas_gemm.h	/^  typedef uint8_t AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
AType	jit_blas_gemm.h	/^  typedef uint8_t AType;$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
AType	jit_blas_gemm.h	/^  typedef utils::bf16 AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
AType	jit_blas_gemm.h	/^  typedef utils::bf16 AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
AType	jit_blas_gemm.h	/^  typedef utils::fp16 AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
AType	jit_blas_gemm.h	/^  typedef utils::fp16 AType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
AUTO_GROW	xbyak/xbyak.h	/^		AUTO_GROW \/\/ automatically move and grow memory if necessary$/;"	e	enum:Xbyak::CodeArray::Type
AVX	jit_blas_utils.h	/^  inline bool AVX() { return mHasAVX; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AVX2	jit_blas_utils.h	/^  inline bool AVX2() { return mHasAVX2; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AVX2_4X24	jit_blas_gemm.h	/^  AVX2_4X24,$/;"	m	class:jblas::gemm::GemmCoreType
AVX512F	jit_blas_utils.h	/^  inline bool AVX512F() { return mHasAVX512F; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AVX512F_8X48	jit_blas_gemm.h	/^  AVX512F_8X48,$/;"	m	class:jblas::gemm::GemmCoreType
AVX512_FP16	jit_blas_utils.h	/^  inline bool AVX512_FP16() { return mHasAVX512_FP16; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AVX512_FP16_8x64	jit_blas_gemm.h	/^  AVX512_FP16_8x64,$/;"	m	class:jblas::gemm::GemmCoreType
AVX512_FP16_8x96	jit_blas_gemm.h	/^  AVX512_FP16_8x96,$/;"	m	class:jblas::gemm::GemmCoreType
AVX512_VNNI	jit_blas_utils.h	/^  inline bool AVX512_VNNI() { return mHasAVX512_VNNI; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AVX512_VNNI_3X48_KBLOCK	jit_blas_gemm.h	/^  AVX512_VNNI_3X48_KBLOCK,$/;"	m	class:jblas::gemm::GemmCoreType
AVX512_VNNI_8X48	jit_blas_gemm.h	/^  AVX512_VNNI_8X48,$/;"	m	class:jblas::gemm::GemmCoreType
AVX_VNNI	jit_blas_utils.h	/^  inline bool AVX_VNNI() { return mHasAVX_VNNI; }$/;"	f	class:jblas::utils::parallel::CpuDevice
AVXtype	xbyak/xbyak.h	/^	enum AVXtype {$/;"	g	class:Xbyak::CodeGenerator
AX	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
A_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
A_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
A_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
A_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
A_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
A_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
AccumulateDequantizeS32F32	kernel_wrapper.h	/^class AccumulateDequantizeS32F32 {$/;"	c	namespace:jblas::kernel::wrapper
AccumulatorWriteBack	jit_blas_epilogue.h	/^class AccumulatorWriteBack {$/;"	c	namespace:jblas::epilogue::gemm
ActivationBase	jit_blas_prologue.h	/^  ActivationBase() {}$/;"	f	class:jblas::prologue::gemm::ActivationBase
ActivationBase	jit_blas_prologue.h	/^class ActivationBase {$/;"	c	namespace:jblas::prologue::gemm
ActivationConverterFp32	jit_blas_prologue.h	/^  ActivationConverterFp32() {}$/;"	f	class:jblas::prologue::gemm::ActivationConverterFp32
ActivationConverterFp32	jit_blas_prologue.h	/^class ActivationConverterFp32 {$/;"	c	namespace:jblas::prologue::gemm
ActivationF32S8KBlockQuantize	jit_blas_prologue.h	/^class ActivationF32S8KBlockQuantize {$/;"	c	namespace:jblas::prologue::gemm
ActivationF32U8KBlockQuantize	jit_blas_prologue.h	/^class ActivationF32U8KBlockQuantize {$/;"	c	namespace:jblas::prologue::gemm
ActivationFp32AsymU8Quantize	jit_blas_prologue.h	/^class ActivationFp32AsymU8Quantize {$/;"	c	namespace:jblas::prologue::gemm
ActivationFp32SymS8Quantize	jit_blas_prologue.h	/^class ActivationFp32SymS8Quantize {$/;"	c	namespace:jblas::prologue::gemm
AddrInfo	xbyak/xbyak.h	/^		AddrInfo(size_t _codeOffset, size_t _jmpAddr, int _jmpSize, inner::LabelMode _mode)$/;"	f	struct:Xbyak::CodeArray::AddrInfo
AddrInfo	xbyak/xbyak.h	/^	struct AddrInfo {$/;"	s	class:Xbyak::CodeArray
AddrInfoList	xbyak/xbyak.h	/^	typedef std::list<AddrInfo> AddrInfoList;$/;"	t	class:Xbyak::CodeArray
Address	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Address(uint32_t sizeBit, bool broadcast, const RegExp& e)$/;"	f	class:Xbyak::Address
Address	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Address(uint32_t sizeBit, bool broadcast, const RegRip& addr)$/;"	f	class:Xbyak::Address
Address	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Address(size_t disp)$/;"	f	class:Xbyak::Address
Address	xbyak/xbyak.h	/^class Address : public Operand {$/;"	c	namespace:Xbyak
AddressFrame	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR AddressFrame(uint32_t bit, bool broadcast = false) : bit_(bit), broadcast_(broadcast) { }$/;"	f	class:Xbyak::AddressFrame
AddressFrame	xbyak/xbyak.h	/^class AddressFrame {$/;"	c	namespace:Xbyak
AlignedFree	xbyak/xbyak.h	/^inline void AlignedFree(void *p)$/;"	f	namespace:Xbyak
AlignedMalloc	xbyak/xbyak.h	/^inline void *AlignedMalloc(size_t size, size_t alignment)$/;"	f	namespace:Xbyak
Allocation	xbyak/xbyak.h	/^	struct Allocation {$/;"	s	class:Xbyak::MmapAllocator
AllocationList	xbyak/xbyak.h	/^	typedef XBYAK_STD_UNORDERED_MAP<uintptr_t, Allocation> AllocationList;$/;"	t	class:Xbyak::MmapAllocator
Allocator	xbyak/xbyak.h	/^	explicit Allocator(const std::string& = "") {} \/\/ same interface with MmapAllocator$/;"	f	struct:Xbyak::Allocator
Allocator	xbyak/xbyak.h	/^struct Allocator {$/;"	s	namespace:Xbyak
AlphaBetaF32F32	kernel_wrapper.h	/^class AlphaBetaF32F32 {$/;"	c	namespace:jblas::kernel::wrapper
AlphaBetaProcessFp32	jit_blas_epilogue.h	/^class AlphaBetaProcessFp32 {$/;"	c	namespace:jblas::epilogue::gemm
AlphaBetaProcessS32U8	jit_blas_epilogue.h	/^class AlphaBetaProcessS32U8 {$/;"	c	namespace:jblas::epilogue::gemm
Arguments	jit_blas_transformer.h	/^  struct Arguments {$/;"	s	class:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight
Arguments	jit_blas_transformer.h	/^  struct Arguments {$/;"	s	class:jblas::wrapper::transformer::QKVGemmInterfacePackWeight
AutoGrow	xbyak/xbyak.h	/^void *const AutoGrow = (void*)1; \/\/-V566$/;"	m	namespace:Xbyak
B	jit_blas_prologue.h	/^    const WType* B;$/;"	m	struct:jblas::prologue::gemm::WeightPack::Param
B00000000	xbyak/xbyak_bin2hex.h	/^	B00000000= 0,$/;"	e	enum:__anon13
B00000001	xbyak/xbyak_bin2hex.h	/^	B00000001= 1,$/;"	e	enum:__anon13
B00000010	xbyak/xbyak_bin2hex.h	/^	B00000010= 2,$/;"	e	enum:__anon13
B00000011	xbyak/xbyak_bin2hex.h	/^	B00000011= 3,$/;"	e	enum:__anon13
B00000100	xbyak/xbyak_bin2hex.h	/^	B00000100= 4,$/;"	e	enum:__anon13
B00000101	xbyak/xbyak_bin2hex.h	/^	B00000101= 5,$/;"	e	enum:__anon13
B00000110	xbyak/xbyak_bin2hex.h	/^	B00000110= 6,$/;"	e	enum:__anon13
B00000111	xbyak/xbyak_bin2hex.h	/^	B00000111= 7,$/;"	e	enum:__anon13
B00001000	xbyak/xbyak_bin2hex.h	/^	B00001000= 8,$/;"	e	enum:__anon13
B00001001	xbyak/xbyak_bin2hex.h	/^	B00001001= 9,$/;"	e	enum:__anon13
B00001010	xbyak/xbyak_bin2hex.h	/^	B00001010= 10,$/;"	e	enum:__anon13
B00001011	xbyak/xbyak_bin2hex.h	/^	B00001011= 11,$/;"	e	enum:__anon13
B00001100	xbyak/xbyak_bin2hex.h	/^	B00001100= 12,$/;"	e	enum:__anon13
B00001101	xbyak/xbyak_bin2hex.h	/^	B00001101= 13,$/;"	e	enum:__anon13
B00001110	xbyak/xbyak_bin2hex.h	/^	B00001110= 14,$/;"	e	enum:__anon13
B00001111	xbyak/xbyak_bin2hex.h	/^	B00001111= 15,$/;"	e	enum:__anon13
B00010000	xbyak/xbyak_bin2hex.h	/^	B00010000= 16,$/;"	e	enum:__anon13
B00010001	xbyak/xbyak_bin2hex.h	/^	B00010001= 17,$/;"	e	enum:__anon13
B00010010	xbyak/xbyak_bin2hex.h	/^	B00010010= 18,$/;"	e	enum:__anon13
B00010011	xbyak/xbyak_bin2hex.h	/^	B00010011= 19,$/;"	e	enum:__anon13
B00010100	xbyak/xbyak_bin2hex.h	/^	B00010100= 20,$/;"	e	enum:__anon13
B00010101	xbyak/xbyak_bin2hex.h	/^	B00010101= 21,$/;"	e	enum:__anon13
B00010110	xbyak/xbyak_bin2hex.h	/^	B00010110= 22,$/;"	e	enum:__anon13
B00010111	xbyak/xbyak_bin2hex.h	/^	B00010111= 23,$/;"	e	enum:__anon13
B00011000	xbyak/xbyak_bin2hex.h	/^	B00011000= 24,$/;"	e	enum:__anon13
B00011001	xbyak/xbyak_bin2hex.h	/^	B00011001= 25,$/;"	e	enum:__anon13
B00011010	xbyak/xbyak_bin2hex.h	/^	B00011010= 26,$/;"	e	enum:__anon13
B00011011	xbyak/xbyak_bin2hex.h	/^	B00011011= 27,$/;"	e	enum:__anon13
B00011100	xbyak/xbyak_bin2hex.h	/^	B00011100= 28,$/;"	e	enum:__anon13
B00011101	xbyak/xbyak_bin2hex.h	/^	B00011101= 29,$/;"	e	enum:__anon13
B00011110	xbyak/xbyak_bin2hex.h	/^	B00011110= 30,$/;"	e	enum:__anon13
B00011111	xbyak/xbyak_bin2hex.h	/^	B00011111= 31,$/;"	e	enum:__anon13
B00100000	xbyak/xbyak_bin2hex.h	/^	B00100000= 32,$/;"	e	enum:__anon13
B00100001	xbyak/xbyak_bin2hex.h	/^	B00100001= 33,$/;"	e	enum:__anon13
B00100010	xbyak/xbyak_bin2hex.h	/^	B00100010= 34,$/;"	e	enum:__anon13
B00100011	xbyak/xbyak_bin2hex.h	/^	B00100011= 35,$/;"	e	enum:__anon13
B00100100	xbyak/xbyak_bin2hex.h	/^	B00100100= 36,$/;"	e	enum:__anon13
B00100101	xbyak/xbyak_bin2hex.h	/^	B00100101= 37,$/;"	e	enum:__anon13
B00100110	xbyak/xbyak_bin2hex.h	/^	B00100110= 38,$/;"	e	enum:__anon13
B00100111	xbyak/xbyak_bin2hex.h	/^	B00100111= 39,$/;"	e	enum:__anon13
B00101000	xbyak/xbyak_bin2hex.h	/^	B00101000= 40,$/;"	e	enum:__anon13
B00101001	xbyak/xbyak_bin2hex.h	/^	B00101001= 41,$/;"	e	enum:__anon13
B00101010	xbyak/xbyak_bin2hex.h	/^	B00101010= 42,$/;"	e	enum:__anon13
B00101011	xbyak/xbyak_bin2hex.h	/^	B00101011= 43,$/;"	e	enum:__anon13
B00101100	xbyak/xbyak_bin2hex.h	/^	B00101100= 44,$/;"	e	enum:__anon13
B00101101	xbyak/xbyak_bin2hex.h	/^	B00101101= 45,$/;"	e	enum:__anon13
B00101110	xbyak/xbyak_bin2hex.h	/^	B00101110= 46,$/;"	e	enum:__anon13
B00101111	xbyak/xbyak_bin2hex.h	/^	B00101111= 47,$/;"	e	enum:__anon13
B00110000	xbyak/xbyak_bin2hex.h	/^	B00110000= 48,$/;"	e	enum:__anon13
B00110001	xbyak/xbyak_bin2hex.h	/^	B00110001= 49,$/;"	e	enum:__anon13
B00110010	xbyak/xbyak_bin2hex.h	/^	B00110010= 50,$/;"	e	enum:__anon13
B00110011	xbyak/xbyak_bin2hex.h	/^	B00110011= 51,$/;"	e	enum:__anon13
B00110100	xbyak/xbyak_bin2hex.h	/^	B00110100= 52,$/;"	e	enum:__anon13
B00110101	xbyak/xbyak_bin2hex.h	/^	B00110101= 53,$/;"	e	enum:__anon13
B00110110	xbyak/xbyak_bin2hex.h	/^	B00110110= 54,$/;"	e	enum:__anon13
B00110111	xbyak/xbyak_bin2hex.h	/^	B00110111= 55,$/;"	e	enum:__anon13
B00111000	xbyak/xbyak_bin2hex.h	/^	B00111000= 56,$/;"	e	enum:__anon13
B00111001	xbyak/xbyak_bin2hex.h	/^	B00111001= 57,$/;"	e	enum:__anon13
B00111010	xbyak/xbyak_bin2hex.h	/^	B00111010= 58,$/;"	e	enum:__anon13
B00111011	xbyak/xbyak_bin2hex.h	/^	B00111011= 59,$/;"	e	enum:__anon13
B00111100	xbyak/xbyak_bin2hex.h	/^	B00111100= 60,$/;"	e	enum:__anon13
B00111101	xbyak/xbyak_bin2hex.h	/^	B00111101= 61,$/;"	e	enum:__anon13
B00111110	xbyak/xbyak_bin2hex.h	/^	B00111110= 62,$/;"	e	enum:__anon13
B00111111	xbyak/xbyak_bin2hex.h	/^	B00111111= 63,$/;"	e	enum:__anon13
B01000000	xbyak/xbyak_bin2hex.h	/^	B01000000= 64,$/;"	e	enum:__anon13
B01000001	xbyak/xbyak_bin2hex.h	/^	B01000001= 65,$/;"	e	enum:__anon13
B01000010	xbyak/xbyak_bin2hex.h	/^	B01000010= 66,$/;"	e	enum:__anon13
B01000011	xbyak/xbyak_bin2hex.h	/^	B01000011= 67,$/;"	e	enum:__anon13
B01000100	xbyak/xbyak_bin2hex.h	/^	B01000100= 68,$/;"	e	enum:__anon13
B01000101	xbyak/xbyak_bin2hex.h	/^	B01000101= 69,$/;"	e	enum:__anon13
B01000110	xbyak/xbyak_bin2hex.h	/^	B01000110= 70,$/;"	e	enum:__anon13
B01000111	xbyak/xbyak_bin2hex.h	/^	B01000111= 71,$/;"	e	enum:__anon13
B01001000	xbyak/xbyak_bin2hex.h	/^	B01001000= 72,$/;"	e	enum:__anon13
B01001001	xbyak/xbyak_bin2hex.h	/^	B01001001= 73,$/;"	e	enum:__anon13
B01001010	xbyak/xbyak_bin2hex.h	/^	B01001010= 74,$/;"	e	enum:__anon13
B01001011	xbyak/xbyak_bin2hex.h	/^	B01001011= 75,$/;"	e	enum:__anon13
B01001100	xbyak/xbyak_bin2hex.h	/^	B01001100= 76,$/;"	e	enum:__anon13
B01001101	xbyak/xbyak_bin2hex.h	/^	B01001101= 77,$/;"	e	enum:__anon13
B01001110	xbyak/xbyak_bin2hex.h	/^	B01001110= 78,$/;"	e	enum:__anon13
B01001111	xbyak/xbyak_bin2hex.h	/^	B01001111= 79,$/;"	e	enum:__anon13
B01010000	xbyak/xbyak_bin2hex.h	/^	B01010000= 80,$/;"	e	enum:__anon13
B01010001	xbyak/xbyak_bin2hex.h	/^	B01010001= 81,$/;"	e	enum:__anon13
B01010010	xbyak/xbyak_bin2hex.h	/^	B01010010= 82,$/;"	e	enum:__anon13
B01010011	xbyak/xbyak_bin2hex.h	/^	B01010011= 83,$/;"	e	enum:__anon13
B01010100	xbyak/xbyak_bin2hex.h	/^	B01010100= 84,$/;"	e	enum:__anon13
B01010101	xbyak/xbyak_bin2hex.h	/^	B01010101= 85,$/;"	e	enum:__anon13
B01010110	xbyak/xbyak_bin2hex.h	/^	B01010110= 86,$/;"	e	enum:__anon13
B01010111	xbyak/xbyak_bin2hex.h	/^	B01010111= 87,$/;"	e	enum:__anon13
B01011000	xbyak/xbyak_bin2hex.h	/^	B01011000= 88,$/;"	e	enum:__anon13
B01011001	xbyak/xbyak_bin2hex.h	/^	B01011001= 89,$/;"	e	enum:__anon13
B01011010	xbyak/xbyak_bin2hex.h	/^	B01011010= 90,$/;"	e	enum:__anon13
B01011011	xbyak/xbyak_bin2hex.h	/^	B01011011= 91,$/;"	e	enum:__anon13
B01011100	xbyak/xbyak_bin2hex.h	/^	B01011100= 92,$/;"	e	enum:__anon13
B01011101	xbyak/xbyak_bin2hex.h	/^	B01011101= 93,$/;"	e	enum:__anon13
B01011110	xbyak/xbyak_bin2hex.h	/^	B01011110= 94,$/;"	e	enum:__anon13
B01011111	xbyak/xbyak_bin2hex.h	/^	B01011111= 95,$/;"	e	enum:__anon13
B01100000	xbyak/xbyak_bin2hex.h	/^	B01100000= 96,$/;"	e	enum:__anon13
B01100001	xbyak/xbyak_bin2hex.h	/^	B01100001= 97,$/;"	e	enum:__anon13
B01100010	xbyak/xbyak_bin2hex.h	/^	B01100010= 98,$/;"	e	enum:__anon13
B01100011	xbyak/xbyak_bin2hex.h	/^	B01100011= 99,$/;"	e	enum:__anon13
B01100100	xbyak/xbyak_bin2hex.h	/^	B01100100= 100,$/;"	e	enum:__anon13
B01100101	xbyak/xbyak_bin2hex.h	/^	B01100101= 101,$/;"	e	enum:__anon13
B01100110	xbyak/xbyak_bin2hex.h	/^	B01100110= 102,$/;"	e	enum:__anon13
B01100111	xbyak/xbyak_bin2hex.h	/^	B01100111= 103,$/;"	e	enum:__anon13
B01101000	xbyak/xbyak_bin2hex.h	/^	B01101000= 104,$/;"	e	enum:__anon13
B01101001	xbyak/xbyak_bin2hex.h	/^	B01101001= 105,$/;"	e	enum:__anon13
B01101010	xbyak/xbyak_bin2hex.h	/^	B01101010= 106,$/;"	e	enum:__anon13
B01101011	xbyak/xbyak_bin2hex.h	/^	B01101011= 107,$/;"	e	enum:__anon13
B01101100	xbyak/xbyak_bin2hex.h	/^	B01101100= 108,$/;"	e	enum:__anon13
B01101101	xbyak/xbyak_bin2hex.h	/^	B01101101= 109,$/;"	e	enum:__anon13
B01101110	xbyak/xbyak_bin2hex.h	/^	B01101110= 110,$/;"	e	enum:__anon13
B01101111	xbyak/xbyak_bin2hex.h	/^	B01101111= 111,$/;"	e	enum:__anon13
B01110000	xbyak/xbyak_bin2hex.h	/^	B01110000= 112,$/;"	e	enum:__anon13
B01110001	xbyak/xbyak_bin2hex.h	/^	B01110001= 113,$/;"	e	enum:__anon13
B01110010	xbyak/xbyak_bin2hex.h	/^	B01110010= 114,$/;"	e	enum:__anon13
B01110011	xbyak/xbyak_bin2hex.h	/^	B01110011= 115,$/;"	e	enum:__anon13
B01110100	xbyak/xbyak_bin2hex.h	/^	B01110100= 116,$/;"	e	enum:__anon13
B01110101	xbyak/xbyak_bin2hex.h	/^	B01110101= 117,$/;"	e	enum:__anon13
B01110110	xbyak/xbyak_bin2hex.h	/^	B01110110= 118,$/;"	e	enum:__anon13
B01110111	xbyak/xbyak_bin2hex.h	/^	B01110111= 119,$/;"	e	enum:__anon13
B01111000	xbyak/xbyak_bin2hex.h	/^	B01111000= 120,$/;"	e	enum:__anon13
B01111001	xbyak/xbyak_bin2hex.h	/^	B01111001= 121,$/;"	e	enum:__anon13
B01111010	xbyak/xbyak_bin2hex.h	/^	B01111010= 122,$/;"	e	enum:__anon13
B01111011	xbyak/xbyak_bin2hex.h	/^	B01111011= 123,$/;"	e	enum:__anon13
B01111100	xbyak/xbyak_bin2hex.h	/^	B01111100= 124,$/;"	e	enum:__anon13
B01111101	xbyak/xbyak_bin2hex.h	/^	B01111101= 125,$/;"	e	enum:__anon13
B01111110	xbyak/xbyak_bin2hex.h	/^	B01111110= 126,$/;"	e	enum:__anon13
B01111111	xbyak/xbyak_bin2hex.h	/^	B01111111= 127,$/;"	e	enum:__anon13
B10000000	xbyak/xbyak_bin2hex.h	/^	B10000000= 128,$/;"	e	enum:__anon13
B10000001	xbyak/xbyak_bin2hex.h	/^	B10000001= 129,$/;"	e	enum:__anon13
B10000010	xbyak/xbyak_bin2hex.h	/^	B10000010= 130,$/;"	e	enum:__anon13
B10000011	xbyak/xbyak_bin2hex.h	/^	B10000011= 131,$/;"	e	enum:__anon13
B10000100	xbyak/xbyak_bin2hex.h	/^	B10000100= 132,$/;"	e	enum:__anon13
B10000101	xbyak/xbyak_bin2hex.h	/^	B10000101= 133,$/;"	e	enum:__anon13
B10000110	xbyak/xbyak_bin2hex.h	/^	B10000110= 134,$/;"	e	enum:__anon13
B10000111	xbyak/xbyak_bin2hex.h	/^	B10000111= 135,$/;"	e	enum:__anon13
B10001000	xbyak/xbyak_bin2hex.h	/^	B10001000= 136,$/;"	e	enum:__anon13
B10001001	xbyak/xbyak_bin2hex.h	/^	B10001001= 137,$/;"	e	enum:__anon13
B10001010	xbyak/xbyak_bin2hex.h	/^	B10001010= 138,$/;"	e	enum:__anon13
B10001011	xbyak/xbyak_bin2hex.h	/^	B10001011= 139,$/;"	e	enum:__anon13
B10001100	xbyak/xbyak_bin2hex.h	/^	B10001100= 140,$/;"	e	enum:__anon13
B10001101	xbyak/xbyak_bin2hex.h	/^	B10001101= 141,$/;"	e	enum:__anon13
B10001110	xbyak/xbyak_bin2hex.h	/^	B10001110= 142,$/;"	e	enum:__anon13
B10001111	xbyak/xbyak_bin2hex.h	/^	B10001111= 143,$/;"	e	enum:__anon13
B10010000	xbyak/xbyak_bin2hex.h	/^	B10010000= 144,$/;"	e	enum:__anon13
B10010001	xbyak/xbyak_bin2hex.h	/^	B10010001= 145,$/;"	e	enum:__anon13
B10010010	xbyak/xbyak_bin2hex.h	/^	B10010010= 146,$/;"	e	enum:__anon13
B10010011	xbyak/xbyak_bin2hex.h	/^	B10010011= 147,$/;"	e	enum:__anon13
B10010100	xbyak/xbyak_bin2hex.h	/^	B10010100= 148,$/;"	e	enum:__anon13
B10010101	xbyak/xbyak_bin2hex.h	/^	B10010101= 149,$/;"	e	enum:__anon13
B10010110	xbyak/xbyak_bin2hex.h	/^	B10010110= 150,$/;"	e	enum:__anon13
B10010111	xbyak/xbyak_bin2hex.h	/^	B10010111= 151,$/;"	e	enum:__anon13
B10011000	xbyak/xbyak_bin2hex.h	/^	B10011000= 152,$/;"	e	enum:__anon13
B10011001	xbyak/xbyak_bin2hex.h	/^	B10011001= 153,$/;"	e	enum:__anon13
B10011010	xbyak/xbyak_bin2hex.h	/^	B10011010= 154,$/;"	e	enum:__anon13
B10011011	xbyak/xbyak_bin2hex.h	/^	B10011011= 155,$/;"	e	enum:__anon13
B10011100	xbyak/xbyak_bin2hex.h	/^	B10011100= 156,$/;"	e	enum:__anon13
B10011101	xbyak/xbyak_bin2hex.h	/^	B10011101= 157,$/;"	e	enum:__anon13
B10011110	xbyak/xbyak_bin2hex.h	/^	B10011110= 158,$/;"	e	enum:__anon13
B10011111	xbyak/xbyak_bin2hex.h	/^	B10011111= 159,$/;"	e	enum:__anon13
B10100000	xbyak/xbyak_bin2hex.h	/^	B10100000= 160,$/;"	e	enum:__anon13
B10100001	xbyak/xbyak_bin2hex.h	/^	B10100001= 161,$/;"	e	enum:__anon13
B10100010	xbyak/xbyak_bin2hex.h	/^	B10100010= 162,$/;"	e	enum:__anon13
B10100011	xbyak/xbyak_bin2hex.h	/^	B10100011= 163,$/;"	e	enum:__anon13
B10100100	xbyak/xbyak_bin2hex.h	/^	B10100100= 164,$/;"	e	enum:__anon13
B10100101	xbyak/xbyak_bin2hex.h	/^	B10100101= 165,$/;"	e	enum:__anon13
B10100110	xbyak/xbyak_bin2hex.h	/^	B10100110= 166,$/;"	e	enum:__anon13
B10100111	xbyak/xbyak_bin2hex.h	/^	B10100111= 167,$/;"	e	enum:__anon13
B10101000	xbyak/xbyak_bin2hex.h	/^	B10101000= 168,$/;"	e	enum:__anon13
B10101001	xbyak/xbyak_bin2hex.h	/^	B10101001= 169,$/;"	e	enum:__anon13
B10101010	xbyak/xbyak_bin2hex.h	/^	B10101010= 170,$/;"	e	enum:__anon13
B10101011	xbyak/xbyak_bin2hex.h	/^	B10101011= 171,$/;"	e	enum:__anon13
B10101100	xbyak/xbyak_bin2hex.h	/^	B10101100= 172,$/;"	e	enum:__anon13
B10101101	xbyak/xbyak_bin2hex.h	/^	B10101101= 173,$/;"	e	enum:__anon13
B10101110	xbyak/xbyak_bin2hex.h	/^	B10101110= 174,$/;"	e	enum:__anon13
B10101111	xbyak/xbyak_bin2hex.h	/^	B10101111= 175,$/;"	e	enum:__anon13
B10110000	xbyak/xbyak_bin2hex.h	/^	B10110000= 176,$/;"	e	enum:__anon13
B10110001	xbyak/xbyak_bin2hex.h	/^	B10110001= 177,$/;"	e	enum:__anon13
B10110010	xbyak/xbyak_bin2hex.h	/^	B10110010= 178,$/;"	e	enum:__anon13
B10110011	xbyak/xbyak_bin2hex.h	/^	B10110011= 179,$/;"	e	enum:__anon13
B10110100	xbyak/xbyak_bin2hex.h	/^	B10110100= 180,$/;"	e	enum:__anon13
B10110101	xbyak/xbyak_bin2hex.h	/^	B10110101= 181,$/;"	e	enum:__anon13
B10110110	xbyak/xbyak_bin2hex.h	/^	B10110110= 182,$/;"	e	enum:__anon13
B10110111	xbyak/xbyak_bin2hex.h	/^	B10110111= 183,$/;"	e	enum:__anon13
B10111000	xbyak/xbyak_bin2hex.h	/^	B10111000= 184,$/;"	e	enum:__anon13
B10111001	xbyak/xbyak_bin2hex.h	/^	B10111001= 185,$/;"	e	enum:__anon13
B10111010	xbyak/xbyak_bin2hex.h	/^	B10111010= 186,$/;"	e	enum:__anon13
B10111011	xbyak/xbyak_bin2hex.h	/^	B10111011= 187,$/;"	e	enum:__anon13
B10111100	xbyak/xbyak_bin2hex.h	/^	B10111100= 188,$/;"	e	enum:__anon13
B10111101	xbyak/xbyak_bin2hex.h	/^	B10111101= 189,$/;"	e	enum:__anon13
B10111110	xbyak/xbyak_bin2hex.h	/^	B10111110= 190,$/;"	e	enum:__anon13
B10111111	xbyak/xbyak_bin2hex.h	/^	B10111111= 191,$/;"	e	enum:__anon13
B11000000	xbyak/xbyak_bin2hex.h	/^	B11000000= 192,$/;"	e	enum:__anon13
B11000001	xbyak/xbyak_bin2hex.h	/^	B11000001= 193,$/;"	e	enum:__anon13
B11000010	xbyak/xbyak_bin2hex.h	/^	B11000010= 194,$/;"	e	enum:__anon13
B11000011	xbyak/xbyak_bin2hex.h	/^	B11000011= 195,$/;"	e	enum:__anon13
B11000100	xbyak/xbyak_bin2hex.h	/^	B11000100= 196,$/;"	e	enum:__anon13
B11000101	xbyak/xbyak_bin2hex.h	/^	B11000101= 197,$/;"	e	enum:__anon13
B11000110	xbyak/xbyak_bin2hex.h	/^	B11000110= 198,$/;"	e	enum:__anon13
B11000111	xbyak/xbyak_bin2hex.h	/^	B11000111= 199,$/;"	e	enum:__anon13
B11001000	xbyak/xbyak_bin2hex.h	/^	B11001000= 200,$/;"	e	enum:__anon13
B11001001	xbyak/xbyak_bin2hex.h	/^	B11001001= 201,$/;"	e	enum:__anon13
B11001010	xbyak/xbyak_bin2hex.h	/^	B11001010= 202,$/;"	e	enum:__anon13
B11001011	xbyak/xbyak_bin2hex.h	/^	B11001011= 203,$/;"	e	enum:__anon13
B11001100	xbyak/xbyak_bin2hex.h	/^	B11001100= 204,$/;"	e	enum:__anon13
B11001101	xbyak/xbyak_bin2hex.h	/^	B11001101= 205,$/;"	e	enum:__anon13
B11001110	xbyak/xbyak_bin2hex.h	/^	B11001110= 206,$/;"	e	enum:__anon13
B11001111	xbyak/xbyak_bin2hex.h	/^	B11001111= 207,$/;"	e	enum:__anon13
B11010000	xbyak/xbyak_bin2hex.h	/^	B11010000= 208,$/;"	e	enum:__anon13
B11010001	xbyak/xbyak_bin2hex.h	/^	B11010001= 209,$/;"	e	enum:__anon13
B11010010	xbyak/xbyak_bin2hex.h	/^	B11010010= 210,$/;"	e	enum:__anon13
B11010011	xbyak/xbyak_bin2hex.h	/^	B11010011= 211,$/;"	e	enum:__anon13
B11010100	xbyak/xbyak_bin2hex.h	/^	B11010100= 212,$/;"	e	enum:__anon13
B11010101	xbyak/xbyak_bin2hex.h	/^	B11010101= 213,$/;"	e	enum:__anon13
B11010110	xbyak/xbyak_bin2hex.h	/^	B11010110= 214,$/;"	e	enum:__anon13
B11010111	xbyak/xbyak_bin2hex.h	/^	B11010111= 215,$/;"	e	enum:__anon13
B11011000	xbyak/xbyak_bin2hex.h	/^	B11011000= 216,$/;"	e	enum:__anon13
B11011001	xbyak/xbyak_bin2hex.h	/^	B11011001= 217,$/;"	e	enum:__anon13
B11011010	xbyak/xbyak_bin2hex.h	/^	B11011010= 218,$/;"	e	enum:__anon13
B11011011	xbyak/xbyak_bin2hex.h	/^	B11011011= 219,$/;"	e	enum:__anon13
B11011100	xbyak/xbyak_bin2hex.h	/^	B11011100= 220,$/;"	e	enum:__anon13
B11011101	xbyak/xbyak_bin2hex.h	/^	B11011101= 221,$/;"	e	enum:__anon13
B11011110	xbyak/xbyak_bin2hex.h	/^	B11011110= 222,$/;"	e	enum:__anon13
B11011111	xbyak/xbyak_bin2hex.h	/^	B11011111= 223,$/;"	e	enum:__anon13
B11100000	xbyak/xbyak_bin2hex.h	/^	B11100000= 224,$/;"	e	enum:__anon13
B11100001	xbyak/xbyak_bin2hex.h	/^	B11100001= 225,$/;"	e	enum:__anon13
B11100010	xbyak/xbyak_bin2hex.h	/^	B11100010= 226,$/;"	e	enum:__anon13
B11100011	xbyak/xbyak_bin2hex.h	/^	B11100011= 227,$/;"	e	enum:__anon13
B11100100	xbyak/xbyak_bin2hex.h	/^	B11100100= 228,$/;"	e	enum:__anon13
B11100101	xbyak/xbyak_bin2hex.h	/^	B11100101= 229,$/;"	e	enum:__anon13
B11100110	xbyak/xbyak_bin2hex.h	/^	B11100110= 230,$/;"	e	enum:__anon13
B11100111	xbyak/xbyak_bin2hex.h	/^	B11100111= 231,$/;"	e	enum:__anon13
B11101000	xbyak/xbyak_bin2hex.h	/^	B11101000= 232,$/;"	e	enum:__anon13
B11101001	xbyak/xbyak_bin2hex.h	/^	B11101001= 233,$/;"	e	enum:__anon13
B11101010	xbyak/xbyak_bin2hex.h	/^	B11101010= 234,$/;"	e	enum:__anon13
B11101011	xbyak/xbyak_bin2hex.h	/^	B11101011= 235,$/;"	e	enum:__anon13
B11101100	xbyak/xbyak_bin2hex.h	/^	B11101100= 236,$/;"	e	enum:__anon13
B11101101	xbyak/xbyak_bin2hex.h	/^	B11101101= 237,$/;"	e	enum:__anon13
B11101110	xbyak/xbyak_bin2hex.h	/^	B11101110= 238,$/;"	e	enum:__anon13
B11101111	xbyak/xbyak_bin2hex.h	/^	B11101111= 239,$/;"	e	enum:__anon13
B11110000	xbyak/xbyak_bin2hex.h	/^	B11110000= 240,$/;"	e	enum:__anon13
B11110001	xbyak/xbyak_bin2hex.h	/^	B11110001= 241,$/;"	e	enum:__anon13
B11110010	xbyak/xbyak_bin2hex.h	/^	B11110010= 242,$/;"	e	enum:__anon13
B11110011	xbyak/xbyak_bin2hex.h	/^	B11110011= 243,$/;"	e	enum:__anon13
B11110100	xbyak/xbyak_bin2hex.h	/^	B11110100= 244,$/;"	e	enum:__anon13
B11110101	xbyak/xbyak_bin2hex.h	/^	B11110101= 245,$/;"	e	enum:__anon13
B11110110	xbyak/xbyak_bin2hex.h	/^	B11110110= 246,$/;"	e	enum:__anon13
B11110111	xbyak/xbyak_bin2hex.h	/^	B11110111= 247,$/;"	e	enum:__anon13
B11111000	xbyak/xbyak_bin2hex.h	/^	B11111000= 248,$/;"	e	enum:__anon13
B11111001	xbyak/xbyak_bin2hex.h	/^	B11111001= 249,$/;"	e	enum:__anon13
B11111010	xbyak/xbyak_bin2hex.h	/^	B11111010= 250,$/;"	e	enum:__anon13
B11111011	xbyak/xbyak_bin2hex.h	/^	B11111011= 251,$/;"	e	enum:__anon13
B11111100	xbyak/xbyak_bin2hex.h	/^	B11111100= 252,$/;"	e	enum:__anon13
B11111101	xbyak/xbyak_bin2hex.h	/^	B11111101= 253,$/;"	e	enum:__anon13
B11111110	xbyak/xbyak_bin2hex.h	/^	B11111110= 254,$/;"	e	enum:__anon13
B11111111	xbyak/xbyak_bin2hex.h	/^	B11111111= 255$/;"	e	enum:__anon13
BH	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
BIT	xbyak/xbyak.h	/^	enum { i32e = 32 | 64, BIT = 64 };$/;"	e	enum:Xbyak::CodeGenerator::__anon9
BIT	xbyak/xbyak.h	/^	enum { i32e = 32, BIT = 32 };$/;"	e	enum:Xbyak::CodeGenerator::__anon10
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
BKStepSize	jit_blas_gemm.h	/^    static int constexpr BKStepSize = KTILE * NTILE * sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
BL	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
BNDREG	xbyak/xbyak.h	/^		BNDREG = 1 << 8,$/;"	e	enum:Xbyak::Operand::Kind
BP	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
BPL	xbyak/xbyak.h	/^		SPL = 4, BPL, SIL, DIL,$/;"	e	enum:Xbyak::Operand::Code
BReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 12, AReg = 15, TmpReg = BReg;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
BReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 26, TmpReg = 27;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
BReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
BReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
BReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
BReg	jit_blas_gemm.h	/^    int CReg = 0, CF32Reg = 9, BReg = 18, AReg = 21, ZpAReg = 22, ZpTmp = 25;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
BRegCount	jit_blas_gemm.h	/^    int CRegCount = 12, BRegCount = 3, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
BRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 2, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
BRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 3, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
BRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 6, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
BRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 6, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
BRegCount	jit_blas_gemm.h	/^    int CRegCount = 9, BRegCount = 3, ARegCount = 1, ZpARegCount = MTILE;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
BSize	jit_blas_utils.h	/^  static int constexpr BSize = sizeof(typename _GemmCore_T::BType);$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
BSize	jit_blas_utils.h	/^  static int constexpr BSize = sizeof(typename _GemmCore_T::BType);$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
BSize	jit_blas_utils.h	/^  static int constexpr BSize = sizeof(typename _GemmCore_T::BType);$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
BTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
BTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
BTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
BTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
BTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
BTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
BType	jit_blas_gemm.h	/^  typedef float BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
BType	jit_blas_gemm.h	/^  typedef float BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
BType	jit_blas_gemm.h	/^  typedef int8_t BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
BType	jit_blas_gemm.h	/^  typedef int8_t BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
BType	jit_blas_gemm.h	/^  typedef int8_t BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
BType	jit_blas_gemm.h	/^  typedef int8_t BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
BType	jit_blas_gemm.h	/^  typedef int8_t BType;$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
BType	jit_blas_gemm.h	/^  typedef int8_t BType;$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
BType	jit_blas_gemm.h	/^  typedef utils::bf16 BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
BType	jit_blas_gemm.h	/^  typedef utils::bf16 BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
BType	jit_blas_gemm.h	/^  typedef utils::fp16 BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
BType	jit_blas_gemm.h	/^  typedef utils::fp16 BType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
BX	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
B_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
B_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
B_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
B_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
B_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
B_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
Batch	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
Batch	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
Begin	jit_blas_prologue.h	/^  Begin = 0,$/;"	m	class:jblas::prologue::WeightPrologueType
Begin	jit_blas_weight_compression.h	/^  Begin = int(prologue::WeightPrologueType::End),$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
BoundsReg	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR BoundsReg(int idx = 0) : Reg(idx, Operand::BNDREG, 128) {}$/;"	f	struct:Xbyak::BoundsReg
BoundsReg	xbyak/xbyak.h	/^struct BoundsReg : public Reg {$/;"	s	namespace:Xbyak
Broadcast	kernel_wrapper.h	/^class Broadcast {$/;"	c	namespace:jblas::kernel::wrapper
C	jit_blas_epilogue.h	/^    _DST_T* C;$/;"	m	struct:jblas::epilogue::gemm::AccumulatorWriteBack::Param
C	jit_blas_epilogue.h	/^    _DST_T* C;$/;"	m	struct:jblas::epilogue::gemm::CustomAccumulatorWriteBackWithEltop::Param
C	jit_blas_epilogue.h	/^    float *C, *D;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessFp32::Param
C	jit_blas_epilogue.h	/^    float* C;$/;"	m	struct:jblas::epilogue::gemm::DequantInt32ToFp32::Param
C	jit_blas_epilogue.h	/^    float* C;$/;"	m	struct:jblas::epilogue::gemm::ZpDequantInt32ToFp32::Param
C	jit_blas_epilogue.h	/^    uint8_t* C;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessS32U8::Param
CF32Reg	jit_blas_gemm.h	/^    int CReg = 0, CF32Reg = 9, BReg = 18, AReg = 21, ZpAReg = 22, ZpTmp = 25;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
CH	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
CL	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
CReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 12, AReg = 15, TmpReg = BReg;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
CReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 26, TmpReg = 27;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
CReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
CReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
CReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
CReg	jit_blas_gemm.h	/^    int CReg = 0, CF32Reg = 9, BReg = 18, AReg = 21, ZpAReg = 22, ZpTmp = 25;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
CReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
CReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
CReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
CReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
CReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
CReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
CRegCount	jit_blas_gemm.h	/^    int CRegCount = 12, BRegCount = 3, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
CRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 2, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
CRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 3, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
CRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 6, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
CRegCount	jit_blas_gemm.h	/^    int CRegCount = 24, BRegCount = 6, ARegCount = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
CRegCount	jit_blas_gemm.h	/^    int CRegCount = 9, BRegCount = 3, ARegCount = 1, ZpARegCount = MTILE;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
CRegCount	jit_blas_gemm.h	/^    static int constexpr CRegCount = NRegs;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
CRegCount	jit_blas_gemm.h	/^    static int constexpr CRegCount = NRegs;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
CRegCount	jit_blas_gemm.h	/^    static int constexpr CRegCount = NRegs;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
CSize	jit_blas_utils.h	/^  static int constexpr CSize = sizeof(typename _GemmCore_T::CType);$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
CSize	jit_blas_utils.h	/^  static int constexpr CSize = sizeof(typename _GemmCore_T::CType);$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
CSize	jit_blas_utils.h	/^  static int constexpr CSize = sizeof(typename _GemmCore_T::CType);$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
CTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
CTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
CTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
CTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
CTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
CTile	jit_blas_gemm.h	/^    static int constexpr CTile = 0, ATile = CTile + C_tilenum, BTile = ATile + A_tilenum;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
CType	jit_blas_gemm.h	/^  typedef float CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
CType	jit_blas_gemm.h	/^  typedef float CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
CType	jit_blas_gemm.h	/^  typedef float CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
CType	jit_blas_gemm.h	/^  typedef float CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
CType	jit_blas_gemm.h	/^  typedef float CType;$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
CType	jit_blas_gemm.h	/^  typedef float CType;$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
CType	jit_blas_gemm.h	/^  typedef int32_t CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
CType	jit_blas_gemm.h	/^  typedef int32_t CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
CType	jit_blas_gemm.h	/^  typedef int32_t CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
CType	jit_blas_gemm.h	/^  typedef int32_t CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
CType	jit_blas_gemm.h	/^  typedef utils::fp16 CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
CType	jit_blas_gemm.h	/^  typedef utils::fp16 CType;$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
CX	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
C_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
C_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
C_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 3, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
C_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
C_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
C_tilenum	jit_blas_gemm.h	/^    static int constexpr C_tilenum = 4, A_tilenum = 1, B_tilenum = 3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
CheckISA	jit_blas_utils.h	510;"	d
ClabelDefList	xbyak/xbyak.h	/^	typedef XBYAK_STD_UNORDERED_MAP<int, ClabelVal> ClabelDefList;$/;"	t	class:Xbyak::LabelManager
ClabelUndefList	xbyak/xbyak.h	/^	typedef XBYAK_STD_UNORDERED_MULTIMAP<int, const JmpLabel> ClabelUndefList;$/;"	t	class:Xbyak::LabelManager
ClabelVal	xbyak/xbyak.h	/^		ClabelVal(size_t offset = 0) : offset(offset), refCount(1) {}$/;"	f	struct:Xbyak::LabelManager::ClabelVal
ClabelVal	xbyak/xbyak.h	/^	struct ClabelVal {$/;"	s	class:Xbyak::LabelManager
ClearError	xbyak/xbyak.h	/^inline void ClearError() { }$/;"	f	namespace:Xbyak
ClearError	xbyak/xbyak.h	/^inline void ClearError() {$/;"	f	namespace:Xbyak
Clock	xbyak/xbyak_util.h	/^	Clock()$/;"	f	class:Xbyak::util::Clock
Clock	xbyak/xbyak_util.h	/^class Clock {$/;"	c	namespace:Xbyak::util
Code	xbyak/xbyak.h	/^	enum Code {$/;"	g	class:Xbyak::Operand
CodeArray	xbyak/xbyak.h	/^	explicit CodeArray(size_t maxSize, void *userPtr = 0, Allocator *allocator = 0)$/;"	f	class:Xbyak::CodeArray
CodeArray	xbyak/xbyak.h	/^class CodeArray {$/;"	c	namespace:Xbyak
CodeGenerator	xbyak/xbyak.h	/^	CodeGenerator(size_t maxSize = DEFAULT_MAX_CODE_SIZE, void *userPtr = 0, Allocator *allocator = 0)$/;"	f	class:Xbyak::CodeGenerator
CodeGenerator	xbyak/xbyak.h	/^class CodeGenerator : public CodeArray {$/;"	c	namespace:Xbyak
ColPack	kernel_avx512f.h	/^  static constexpr int ColPack = 2;$/;"	m	struct:jblas::kernel::avx512f::padding_trans_interleave_cvt
CompileAMX	jit_blas_utils.h	31;"	d
CompileAMX	jit_blas_utils.h	39;"	d
CompileAMXBF16	jit_blas_utils.h	34;"	d
CompileAMXBF16	jit_blas_utils.h	42;"	d
CompileAMXINT8	jit_blas_utils.h	35;"	d
CompileAMXINT8	jit_blas_utils.h	43;"	d
CompileAVX2	jit_blas_utils.h	30;"	d
CompileAVX2	jit_blas_utils.h	38;"	d
CompileAVX512F	jit_blas_utils.h	29;"	d
CompileAVX512F	jit_blas_utils.h	37;"	d
CompileBF16	jit_blas_utils.h	32;"	d
CompileBF16	jit_blas_utils.h	40;"	d
CompileFP16	jit_blas_utils.h	33;"	d
CompileFP16	jit_blas_utils.h	41;"	d
CompressFp4	kernel_wrapper.h	/^class CompressFp4 {$/;"	c	namespace:jblas::kernel::wrapper
CompressS8S4	kernel_wrapper.h	/^class CompressS8S4 {$/;"	c	namespace:jblas::kernel::wrapper
ConvertErrorToString	xbyak/xbyak.h	/^inline const char *ConvertErrorToString(const Error& err)$/;"	f	namespace:Xbyak
ConvertErrorToString	xbyak/xbyak.h	/^inline const char *ConvertErrorToString(int err)$/;"	f	namespace:Xbyak
CoreLevel	xbyak/xbyak_util.h	/^   CoreLevel = 2$/;"	e	enum:Xbyak::util::__anon14
Cpu	xbyak/xbyak_util.h	/^	Cpu()$/;"	f	class:Xbyak::util::Cpu
Cpu	xbyak/xbyak_util.h	/^class Cpu {$/;"	c	namespace:Xbyak::util
CpuBase	jit_blas_utils.h	/^  CpuBase() {$/;"	f	class:jblas::utils::CpuBase
CpuBase	jit_blas_utils.h	/^class CpuBase {$/;"	c	namespace:jblas::utils
CpuDevice	jit_blas_utils.h	/^  CpuDevice() {$/;"	f	class:jblas::utils::parallel::CpuDevice
CpuDevice	jit_blas_utils.h	/^class CpuDevice {$/;"	c	namespace:jblas::utils::parallel
CustomAccumulatorWriteBackWithEltop	jit_blas_epilogue.h	/^class CustomAccumulatorWriteBackWithEltop {$/;"	c	namespace:jblas::epilogue::gemm
CustomMemCpy	kernel_jit.h	/^  CustomMemCpy(int unroll_row, std::vector<kernel::jit_injector::eltwise_injector>& injectors)$/;"	f	class:jblas::kernel::jit::CustomMemCpy
CustomMemCpy	kernel_jit.h	/^class CustomMemCpy : public JitMemcpy2DAvx512f {$/;"	c	namespace:jblas::kernel::jit
D	jit_blas_epilogue.h	/^    float *C, *D;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessFp32::Param
DEFAULT_MAX_CODE_SIZE	xbyak/xbyak.h	/^	DEFAULT_MAX_CODE_SIZE = 4096,$/;"	e	enum:Xbyak::__anon3
DH	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
DI	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
DIL	xbyak/xbyak.h	/^		SPL = 4, BPL, SIL, DIL,$/;"	e	enum:Xbyak::Operand::Code
DL	xbyak/xbyak.h	/^		AL = 0, CL, DL, BL, AH, CH, DH, BH$/;"	e	enum:Xbyak::Operand::Code
DX	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
DecompressKBlockF4FPPackRow	kernel_wrapper.h	/^class DecompressKBlockF4FPPackRow {$/;"	c	namespace:jblas::kernel::wrapper
DecompressKBlockF4Fp	kernel_wrapper.h	/^class DecompressKBlockF4Fp {$/;"	c	namespace:jblas::kernel::wrapper
DecompressKBlockS4FP	kernel_wrapper.h	/^class DecompressKBlockS4FP {$/;"	c	namespace:jblas::kernel::wrapper
DecompressKBlockS4FPPackRow	kernel_wrapper.h	/^class DecompressKBlockS4FPPackRow {$/;"	c	namespace:jblas::kernel::wrapper
DecompressKBlockS4S8	kernel_wrapper.h	/^class DecompressKBlockS4S8 {$/;"	c	namespace:jblas::kernel::wrapper
DecompressKBlockS8F32	kernel_wrapper.h	/^class DecompressKBlockS8F32 {$/;"	c	namespace:jblas::kernel::wrapper
DecompressKBlockS8FP32PackRow	kernel_wrapper.h	/^class DecompressKBlockS8FP32PackRow {$/;"	c	namespace:jblas::kernel::wrapper
DecompressS4S8_AVX512F	kernel_jit.h	/^  DecompressS4S8_AVX512F() {$/;"	f	class:jblas::kernel::jit::DecompressS4S8_AVX512F
DecompressS4S8_AVX512F	kernel_jit.h	/^class DecompressS4S8_AVX512F : protected jblas::xbyak::JitAvx512f {$/;"	c	namespace:jblas::kernel::jit
DefaultEncoding	xbyak/xbyak.h	/^	DefaultEncoding,$/;"	e	enum:Xbyak::__anon8
DefaultISA	jit_blas_transformer.h	/^static JBLAS_ISA constexpr DefaultISA = JblasAMX_BF16;$/;"	m	namespace:jblas::wrapper::transformer_default::weight_comp::amx_bf16
DefaultISA	jit_blas_transformer.h	/^static JBLAS_ISA constexpr DefaultISA = JblasAMX_INT8;$/;"	m	namespace:jblas::wrapper::transformer_default::weight_comp::amx_int8
DefaultISA	jit_blas_transformer.h	/^static JBLAS_ISA constexpr DefaultISA = JblasAVX512F;$/;"	m	namespace:jblas::wrapper::transformer_default::weight_comp::avx512f
DefaultISA	jit_blas_transformer.h	/^static JBLAS_ISA constexpr DefaultISA = JblasAVX512_VNNI;$/;"	m	namespace:jblas::wrapper::transformer_default::weight_comp::avx512_vnni
DefaultISA	jit_blas_weight_compression.h	/^JBLAS_ISA constexpr DefaultISA = JblasAMX_BF16;$/;"	m	namespace:jblas::wrapper::gemm_default::weight_comp::amx_bf16
DefaultISA	jit_blas_weight_compression.h	/^JBLAS_ISA constexpr DefaultISA = JblasAMX_INT8;$/;"	m	namespace:jblas::wrapper::gemm_default::weight_comp::amx_int8
DefaultISA	jit_blas_weight_compression.h	/^JBLAS_ISA constexpr DefaultISA = JblasAVX512F;$/;"	m	namespace:jblas::wrapper::gemm_default::weight_comp::avx512f
DefaultISA	jit_blas_weight_compression.h	/^JBLAS_ISA constexpr DefaultISA = JblasAVX512_VNNI;$/;"	m	namespace:jblas::wrapper::gemm_default::weight_comp::avx512_vnni
DefaultISA	jit_blas_wrapper.h	/^JBLAS_ISA constexpr DefaultISA = JblasAMX_BF16;$/;"	m	namespace:jblas::wrapper::gemm_default::amx_bf16
DefaultISA	jit_blas_wrapper.h	/^JBLAS_ISA constexpr DefaultISA = JblasAMX_INT8;$/;"	m	namespace:jblas::wrapper::gemm_default::amx_int8
DefaultISA	jit_blas_wrapper.h	/^JBLAS_ISA constexpr DefaultISA = JblasAVX512F;$/;"	m	namespace:jblas::wrapper::gemm_default::avx512f
DefaultISA	jit_blas_wrapper.h	/^JBLAS_ISA constexpr DefaultISA = JblasAVX512_FP16;$/;"	m	namespace:jblas::wrapper::gemm_default::avx512_fp16
DefaultISA	jit_blas_wrapper.h	/^JBLAS_ISA constexpr DefaultISA = JblasAVX512_VNNI;$/;"	m	namespace:jblas::wrapper::gemm_default::avx512_vnni
DequanKBlockS4F32	kernel_jit.h	/^class DequanKBlockS4F32 {$/;"	c	namespace:jblas::kernel::jit
DequanKBlockS8F32	kernel_jit.h	/^class DequanKBlockS8F32 {$/;"	c	namespace:jblas::kernel::jit
DequanS32Fp32	kernel_wrapper.h	/^class DequanS32Fp32 {$/;"	c	namespace:jblas::kernel::wrapper
DequanS8F32	kernel_jit.h	/^class DequanS8F32 {$/;"	c	namespace:jblas::kernel::jit
DequantInt32ToFp32	jit_blas_epilogue.h	/^class DequantInt32ToFp32 {$/;"	c	namespace:jblas::epilogue::gemm
DontSetProtectRWE	xbyak/xbyak.h	/^void *const DontSetProtectRWE = (void*)2; \/\/-V566$/;"	m	namespace:Xbyak
EAX	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
EBP	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
EBX	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
ECX	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
EDI	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
EDX	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
ERR_BAD_ADDRESSING	xbyak/xbyak.h	/^	ERR_BAD_ADDRESSING,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_ALIGN	xbyak/xbyak.h	/^	ERR_BAD_ALIGN,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_COMBINATION	xbyak/xbyak.h	/^	ERR_BAD_COMBINATION,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_LABEL_STR	xbyak/xbyak.h	/^	ERR_BAD_LABEL_STR,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_MEM_SIZE	xbyak/xbyak.h	/^	ERR_BAD_MEM_SIZE,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_PARAMETER	xbyak/xbyak.h	/^	ERR_BAD_PARAMETER,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_PNUM	xbyak/xbyak.h	/^	ERR_BAD_PNUM,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_PROTECT_MODE	xbyak/xbyak.h	/^	ERR_BAD_PROTECT_MODE,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_SCALE	xbyak/xbyak.h	/^	ERR_BAD_SCALE,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_SIZE_OF_REGISTER	xbyak/xbyak.h	/^	ERR_BAD_SIZE_OF_REGISTER,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_ST_COMBINATION	xbyak/xbyak.h	/^	ERR_BAD_ST_COMBINATION,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_TNUM	xbyak/xbyak.h	/^	ERR_BAD_TNUM,$/;"	e	enum:Xbyak::__anon4
ERR_BAD_VSIB_ADDRESSING	xbyak/xbyak.h	/^	ERR_BAD_VSIB_ADDRESSING,$/;"	e	enum:Xbyak::__anon4
ERR_CANT_ALLOC	xbyak/xbyak.h	/^	ERR_CANT_ALLOC,$/;"	e	enum:Xbyak::__anon4
ERR_CANT_CONVERT	xbyak/xbyak.h	/^	ERR_CANT_CONVERT,$/;"	e	enum:Xbyak::__anon4
ERR_CANT_PROTECT	xbyak/xbyak.h	/^	ERR_CANT_PROTECT,$/;"	e	enum:Xbyak::__anon4
ERR_CANT_USE_64BIT_DISP	xbyak/xbyak.h	/^	ERR_CANT_USE_64BIT_DISP,$/;"	e	enum:Xbyak::__anon4
ERR_CODE_ISNOT_COPYABLE	xbyak/xbyak.h	/^	ERR_CODE_ISNOT_COPYABLE,$/;"	e	enum:Xbyak::__anon4
ERR_CODE_IS_TOO_BIG	xbyak/xbyak.h	/^	ERR_CODE_IS_TOO_BIG,$/;"	e	enum:Xbyak::__anon4
ERR_ER_IS_INVALID	xbyak/xbyak.h	/^	ERR_ER_IS_INVALID,$/;"	e	enum:Xbyak::__anon4
ERR_ESP_CANT_BE_INDEX	xbyak/xbyak.h	/^	ERR_ESP_CANT_BE_INDEX,$/;"	e	enum:Xbyak::__anon4
ERR_EVEX_IS_INVALID	xbyak/xbyak.h	/^	ERR_EVEX_IS_INVALID,$/;"	e	enum:Xbyak::__anon4
ERR_IMM_IS_TOO_BIG	xbyak/xbyak.h	/^	ERR_IMM_IS_TOO_BIG,$/;"	e	enum:Xbyak::__anon4
ERR_INTERNAL	xbyak/xbyak.h	/^	ERR_INTERNAL \/\/ Put it at last.$/;"	e	enum:Xbyak::__anon4
ERR_INVALID_BROADCAST	xbyak/xbyak.h	/^	ERR_INVALID_BROADCAST,$/;"	e	enum:Xbyak::__anon4
ERR_INVALID_MIB_ADDRESS	xbyak/xbyak.h	/^	ERR_INVALID_MIB_ADDRESS,$/;"	e	enum:Xbyak::__anon4
ERR_INVALID_OPMASK_WITH_MEMORY	xbyak/xbyak.h	/^	ERR_INVALID_OPMASK_WITH_MEMORY,$/;"	e	enum:Xbyak::__anon4
ERR_INVALID_RIP_IN_AUTO_GROW	xbyak/xbyak.h	/^	ERR_INVALID_RIP_IN_AUTO_GROW,$/;"	e	enum:Xbyak::__anon4
ERR_INVALID_ZERO	xbyak/xbyak.h	/^	ERR_INVALID_ZERO,$/;"	e	enum:Xbyak::__anon4
ERR_K0_IS_INVALID	xbyak/xbyak.h	/^	ERR_K0_IS_INVALID,$/;"	e	enum:Xbyak::__anon4
ERR_LABEL_ISNOT_SET_BY_L	xbyak/xbyak.h	/^	ERR_LABEL_ISNOT_SET_BY_L,$/;"	e	enum:Xbyak::__anon4
ERR_LABEL_IS_ALREADY_SET_BY_L	xbyak/xbyak.h	/^	ERR_LABEL_IS_ALREADY_SET_BY_L,$/;"	e	enum:Xbyak::__anon4
ERR_LABEL_IS_NOT_FOUND	xbyak/xbyak.h	/^	ERR_LABEL_IS_NOT_FOUND,$/;"	e	enum:Xbyak::__anon4
ERR_LABEL_IS_REDEFINED	xbyak/xbyak.h	/^	ERR_LABEL_IS_REDEFINED,$/;"	e	enum:Xbyak::__anon4
ERR_LABEL_IS_TOO_FAR	xbyak/xbyak.h	/^	ERR_LABEL_IS_TOO_FAR,$/;"	e	enum:Xbyak::__anon4
ERR_MEM_SIZE_IS_NOT_SPECIFIED	xbyak/xbyak.h	/^	ERR_MEM_SIZE_IS_NOT_SPECIFIED,$/;"	e	enum:Xbyak::__anon4
ERR_MUNMAP	xbyak/xbyak.h	/^	ERR_MUNMAP,$/;"	e	enum:Xbyak::__anon4
ERR_NONE	xbyak/xbyak.h	/^	ERR_NONE = 0,$/;"	e	enum:Xbyak::__anon4
ERR_NOT_SUPPORTED	xbyak/xbyak.h	/^	ERR_NOT_SUPPORTED,$/;"	e	enum:Xbyak::__anon4
ERR_OFFSET_IS_TOO_BIG	xbyak/xbyak.h	/^	ERR_OFFSET_IS_TOO_BIG,$/;"	e	enum:Xbyak::__anon4
ERR_ONLY_T_NEAR_IS_SUPPORTED_IN_AUTO_GROW	xbyak/xbyak.h	/^	ERR_ONLY_T_NEAR_IS_SUPPORTED_IN_AUTO_GROW,$/;"	e	enum:Xbyak::__anon4
ERR_OPMASK_IS_ALREADY_SET	xbyak/xbyak.h	/^	ERR_OPMASK_IS_ALREADY_SET,$/;"	e	enum:Xbyak::__anon4
ERR_OVER_LOCAL_LABEL	xbyak/xbyak.h	/^	ERR_OVER_LOCAL_LABEL, \/\/ not used$/;"	e	enum:Xbyak::__anon4
ERR_ROUNDING_IS_ALREADY_SET	xbyak/xbyak.h	/^	ERR_ROUNDING_IS_ALREADY_SET,$/;"	e	enum:Xbyak::__anon4
ERR_SAE_IS_INVALID	xbyak/xbyak.h	/^	ERR_SAE_IS_INVALID,$/;"	e	enum:Xbyak::__anon4
ERR_SAME_REGS_ARE_INVALID	xbyak/xbyak.h	/^	ERR_SAME_REGS_ARE_INVALID,$/;"	e	enum:Xbyak::__anon4
ERR_UNDER_LOCAL_LABEL	xbyak/xbyak.h	/^	ERR_UNDER_LOCAL_LABEL,$/;"	e	enum:Xbyak::__anon4
ERR_X2APIC_IS_NOT_SUPPORTED	xbyak/xbyak.h	/^	ERR_X2APIC_IS_NOT_SUPPORTED,$/;"	e	enum:Xbyak::__anon4
ESI	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
ESP	xbyak/xbyak.h	/^		EAX = 0, ECX, EDX, EBX, ESP, EBP, ESI, EDI,$/;"	e	enum:Xbyak::Operand::Code
EXP	jit_blas.h	/^  EXP,$/;"	e	enum:JBLAS_ELTWISEOP
EXT8BIT	xbyak/xbyak.h	/^	static const uint8_t EXT8BIT = 0x20;$/;"	m	class:Xbyak::Operand
End	jit_blas_prologue.h	/^  End,$/;"	m	class:jblas::prologue::WeightPrologueType
End	jit_blas_weight_compression.h	/^  End,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
Error	xbyak/xbyak.h	/^	explicit Error(int err) : err_(err)$/;"	f	class:Xbyak::Error
Error	xbyak/xbyak.h	/^class Error : public std::exception {$/;"	c	namespace:Xbyak
EvexEncoding	xbyak/xbyak.h	/^	EvexEncoding$/;"	e	enum:Xbyak::__anon8
EvexModifierRounding	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR EvexModifierRounding(int rounding) : rounding(rounding) {}$/;"	f	struct:Xbyak::EvexModifierRounding
EvexModifierRounding	xbyak/xbyak.h	/^struct EvexModifierRounding {$/;"	s	namespace:Xbyak
EvexModifierZero	xbyak/xbyak.h	/^struct EvexModifierZero{ XBYAK_CONSTEXPR EvexModifierZero() {}};$/;"	f	struct:Xbyak::EvexModifierZero
EvexModifierZero	xbyak/xbyak.h	/^struct EvexModifierZero{ XBYAK_CONSTEXPR EvexModifierZero() {}};$/;"	s	namespace:Xbyak
F4_UNDEF	jit_blas.h	/^  F4_UNDEF,$/;"	e	enum:JBLAS_F4_TYPE
FP4_BNB	jit_blas.h	/^  FP4_BNB,$/;"	e	enum:JBLAS_F4_TYPE
FP4_E2M1	jit_blas.h	/^  FP4_E2M1,$/;"	e	enum:JBLAS_F4_TYPE
FPU	xbyak/xbyak.h	/^		FPU = 1 << 3,$/;"	e	enum:Xbyak::Operand::Kind
Fpu	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Fpu(int idx = 0) : Reg(idx, Operand::FPU, 32) { }$/;"	f	struct:Xbyak::Fpu
Fpu	xbyak/xbyak.h	/^struct Fpu : public Reg {$/;"	s	namespace:Xbyak
GELU	jit_blas.h	/^  GELU,$/;"	e	enum:JBLAS_ELTWISEOP
GemmCoreType	jit_blas_gemm.h	/^enum class GemmCoreType : int {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_16x48_AMX_BF16	jit_blas_gemm.h	/^  GemmCore_Row_NN_16x48_AMX_BF16() { mCodes.generate_code(); }$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
GemmCore_Row_NN_16x48_AMX_BF16	jit_blas_gemm.h	/^class GemmCore_Row_NN_16x48_AMX_BF16 {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_16x48_AMX_INT8	jit_blas_gemm.h	/^  GemmCore_Row_NN_16x48_AMX_INT8() { mCodes.generate_code(); }$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
GemmCore_Row_NN_16x48_AMX_INT8	jit_blas_gemm.h	/^class GemmCore_Row_NN_16x48_AMX_INT8 {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK	jit_blas_gemm.h	/^  GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK() {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK	jit_blas_gemm.h	/^class GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK {$/;"	c	namespace:jblas::gemm::kblock
GemmCore_Row_NN_16x48_AMX_INT8_ss	jit_blas_gemm.h	/^  GemmCore_Row_NN_16x48_AMX_INT8_ss() { mCodes.generate_code(); }$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
GemmCore_Row_NN_16x48_AMX_INT8_ss	jit_blas_gemm.h	/^class GemmCore_Row_NN_16x48_AMX_INT8_ss {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_16x64_AMX_BF16	jit_blas_gemm.h	/^  GemmCore_Row_NN_16x64_AMX_BF16() { mCodes.generate_code(); }$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
GemmCore_Row_NN_16x64_AMX_BF16	jit_blas_gemm.h	/^class GemmCore_Row_NN_16x64_AMX_BF16 {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_16x64_AMX_INT8	jit_blas_gemm.h	/^  GemmCore_Row_NN_16x64_AMX_INT8() { mCodes.generate_code(); }$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
GemmCore_Row_NN_16x64_AMX_INT8	jit_blas_gemm.h	/^class GemmCore_Row_NN_16x64_AMX_INT8 {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK	jit_blas_gemm.h	/^  GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK() {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK	jit_blas_gemm.h	/^class GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK {$/;"	c	namespace:jblas::gemm::kblock
GemmCore_Row_NN_4x24_AVX2	jit_blas_gemm.h	/^  GemmCore_Row_NN_4x24_AVX2() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
GemmCore_Row_NN_4x24_AVX2	jit_blas_gemm.h	/^class GemmCore_Row_NN_4x24_AVX2 {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_8x48_AVX512F	jit_blas_gemm.h	/^  GemmCore_Row_NN_8x48_AVX512F() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
GemmCore_Row_NN_8x48_AVX512F	jit_blas_gemm.h	/^class GemmCore_Row_NN_8x48_AVX512F {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_8x48_AVX512_VNNI	jit_blas_gemm.h	/^  GemmCore_Row_NN_8x48_AVX512_VNNI() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
GemmCore_Row_NN_8x48_AVX512_VNNI	jit_blas_gemm.h	/^class GemmCore_Row_NN_8x48_AVX512_VNNI {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_8x64_AVX512_FP16	jit_blas_gemm.h	/^  GemmCore_Row_NN_8x64_AVX512_FP16() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
GemmCore_Row_NN_8x64_AVX512_FP16	jit_blas_gemm.h	/^class GemmCore_Row_NN_8x64_AVX512_FP16 {$/;"	c	namespace:jblas::gemm
GemmCore_Row_NN_8x96_AVX512_FP16	jit_blas_gemm.h	/^  GemmCore_Row_NN_8x96_AVX512_FP16() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
GemmCore_Row_NN_8x96_AVX512_FP16	jit_blas_gemm.h	/^class GemmCore_Row_NN_8x96_AVX512_FP16 {$/;"	c	namespace:jblas::gemm
GemmInterfaceAB	jit_blas_wrapper.h	/^class GemmInterfaceAB {$/;"	c	namespace:jblas::wrapper::gemm_pack_weight
GemmInterfaceKBlockPackWeight	jit_blas_weight_compression.h	/^class GemmInterfaceKBlockPackWeight {$/;"	c	namespace:jblas::wrapper::gemm_kblock
GemmInterfaceKblockAB	jit_blas_weight_compression.h	/^class GemmInterfaceKblockAB {$/;"	c	namespace:jblas::wrapper::gemm_kblock
GemmInterfacePackWeight	jit_blas_wrapper.h	/^  GemmInterfacePackWeight() {}$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmInterfacePackWeight
GemmInterfacePackWeight	jit_blas_wrapper.h	/^class GemmInterfacePackWeight {$/;"	c	namespace:jblas::wrapper::gemm_pack_weight
GemmLauncherPackWeight	jit_blas_wrapper.h	/^  GemmLauncherPackWeight() {}$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
GemmLauncherPackWeight	jit_blas_wrapper.h	/^class GemmLauncherPackWeight {$/;"	c	namespace:jblas::wrapper::gemm_pack_weight
GemmSLauncherKBlockPackWeight	jit_blas_weight_compression.h	/^class GemmSLauncherKBlockPackWeight {$/;"	c	namespace:jblas::wrapper::gemm_kblock
GetCPUDevice	jit_blas_utils.h	508;"	d
GetError	xbyak/xbyak.h	/^inline int GetError() { return 0; }$/;"	f	namespace:Xbyak
GetError	xbyak/xbyak.h	/^inline int GetError() { return Xbyak::local::GetErrorRef(); }$/;"	f	namespace:Xbyak
GetErrorRef	xbyak/xbyak.h	/^inline int& GetErrorRef() {$/;"	f	namespace:Xbyak::local
H	xbyak/xbyak_util.h	/^		uint64_t H;$/;"	m	class:Xbyak::util::Cpu::Type
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAMX_BF16;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAMX_BF16;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAMX_INT8;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAMX_INT8;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAMX_INT8;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAMX_INT8;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAVX2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAVX512F;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAVX512_FP16;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAVX512_FP16;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAVX512_VNNI;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
ISA	jit_blas_gemm.h	/^  static JBLAS_ISA constexpr ISA = JblasAVX512_VNNI;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
IntelCpuTopologyLevel	xbyak/xbyak_util.h	/^} IntelCpuTopologyLevel;$/;"	t	namespace:Xbyak::util	typeref:enum:Xbyak::util::__anon14
IsInDisp8	xbyak/xbyak.h	/^inline bool IsInDisp8(uint32_t x) { return 0xFFFFFF80 <= x || x <= 0x7F; }$/;"	f	namespace:Xbyak::inner
IsInInt32	xbyak/xbyak.h	/^inline bool IsInInt32(uint64_t x) { return ~uint64_t(0x7fffffffu) <= x || x <= 0x7FFFFFFFU; }$/;"	f	namespace:Xbyak::inner
JBLAS_CODE	jit_blas.h	/^enum JBLAS_CODE {$/;"	g
JBLAS_DTYPE	jit_blas.h	/^enum JBLAS_DTYPE {$/;"	g
JBLAS_ELTWISEOP	jit_blas.h	/^enum JBLAS_ELTWISEOP {$/;"	g
JBLAS_F4_TYPE	jit_blas.h	/^enum JBLAS_F4_TYPE {$/;"	g
JBLAS_FP8_ENCODING	jit_blas.h	/^enum JBLAS_FP8_ENCODING {$/;"	g
JBLAS_ISA	jit_blas.h	/^enum JBLAS_ISA {$/;"	g
JBLAS_LAYOUT	jit_blas.h	/^enum JBLAS_LAYOUT { JblasRowMajor = 101, JblasColMajor = 102 };$/;"	g
JBLAS_SIGN_INT_TYPE	jit_blas.h	/^enum JBLAS_SIGN_INT_TYPE {$/;"	g
JBLAS_TRANSPOSE	jit_blas.h	/^enum JBLAS_TRANSPOSE {$/;"	g
JblasAMX_BF16	jit_blas.h	/^  JblasAMX_BF16 = 15,$/;"	e	enum:JBLAS_ISA
JblasAMX_INT8	jit_blas.h	/^  JblasAMX_INT8 = 16,$/;"	e	enum:JBLAS_ISA
JblasAVX	jit_blas.h	/^  JblasAVX = 11,$/;"	e	enum:JBLAS_ISA
JblasAVX2	jit_blas.h	/^  JblasAVX2 = 12,$/;"	e	enum:JBLAS_ISA
JblasAVX512F	jit_blas.h	/^  JblasAVX512F = 13,$/;"	e	enum:JBLAS_ISA
JblasAVX512_FP16	jit_blas.h	/^  JblasAVX512_FP16 = 17,$/;"	e	enum:JBLAS_ISA
JblasAVX512_VNNI	jit_blas.h	/^  JblasAVX512_VNNI = 14,$/;"	e	enum:JBLAS_ISA
JblasBF16	jit_blas.h	/^  JblasBF16 = 61,$/;"	e	enum:JBLAS_DTYPE
JblasColMajor	jit_blas.h	/^enum JBLAS_LAYOUT { JblasRowMajor = 101, JblasColMajor = 102 };$/;"	e	enum:JBLAS_LAYOUT
JblasConjTrans	jit_blas.h	/^  JblasConjTrans = 113,$/;"	e	enum:JBLAS_TRANSPOSE
JblasF32	jit_blas.h	/^  JblasF32 = 60,$/;"	e	enum:JBLAS_DTYPE
JblasF32F8	jit_blas.h	/^  JblasF32F8 = 65,$/;"	e	enum:JBLAS_DTYPE
JblasF64	jit_blas.h	/^  JblasF64 = 59,$/;"	e	enum:JBLAS_DTYPE
JblasFp8_e3m4	jit_blas.h	/^  JblasFp8_e3m4 = 82,$/;"	e	enum:JBLAS_FP8_ENCODING
JblasFp8_e4m3	jit_blas.h	/^  JblasFp8_e4m3 = 80,$/;"	e	enum:JBLAS_FP8_ENCODING
JblasFp8_e5m2	jit_blas.h	/^  JblasFp8_e5m2 = 81,$/;"	e	enum:JBLAS_FP8_ENCODING
JblasInvalidISA	jit_blas.h	/^  JblasInvalidISA = -2,$/;"	e	enum:JBLAS_CODE
JblasInvalidParam	jit_blas.h	/^  JblasInvalidParam = -1,$/;"	e	enum:JBLAS_CODE
JblasNoSIMD	jit_blas.h	/^  JblasNoSIMD = 10,$/;"	e	enum:JBLAS_ISA
JblasNoTrans	jit_blas.h	/^  JblasNoTrans = 111,$/;"	e	enum:JBLAS_TRANSPOSE
JblasNotSupport	jit_blas.h	/^  JblasNotSupport = -4,$/;"	e	enum:JBLAS_CODE
JblasRowMajor	jit_blas.h	/^enum JBLAS_LAYOUT { JblasRowMajor = 101, JblasColMajor = 102 };$/;"	e	enum:JBLAS_LAYOUT
JblasRuntimeError	jit_blas.h	/^  JblasRuntimeError = -3,$/;"	e	enum:JBLAS_CODE
JblasS8	jit_blas.h	/^  JblasS8 = 63,$/;"	e	enum:JBLAS_DTYPE
JblasSuccess	jit_blas.h	/^  JblasSuccess = 0,$/;"	e	enum:JBLAS_CODE
JblasTrans	jit_blas.h	/^  JblasTrans = 112,$/;"	e	enum:JBLAS_TRANSPOSE
JblasU8	jit_blas.h	/^  JblasU8 = 64,$/;"	e	enum:JBLAS_DTYPE
JitAmxbf16	jit_base.hpp	/^class JitAmxbf16 : protected JitAmxtile {$/;"	c	namespace:jblas::xbyak
JitAmxint8	jit_base.hpp	/^class JitAmxint8 : protected JitAmxtile {};$/;"	c	namespace:jblas::xbyak
JitAmxtile	jit_base.hpp	/^class JitAmxtile : protected JitAvx512f {$/;"	c	namespace:jblas::xbyak
JitAvx	jit_base.hpp	/^class JitAvx : protected JitBase {$/;"	c	namespace:jblas::xbyak
JitAvx2	jit_base.hpp	/^class JitAvx2 : protected JitAvx {$/;"	c	namespace:jblas::xbyak
JitAvx512_fp16	jit_base.hpp	/^class JitAvx512_fp16 : protected JitAvx512f {};$/;"	c	namespace:jblas::xbyak
JitAvx512f	jit_base.hpp	/^class JitAvx512f : protected JitAvx2 {$/;"	c	namespace:jblas::xbyak
JitAvx512vnni	jit_base.hpp	/^class JitAvx512vnni : protected JitAvx512f {$/;"	c	namespace:jblas::xbyak
JitBase	jit_base.hpp	/^  JitBase(size_t size = 16 * 1024) : CodeGenerator(size) {}$/;"	f	class:jblas::xbyak::JitBase
JitBase	jit_base.hpp	/^class JitBase : protected Xbyak::CodeGenerator {$/;"	c	namespace:jblas::xbyak
JitMemcpy2DAvx512f	kernel_jit.h	/^  JitMemcpy2DAvx512f(int unroll_row, std::vector<kernel::jit_injector::eltwise_injector>& injectors) {$/;"	f	class:jblas::kernel::jit::JitMemcpy2DAvx512f
JitMemcpy2DAvx512f	kernel_jit.h	/^class JitMemcpy2DAvx512f : protected jblas::xbyak::JitAvx512f {$/;"	c	namespace:jblas::kernel::jit
JmpLabel	xbyak/xbyak.h	/^	explicit JmpLabel(size_t endOfJmp = 0, int jmpSize = 0, inner::LabelMode mode = inner::LasIs, size_t disp = 0)$/;"	f	struct:Xbyak::JmpLabel
JmpLabel	xbyak/xbyak.h	/^struct JmpLabel {$/;"	s	namespace:Xbyak
K	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
K	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
K	jit_blas_weight_compression.h	/^    const int M, N, K;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::Param
K	jit_blas_wrapper.h	/^    const int M, N, K;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::Param
K	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
K	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
K	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
K	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
KStep	jit_blas_weight_compression.h	/^    const int MStep, NStep, KStep;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
KStep	jit_blas_wrapper.h	/^    const int MStep, NStep, KStep;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 24, MTILE = 4, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 3, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 8, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 8, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 12, KTILE = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
KTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 96, MTILE = 8, KTILE = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
KUNROLL	jit_blas_gemm.h	/^  static int constexpr KUNROLL = 2;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
Kind	xbyak/xbyak.h	/^	enum Kind {$/;"	g	class:Xbyak::Operand
L	xbyak/xbyak.h	/^	Label L() { Label label; L(label); return label; }$/;"	f	class:Xbyak::CodeGenerator
L	xbyak/xbyak.h	/^	void L(Label& label) { labelMgr_.defineClabel(label); }$/;"	f	class:Xbyak::CodeGenerator
L	xbyak/xbyak.h	/^	void L(const std::string& label) { labelMgr_.defineSlabel(label); }$/;"	f	class:Xbyak::CodeGenerator
L	xbyak/xbyak_util.h	/^		uint64_t L;$/;"	m	class:Xbyak::util::Cpu::Type
L1Cache	jit_blas_utils.h	/^  uint32_t L2Cache, L1Cache;$/;"	m	class:jblas::utils::parallel::CpuDevice
L2Cache	jit_blas_utils.h	/^  uint32_t L2Cache, L1Cache;$/;"	m	class:jblas::utils::parallel::CpuDevice
LDA	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
LDA	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
LDA	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
LDA	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
LDB	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
LDB	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
LDB	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
LDB	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
LDC	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
LDC	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
LDC	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
LDC	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
LDD	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
LDD	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
LDD	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
LDD	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
LINEAR	jit_blas.h	/^  LINEAR,$/;"	e	enum:JBLAS_ELTWISEOP
LOW_PRECISION_EXP	jit_blas.h	/^  LOW_PRECISION_EXP,$/;"	e	enum:JBLAS_ELTWISEOP
Label	xbyak/xbyak.h	/^	Label() : mgr(0), id(0) {}$/;"	f	class:Xbyak::Label
Label	xbyak/xbyak.h	/^class Label {$/;"	c	namespace:Xbyak
Label	xbyak/xbyak.h	/^inline Label::Label(const Label& rhs)$/;"	f	class:Xbyak::Label
LabelManager	xbyak/xbyak.h	/^	LabelManager()$/;"	f	class:Xbyak::LabelManager
LabelManager	xbyak/xbyak.h	/^class LabelManager {$/;"	c	namespace:Xbyak
LabelMode	xbyak/xbyak.h	/^enum LabelMode {$/;"	g	namespace:Xbyak::inner
LabelPtrList	xbyak/xbyak.h	/^	typedef XBYAK_STD_UNORDERED_SET<Label*> LabelPtrList;$/;"	t	class:Xbyak::LabelManager
LabelType	xbyak/xbyak.h	/^	enum LabelType {$/;"	g	class:Xbyak::CodeGenerator
Labs	xbyak/xbyak.h	/^	Labs, \/\/ absolute$/;"	e	enum:Xbyak::inner::LabelMode
LaddTop	xbyak/xbyak.h	/^	LaddTop \/\/ (addr + top) for mov(reg, label) with AutoGrow$/;"	e	enum:Xbyak::inner::LabelMode
LasIs	xbyak/xbyak.h	/^	LasIs, \/\/ as is$/;"	e	enum:Xbyak::inner::LabelMode
M	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
M	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
M	jit_blas_weight_compression.h	/^    const int M, N, K;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::Param
M	jit_blas_wrapper.h	/^    const int M, N, K;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::Param
M	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
M	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
M	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
M	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
MAP_JIT	xbyak/xbyak.h	95;"	d
MAX	jit_blas_utils.h	50;"	d
MEM	xbyak/xbyak.h	/^		MEM = 1 << 0,$/;"	e	enum:Xbyak::Operand::Kind
MIE_ALIGN	xbyak/xbyak.h	173;"	d
MIE_ALIGN	xbyak/xbyak.h	175;"	d
MIE_INTEGER_TYPE_DEFINED	xbyak/xbyak.h	162;"	d
MIE_PACK	xbyak/xbyak.h	179;"	d
MIN	jit_blas_utils.h	49;"	d
MMB_AMX	ut/jit_blas_ut.cpp	/^int MMB_AMX = 0;$/;"	m	namespace:__anon2	file:
MMB_SKIPCOPY	ut/jit_blas_ut.cpp	/^int MMB_SKIPCOPY = 0;$/;"	m	namespace:__anon2	file:
MMB_WEI_FP8	ut/jit_blas_ut.cpp	/^int MMB_WEI_FP8 = 0;$/;"	m	namespace:__anon2	file:
MMB_WEI_INT4	ut/jit_blas_ut.cpp	/^int MMB_WEI_INT4 = 0;$/;"	m	namespace:__anon2	file:
MMB_WEI_INT4_B32	ut/jit_blas_ut.cpp	/^int MMB_WEI_INT4_B32 = 0;$/;"	m	namespace:__anon2	file:
MMB_WEI_INT8	ut/jit_blas_ut.cpp	/^int MMB_WEI_INT8 = 0;$/;"	m	namespace:__anon2	file:
MMX	xbyak/xbyak.h	/^		MMX = 1 << 2,$/;"	e	enum:Xbyak::Operand::Kind
MStep	jit_blas_weight_compression.h	/^    const int MStep, NStep, KStep;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
MStep	jit_blas_wrapper.h	/^    const int MStep, NStep, KStep;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 24, MTILE = 4, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 3, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 8, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 8, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 12, KTILE = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
MTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 96, MTILE = 8, KTILE = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
M_64bitDisp	xbyak/xbyak.h	/^		M_64bitDisp,$/;"	e	enum:Xbyak::Address::Mode
M_ModRM	xbyak/xbyak.h	/^		M_ModRM,$/;"	e	enum:Xbyak::Address::Mode
M_rip	xbyak/xbyak.h	/^		M_rip,$/;"	e	enum:Xbyak::Address::Mode
M_ripAddr	xbyak/xbyak.h	/^		M_ripAddr$/;"	e	enum:Xbyak::Address::Mode
Memcpy2D	kernel_wrapper.h	/^class Memcpy2D {$/;"	c	namespace:jblas::kernel::wrapper
Memcpy2DFp32CvtBf16	kernel_wrapper.h	/^class Memcpy2DFp32CvtBf16 {$/;"	c	namespace:jblas::kernel::wrapper
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
MicroKernel	jit_blas_gemm.h	/^    MicroKernel() {}$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAmxbf16 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAmxbf16 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAmxint8 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAmxint8 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAmxint8 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAmxint8 {$/;"	c	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAvx2 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAvx512_fp16 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAvx512_fp16 {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAvx512f {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAvx512vnni {$/;"	c	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
MicroKernel	jit_blas_gemm.h	/^  class MicroKernel : protected jblas::xbyak::JitAvx512vnni {$/;"	c	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
MicroKernelAVX512F	kernel_jit.h	/^    MicroKernelAVX512F() {$/;"	f	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
MicroKernelAVX512F	kernel_jit.h	/^  class MicroKernelAVX512F : protected jblas::xbyak::JitAvx512f {$/;"	c	class:jblas::kernel::jit::DequanS8F32
MinMaxKBlock	kernel_wrapper.h	/^class MinMaxKBlock {$/;"	c	namespace:jblas::kernel::wrapper
MmapAllocator	xbyak/xbyak.h	/^	explicit MmapAllocator(const std::string& name = "xbyak") : name_(name) {}$/;"	f	class:Xbyak::MmapAllocator
MmapAllocator	xbyak/xbyak.h	/^class MmapAllocator : public Allocator {$/;"	c	namespace:Xbyak
MmapAllocator	xbyak/xbyak.h	/^typedef Allocator MmapAllocator;$/;"	t	namespace:Xbyak
Mmx	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Mmx(int idx = 0, Kind kind = Operand::MMX, int bit = 64) : Reg(idx, kind, bit) { }$/;"	f	struct:Xbyak::Mmx
Mmx	xbyak/xbyak.h	/^struct Mmx : public Reg {$/;"	s	namespace:Xbyak
Mode	xbyak/xbyak.h	/^	enum Mode {$/;"	g	class:Xbyak::Address
N	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
N	jit_blas_transformer.h	/^    const int M, N, K, Batch;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
N	jit_blas_weight_compression.h	/^    const int M, N, K;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::Param
N	jit_blas_wrapper.h	/^    const int M, N, K;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::Param
N	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
N	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
N	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
N	ut/jit_blas_ut.h	/^  int M, N, K, LDA, LDB, LDC, LDD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
NF4	jit_blas.h	/^  NF4,$/;"	e	enum:JBLAS_F4_TYPE
NONE	xbyak/xbyak.h	/^		NONE = 0,$/;"	e	enum:Xbyak::Operand::Kind
NONE	xbyak/xbyak.h	/^	enum { NONE = 256 };$/;"	e	enum:Xbyak::CodeGenerator::__anon12
NRegs	jit_blas_gemm.h	/^    int const NRegs = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
NRegs	jit_blas_gemm.h	/^    int const NRegs = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
NRegs	jit_blas_gemm.h	/^    int const NRegs = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
NRegs	jit_blas_gemm.h	/^    int const NRegs = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
NRegs	jit_blas_gemm.h	/^    int const NRegs = 3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
NRegs	jit_blas_gemm.h	/^    int const NRegs = NTILE \/ VecElements;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
NRegs	jit_blas_gemm.h	/^    static int constexpr NRegs = 3;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
NRegs	jit_blas_gemm.h	/^    static int constexpr NRegs = 3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
NRegs	jit_blas_gemm.h	/^    static int constexpr NRegs = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
NRegs	jit_blas_gemm.h	/^    static int constexpr NRegs = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
NStep	jit_blas_weight_compression.h	/^    const int MStep, NStep, KStep;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
NStep	jit_blas_wrapper.h	/^    const int MStep, NStep, KStep;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 24, MTILE = 4, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 3, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 8, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 48, MTILE = 8, KTILE = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 12, KTILE = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 64, MTILE = 16, KTILE = 64 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
NTILE	jit_blas_gemm.h	/^  static int constexpr NTILE = 96, MTILE = 8, KTILE = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
NativeReg	xbyak/xbyak.h	/^	typedef Reg32 NativeReg;$/;"	t	class:Xbyak::CodeGenerator
NativeReg	xbyak/xbyak.h	/^	typedef Reg64 NativeReg;$/;"	t	class:Xbyak::CodeGenerator
None	xbyak/xbyak_util.h	/^		None = 0,$/;"	e	enum:Xbyak::util::Profiler::__anon15
OFFSET	jit_base.hpp	23;"	d
OPMASK	xbyak/xbyak.h	/^		OPMASK = 1 << 7,$/;"	e	enum:Xbyak::Operand::Kind
Operand	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Operand() : idx_(0), kind_(0), bit_(0), zero_(0), mask_(0), rounding_(0) { }$/;"	f	class:Xbyak::Operand
Operand	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Operand(int idx, Kind kind, int bit, bool ext8bit = 0)$/;"	f	class:Xbyak::Operand
Operand	xbyak/xbyak.h	/^class Operand {$/;"	c	namespace:Xbyak
Opmask	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Opmask(int idx = 0) : Reg(idx, Operand::OPMASK, 64) {}$/;"	f	struct:Xbyak::Opmask
Opmask	xbyak/xbyak.h	/^struct Opmask : public Reg {$/;"	s	namespace:Xbyak
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 4 \/ sizeof(BType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = 4;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = KTILE;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
PACK_ROW	jit_blas_gemm.h	/^  static int constexpr PACK_ROW = KTILE;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 128;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 144;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 144;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 192;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 192;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 192;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 240;  \/\/ TODO?$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 240;  \/\/ TODO?$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 240;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 256;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 256;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
PREFERED_N	jit_blas_gemm.h	/^  static int constexpr PREFERED_N = 256;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
PROTECT_RE	xbyak/xbyak.h	/^		PROTECT_RE = 2 \/\/ read\/exec$/;"	e	enum:Xbyak::CodeArray::ProtectMode
PROTECT_RW	xbyak/xbyak.h	/^		PROTECT_RW = 0, \/\/ read\/write$/;"	e	enum:Xbyak::CodeArray::ProtectMode
PROTECT_RWE	xbyak/xbyak.h	/^		PROTECT_RWE = 1, \/\/ read\/write\/exec$/;"	e	enum:Xbyak::CodeArray::ProtectMode
P_	xbyak/xbyak_util.h	/^	int P_;$/;"	m	class:Xbyak::util::StackFrame
Pack	xbyak/xbyak_util.h	/^	Pack() : tbl_(), n_(0) {}$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Pack& rhs)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64 *tbl, size_t n) { init(tbl, n); }$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t5, const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t6, const Xbyak::Reg64& t5, const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t7, const Xbyak::Reg64& t6, const Xbyak::Reg64& t5, const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t8, const Xbyak::Reg64& t7, const Xbyak::Reg64& t6, const Xbyak::Reg64& t5, const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& t9, const Xbyak::Reg64& t8, const Xbyak::Reg64& t7, const Xbyak::Reg64& t6, const Xbyak::Reg64& t5, const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& ta, const Xbyak::Reg64& t9, const Xbyak::Reg64& t8, const Xbyak::Reg64& t7, const Xbyak::Reg64& t6, const Xbyak::Reg64& t5, const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^	Pack(const Xbyak::Reg64& tb, const Xbyak::Reg64& ta, const Xbyak::Reg64& t9, const Xbyak::Reg64& t8, const Xbyak::Reg64& t7, const Xbyak::Reg64& t6, const Xbyak::Reg64& t5, const Xbyak::Reg64& t4, const Xbyak::Reg64& t3, const Xbyak::Reg64& t2, const Xbyak::Reg64& t1, const Xbyak::Reg64& t0)$/;"	f	class:Xbyak::util::Pack
Pack	xbyak/xbyak_util.h	/^class Pack {$/;"	c	namespace:Xbyak::util
PackedWeight	jit_blas_prologue.h	/^  PackedWeight(jblas::gemm::GemmCoreType type) {$/;"	f	class:jblas::prologue::PackedWeight
PackedWeight	jit_blas_prologue.h	/^class PackedWeight {$/;"	c	namespace:jblas::prologue
PackedWeightKBlock	jit_blas_weight_compression.h	/^  PackedWeightKBlock(jblas::gemm::GemmCoreType _type) : PackedWeight(_type) {}$/;"	f	class:jblas::prologue::weight_comp::PackedWeightKBlock
PackedWeightKBlock	jit_blas_weight_compression.h	/^class PackedWeightKBlock : public prologue::PackedWeight {$/;"	c	namespace:jblas::prologue::weight_comp
PackedWeightParser	jit_blas_prologue.h	/^class PackedWeightParser {$/;"	c	namespace:jblas::prologue
PackedWeightParser	jit_blas_weight_compression.h	/^class PackedWeightParser {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
PaddingInterleaveMN	kernel_wrapper.h	/^class PaddingInterleaveMN {$/;"	c	namespace:jblas::kernel::wrapper
PaddingTransInterleaveMN	kernel_wrapper.h	/^class PaddingTransInterleaveMN {$/;"	c	namespace:jblas::kernel::wrapper
Parallel2D	jit_blas_utils.h	/^struct Parallel2D {$/;"	s	namespace:jblas::utils::parallel
Parallel2DGemm	jit_blas_utils.h	/^  Parallel2DGemm() { mL2Size = static_cast<size_t>(CpuDevice::getInstance()->getL2CacheSize() * 0.8); }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
Parallel2DGemm	jit_blas_utils.h	/^struct Parallel2DGemm : Parallel2D {$/;"	s	namespace:jblas::utils::parallel
Parallel2DGemmKBlock	jit_blas_utils.h	/^  Parallel2DGemmKBlock() { mL2Size = static_cast<size_t>(CpuDevice::getInstance()->getL2CacheSize() * 0.8f); }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
Parallel2DGemmKBlock	jit_blas_utils.h	/^struct Parallel2DGemmKBlock : Parallel2D {$/;"	s	namespace:jblas::utils::parallel
Parallel2DGemmKBlockFixed	jit_blas_utils.h	/^  Parallel2DGemmKBlockFixed() { mL2Size = static_cast<size_t>(CpuDevice::getInstance()->getL2CacheSize() * 0.8f); }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
Parallel2DGemmKBlockFixed	jit_blas_utils.h	/^struct Parallel2DGemmKBlockFixed : Parallel2D {$/;"	s	namespace:jblas::utils::parallel
Parallel2DRowMajor	jit_blas_utils.h	/^struct Parallel2DRowMajor : Parallel2D {$/;"	s	namespace:jblas::utils::parallel
Parallel2DRowMajorColBlock	jit_blas_utils.h	/^struct Parallel2DRowMajorColBlock : Parallel2D {$/;"	s	namespace:jblas::utils::parallel
ParallelConfig	jit_blas_weight_compression.h	/^  struct ParallelConfig {$/;"	s	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
ParallelConfig	jit_blas_wrapper.h	/^  struct ParallelConfig {$/;"	s	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
Param	jit_blas_epilogue.h	/^  struct Param {$/;"	s	class:jblas::epilogue::gemm::AccumulatorWriteBack
Param	jit_blas_epilogue.h	/^  struct Param {$/;"	s	class:jblas::epilogue::gemm::AlphaBetaProcessFp32
Param	jit_blas_epilogue.h	/^  struct Param {$/;"	s	class:jblas::epilogue::gemm::AlphaBetaProcessS32U8
Param	jit_blas_epilogue.h	/^  struct Param {$/;"	s	class:jblas::epilogue::gemm::CustomAccumulatorWriteBackWithEltop
Param	jit_blas_epilogue.h	/^  struct Param {$/;"	s	class:jblas::epilogue::gemm::DequantInt32ToFp32
Param	jit_blas_epilogue.h	/^  struct Param {$/;"	s	class:jblas::epilogue::gemm::ZpDequantInt32ToFp32
Param	jit_blas_prologue.h	/^  struct Param {$/;"	s	class:jblas::prologue::gemm::ActivationBase
Param	jit_blas_prologue.h	/^  struct Param {$/;"	s	class:jblas::prologue::gemm::ActivationConverterFp32
Param	jit_blas_prologue.h	/^  struct Param {$/;"	s	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
Param	jit_blas_prologue.h	/^  struct Param {$/;"	s	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
Param	jit_blas_prologue.h	/^  struct Param {$/;"	s	class:jblas::prologue::gemm::ActivationFp32AsymU8Quantize
Param	jit_blas_prologue.h	/^  struct Param {$/;"	s	class:jblas::prologue::gemm::ActivationFp32SymS8Quantize
Param	jit_blas_prologue.h	/^  struct Param {$/;"	s	class:jblas::prologue::gemm::WeightPack
Param	jit_blas_weight_compression.h	/^  struct Param {$/;"	s	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
Param	jit_blas_weight_compression.h	/^  struct Param {$/;"	s	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
Param	jit_blas_wrapper.h	/^  struct Param {$/;"	s	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
Perf	xbyak/xbyak_util.h	/^		Perf = 1,$/;"	e	enum:Xbyak::util::Profiler::__anon15
PreferredEncoding	xbyak/xbyak.h	/^} PreferredEncoding;$/;"	t	namespace:Xbyak	typeref:enum:Xbyak::__anon8
Profiler	xbyak/xbyak_util.h	/^	Profiler()$/;"	f	class:Xbyak::util::Profiler
Profiler	xbyak/xbyak_util.h	/^class Profiler {$/;"	c	namespace:Xbyak::util
ProtectMode	xbyak/xbyak.h	/^	enum ProtectMode {$/;"	g	class:Xbyak::CodeArray
Q	jit_blas_prologue.h	/^    QParam* Q;$/;"	m	struct:jblas::prologue::gemm::ActivationFp32AsymU8Quantize::Param
Q	jit_blas_prologue.h	/^    QParam* Q;$/;"	m	struct:jblas::prologue::gemm::ActivationFp32SymS8Quantize::Param
QKVGemmInterfaceKBlockPackWeight	jit_blas_transformer.h	/^class QKVGemmInterfaceKBlockPackWeight {$/;"	c	namespace:jblas::wrapper::transformer
QKVGemmInterfacePackWeight	jit_blas_transformer.h	/^class QKVGemmInterfacePackWeight {$/;"	c	namespace:jblas::wrapper::transformer
QuanOutS32U32	kernel_wrapper.h	/^class QuanOutS32U32 {$/;"	c	namespace:jblas::kernel::wrapper
QuantizeF4RowBlock	kernel_wrapper.h	/^class QuantizeF4RowBlock {$/;"	c	namespace:jblas::kernel::wrapper
QuantizeS8ColBlock	kernel_wrapper.h	/^class QuantizeS8ColBlock {$/;"	c	namespace:jblas::kernel::wrapper
QuantizeSignIntRowBlock	kernel_wrapper.h	/^class QuantizeSignIntRowBlock {$/;"	c	namespace:jblas::kernel::wrapper
QuantizeU8ColBlock	kernel_wrapper.h	/^class QuantizeU8ColBlock {$/;"	c	namespace:jblas::kernel::wrapper
R10	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R10B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R10D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R10W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
R11	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R11B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R11D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R11W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
R12	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R12B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R12D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R12W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
R13	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R13B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R13D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R13W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
R14	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R14B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R14D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R14W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
R15	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R15B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R15D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R15W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
R8	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R8B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R8D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R8W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
R9	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
R9B	xbyak/xbyak.h	/^		R8B = 8, R9B, R10B, R11B, R12B, R13B, R14B, R15B,$/;"	e	enum:Xbyak::Operand::Code
R9D	xbyak/xbyak.h	/^		R8D = 8, R9D, R10D, R11D, R12D, R13D, R14D, R15D,$/;"	e	enum:Xbyak::Operand::Code
R9W	xbyak/xbyak.h	/^		R8W = 8, R9W, R10W, R11W, R12W, R13W, R14W, R15W,$/;"	e	enum:Xbyak::Operand::Code
RAX	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
RBP	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
RBX	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
RCX	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
RDI	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
RDX	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
REG	xbyak/xbyak.h	/^		REG = 1 << 1,$/;"	e	enum:Xbyak::Operand::Kind
RELU	jit_blas.h	/^  RELU,$/;"	e	enum:JBLAS_ELTWISEOP
RSI	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
RSP	xbyak/xbyak.h	/^		RAX = 0, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15,$/;"	e	enum:Xbyak::Operand::Code
RT_ISA	jit_blas_weight_compression.h	/^  static JBLAS_ISA constexpr RT_ISA = _RT_ISA_T;$/;"	m	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
Reg	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Reg() { }$/;"	f	class:Xbyak::Reg
Reg	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Reg(int idx, Kind kind, int bit = 0, bool ext8bit = false) : Operand(idx, kind, bit, ext8bit) { }$/;"	f	class:Xbyak::Reg
Reg	xbyak/xbyak.h	/^class Reg : public Operand {$/;"	c	namespace:Xbyak
Reg16	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Reg16(int idx = 0) : Reg(idx, Operand::REG, 16) { }$/;"	f	struct:Xbyak::Reg16
Reg16	xbyak/xbyak.h	/^struct Reg16 : public Reg {$/;"	s	namespace:Xbyak
Reg32	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Reg32(int idx = 0) : Reg32e(idx, 32) {}$/;"	f	struct:Xbyak::Reg32
Reg32	xbyak/xbyak.h	/^struct Reg32 : public Reg32e {$/;"	s	namespace:Xbyak
Reg32e	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Reg32e(int idx, int bit) : Reg(idx, Operand::REG, bit) {}$/;"	f	struct:Xbyak::Reg32e
Reg32e	xbyak/xbyak.h	/^struct Reg32e : public Reg {$/;"	s	namespace:Xbyak
Reg64	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Reg64(int idx = 0) : Reg32e(idx, 64) {}$/;"	f	struct:Xbyak::Reg64
Reg64	xbyak/xbyak.h	/^struct Reg64 : public Reg32e {$/;"	s	namespace:Xbyak
Reg8	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Reg8(int idx = 0, bool ext8bit = false) : Reg(idx, Operand::REG, 8, ext8bit) { }$/;"	f	struct:Xbyak::Reg8
Reg8	xbyak/xbyak.h	/^struct Reg8 : public Reg {$/;"	s	namespace:Xbyak
RegExp	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR RegExp(const Reg& r, int scale = 1)$/;"	f	class:Xbyak::RegExp
RegExp	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR RegExp(size_t disp = 0) : scale_(0), disp_(disp) { }$/;"	f	class:Xbyak::RegExp
RegExp	xbyak/xbyak.h	/^class RegExp {$/;"	c	namespace:Xbyak
RegRip	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR RegRip(int64_t disp = 0, const Label* label = 0, bool isAddr = false) : disp_(disp), label_(label), isAddr_(isAddr) {}$/;"	f	struct:Xbyak::RegRip
RegRip	xbyak/xbyak.h	/^struct RegRip {$/;"	s	namespace:Xbyak
RegScale	kernel_jit.h	/^    static int constexpr RegScale = 0;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
RegTmp	kernel_jit.h	/^    static int constexpr RegTmp = RegScale + 4;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
RemoveZeroPointBias	kernel_wrapper.h	/^class RemoveZeroPointBias {$/;"	c	namespace:jblas::kernel::wrapper
RevertPaddingInterleaveMN	kernel_wrapper.h	/^class RevertPaddingInterleaveMN {$/;"	c	namespace:jblas::kernel::wrapper
RowPack	kernel_avx512f.h	/^  static constexpr int RowPack = 2;$/;"	m	struct:jblas::kernel::avx512f::padding_interleave_cvt
S4_CLIP	jit_blas.h	/^  S4_CLIP,$/;"	e	enum:JBLAS_SIGN_INT_TYPE
S4_FULLRANGE	jit_blas.h	/^  S4_FULLRANGE,$/;"	e	enum:JBLAS_SIGN_INT_TYPE
S4_UNDEF	jit_blas.h	/^  S4_UNDEF,$/;"	e	enum:JBLAS_SIGN_INT_TYPE
S8	jit_blas.h	/^  S8,$/;"	e	enum:JBLAS_SIGN_INT_TYPE
SI	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
SIL	xbyak/xbyak.h	/^		SPL = 4, BPL, SIL, DIL,$/;"	e	enum:Xbyak::Operand::Code
SP	xbyak/xbyak.h	/^		AX = 0, CX, DX, BX, SP, BP, SI, DI,$/;"	e	enum:Xbyak::Operand::Code
SPL	xbyak/xbyak.h	/^		SPL = 4, BPL, SIL, DIL,$/;"	e	enum:Xbyak::Operand::Code
SWISH	jit_blas.h	/^  SWISH,$/;"	e	enum:JBLAS_ELTWISEOP
Segment	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Segment(int idx) : idx_(idx) { assert(0 <= idx_ && idx_ < 6); }$/;"	f	class:Xbyak::Segment
Segment	xbyak/xbyak.h	/^class Segment {$/;"	c	namespace:Xbyak
SetError	xbyak/xbyak.h	/^inline void SetError(int err) {$/;"	f	namespace:Xbyak::local
SlabelDefList	xbyak/xbyak.h	/^	typedef XBYAK_STD_UNORDERED_MAP<std::string, SlabelVal> SlabelDefList;$/;"	t	class:Xbyak::LabelManager
SlabelState	xbyak/xbyak.h	/^	struct SlabelState {$/;"	s	class:Xbyak::LabelManager
SlabelUndefList	xbyak/xbyak.h	/^	typedef XBYAK_STD_UNORDERED_MULTIMAP<std::string, const JmpLabel> SlabelUndefList;$/;"	t	class:Xbyak::LabelManager
SlabelVal	xbyak/xbyak.h	/^		SlabelVal(size_t offset) : offset(offset) {}$/;"	f	struct:Xbyak::LabelManager::SlabelVal
SlabelVal	xbyak/xbyak.h	/^	struct SlabelVal {$/;"	s	class:Xbyak::LabelManager
SmtLevel	xbyak/xbyak_util.h	/^   SmtLevel = 1,$/;"	e	enum:Xbyak::util::__anon14
StackFrame	xbyak/xbyak_util.h	/^	StackFrame(Xbyak::CodeGenerator *code, int pNum, int tNum = 0, int stackSizeByte = 0, bool makeEpilog = true)$/;"	f	class:Xbyak::util::StackFrame
StackFrame	xbyak/xbyak_util.h	/^class StackFrame {$/;"	c	namespace:Xbyak::util
StackSize	jit_blas_weight_compression.h	/^    const size_t StackSize;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
StackSize	jit_blas_wrapper.h	/^    const size_t StackSize;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
StateList	xbyak/xbyak.h	/^	typedef std::list<SlabelState> StateList;$/;"	t	class:Xbyak::LabelManager
StorageQuantActivation	jit_blas_prologue.h	/^class StorageQuantActivation {$/;"	c	namespace:jblas::prologue::gemm
StorageQuantActivationKblock	jit_blas_prologue.h	/^class StorageQuantActivationKblock : public StorageQuantActivation<QT_T, ST_T> {$/;"	c	namespace:jblas::prologue::gemm
StorageSimpleCorrection	jit_blas_weight_compression.h	/^  StorageSimpleCorrection() : mSSize(0), isSym(true) {}$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
StorageSimpleCorrection	jit_blas_weight_compression.h	/^  StorageSimpleCorrection(size_t _size, bool _is_sym, SRC_T src = SRC_T(0), DST_T dst = DST_T(0)) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
StorageSimpleCorrection	jit_blas_weight_compression.h	/^  StorageSimpleCorrection(size_t _size, bool _is_sym, SRC_T* _scales, DST_T* _zeroPoints = nullptr, int memalloc = 0) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
StorageSimpleCorrection	jit_blas_weight_compression.h	/^class StorageSimpleCorrection {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
StorageWeight	jit_blas_prologue.h	/^  StorageWeight(jblas::gemm::GemmCoreType _type) : PackedWeight(_type) {$/;"	f	class:jblas::prologue::gemm::StorageWeight
StorageWeight	jit_blas_prologue.h	/^class StorageWeight : public prologue::PackedWeight {$/;"	c	namespace:jblas::prologue::gemm
StorageWeight4Bit	jit_blas_weight_compression.h	/^class StorageWeight4Bit {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
StorageWeight8Bit	jit_blas_weight_compression.h	/^class StorageWeight8Bit {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
StorageWeightF4ScaleFp32	jit_blas_weight_compression.h	/^  StorageWeightF4ScaleFp32(jblas::gemm::GemmCoreType _gemm_core_type, JBLAS_F4_TYPE _f4_type = F4_UNDEF)$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightF4ScaleFp32
StorageWeightF4ScaleFp32	jit_blas_weight_compression.h	/^class StorageWeightF4ScaleFp32 : public StorageWeightS4ScaleFp32 {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
StorageWeightS4ScaleBf16	jit_blas_weight_compression.h	/^  StorageWeightS4ScaleBf16(jblas::gemm::GemmCoreType _gemm_core_type, JBLAS_SIGN_INT_TYPE _s4_type = S4_UNDEF)$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS4ScaleBf16
StorageWeightS4ScaleBf16	jit_blas_weight_compression.h	/^class StorageWeightS4ScaleBf16 : public prologue::weight_comp::PackedWeightKBlock,$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
StorageWeightS4ScaleFp32	jit_blas_weight_compression.h	/^  StorageWeightS4ScaleFp32(jblas::gemm::GemmCoreType _gemm_core_type, JBLAS_SIGN_INT_TYPE _s4_type = S4_UNDEF)$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS4ScaleFp32
StorageWeightS4ScaleFp32	jit_blas_weight_compression.h	/^class StorageWeightS4ScaleFp32 : public prologue::weight_comp::PackedWeightKBlock,$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
StorageWeightS8ScaleFp32	jit_blas_weight_compression.h	/^  StorageWeightS8ScaleFp32(jblas::gemm::GemmCoreType _type) : prologue::weight_comp::PackedWeightKBlock(_type) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS8ScaleFp32
StorageWeightS8ScaleFp32	jit_blas_weight_compression.h	/^class StorageWeightS8ScaleFp32 : public prologue::weight_comp::PackedWeightKBlock,$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
StorageWeightS8ScaleFp32PerChannelN	jit_blas_weight_compression.h	/^  StorageWeightS8ScaleFp32PerChannelN(jblas::gemm::GemmCoreType _type) : StorageWeightS8ScaleFp32(_type) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS8ScaleFp32PerChannelN
StorageWeightS8ScaleFp32PerChannelN	jit_blas_weight_compression.h	/^class StorageWeightS8ScaleFp32PerChannelN : public StorageWeightS8ScaleFp32 {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
TANH	jit_blas.h	/^  TANH,$/;"	e	enum:JBLAS_ELTWISEOP
TMM	xbyak/xbyak.h	/^		TMM = 1 << 9$/;"	e	enum:Xbyak::Operand::Kind
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AMX_BF16_16x48;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AMX_BF16_16x64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AMX_INT8_16X48_KBLOCK;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AMX_INT8_16x48;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AMX_INT8_16x48_SS;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AMX_INT8_16x64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AVX2_4X24;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AVX512F_8X48;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AVX512_FP16_8x64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AVX512_FP16_8x96;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AVX512_VNNI_3X48_KBLOCK;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
TYPE	jit_blas_gemm.h	/^  static GemmCoreType constexpr TYPE = GemmCoreType::AVX512_VNNI_8X48;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
T_0F	xbyak/xbyak.h	/^		T_0F = 1 << 8,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_0F38	xbyak/xbyak.h	/^		T_0F38 = 1 << 9,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_0F3A	xbyak/xbyak.h	/^		T_0F3A = 1 << 10,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_66	xbyak/xbyak.h	/^		T_66 = 1 << 5, \/\/ pp = 1$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_AUTO	xbyak/xbyak.h	/^		T_AUTO \/\/ T_SHORT if possible$/;"	e	enum:Xbyak::CodeGenerator::LabelType
T_B16	xbyak/xbyak.h	/^		T_B16 = T_B32 | T_B64, \/\/ m16bcst (Be careful)$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_B32	xbyak/xbyak.h	/^		T_B32 = 1 << 26, \/\/ m32bcst$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_B64	xbyak/xbyak.h	/^		T_B64 = 1 << 27, \/\/ m64bcst$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_DUP	xbyak/xbyak.h	/^		T_DUP = 1 << 4, \/\/ N = (8, 32, 64)$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_ER_R	xbyak/xbyak.h	/^		T_ER_R = 1 << 7, \/\/ reg{er}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_ER_X	xbyak/xbyak.h	/^		T_ER_X = 1 << 19, \/\/ xmm{er}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_ER_Y	xbyak/xbyak.h	/^		T_ER_Y = 1 << 20, \/\/ ymm{er}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_ER_Z	xbyak/xbyak.h	/^		T_ER_Z = 1 << 21, \/\/ zmm{er}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_EVEX	xbyak/xbyak.h	/^		T_EVEX = 1 << 18,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_EW0	xbyak/xbyak.h	/^		T_EW0 = 1 << 15,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_EW1	xbyak/xbyak.h	/^		T_EW1 = 1 << 16,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_F2	xbyak/xbyak.h	/^		T_F2 = T_66 | T_F3, \/\/ pp = 3$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_F3	xbyak/xbyak.h	/^		T_F3 = 1 << 6, \/\/ pp = 2$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_FAR	xbyak/xbyak.h	/^		T_FAR, \/\/ far jump$/;"	e	enum:Xbyak::CodeGenerator::LabelType
T_FP16	xbyak/xbyak.h	/^		T_FP16 = 1 << 31, \/\/ avx512-fp16$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_L0	xbyak/xbyak.h	/^		T_L0 = 1 << 11,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_L1	xbyak/xbyak.h	/^		T_L1 = 1 << 12,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_MAP5	xbyak/xbyak.h	/^		T_MAP5 = T_FP16 | T_0F,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_MAP6	xbyak/xbyak.h	/^		T_MAP6 = T_FP16 | T_0F38,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_MEM_EVEX	xbyak/xbyak.h	/^		T_MEM_EVEX = 1 << 30, \/\/ use evex if mem$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_MUST_EVEX	xbyak/xbyak.h	/^		T_MUST_EVEX = 1 << 25, \/\/ contains T_EVEX$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_M_K	xbyak/xbyak.h	/^		T_M_K = 1 << 28, \/\/ mem{k}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_N1	xbyak/xbyak.h	/^		T_N1 = 1,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_N16	xbyak/xbyak.h	/^		T_N16 = 5,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_N2	xbyak/xbyak.h	/^		T_N2 = 2,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_N32	xbyak/xbyak.h	/^		T_N32 = 6,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_N4	xbyak/xbyak.h	/^		T_N4 = 3,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_N8	xbyak/xbyak.h	/^		T_N8 = 4,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_NEAR	xbyak/xbyak.h	/^		T_NEAR,$/;"	e	enum:Xbyak::CodeGenerator::LabelType
T_NX_MASK	xbyak/xbyak.h	/^		T_NX_MASK = 7,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_N_VL	xbyak/xbyak.h	/^		T_N_VL = 1 << 3, \/\/ N * (1, 2, 4) for VL$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_RD_SAE	xbyak/xbyak.h	/^		T_RD_SAE = 2,$/;"	e	enum:Xbyak::EvexModifierRounding::__anon5
T_RN_SAE	xbyak/xbyak.h	/^		T_RN_SAE = 1,$/;"	e	enum:Xbyak::EvexModifierRounding::__anon5
T_RU_SAE	xbyak/xbyak.h	/^		T_RU_SAE = 3,$/;"	e	enum:Xbyak::EvexModifierRounding::__anon5
T_RZ_SAE	xbyak/xbyak.h	/^		T_RZ_SAE = 4,$/;"	e	enum:Xbyak::EvexModifierRounding::__anon5
T_SAE	xbyak/xbyak.h	/^		T_SAE = 5$/;"	e	enum:Xbyak::EvexModifierRounding::__anon5
T_SAE_X	xbyak/xbyak.h	/^		T_SAE_X = 1 << 22, \/\/ xmm{sae}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_SAE_Y	xbyak/xbyak.h	/^		T_SAE_Y = 1 << 23, \/\/ ymm{sae}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_SAE_Z	xbyak/xbyak.h	/^		T_SAE_Z = 1 << 24, \/\/ zmm{sae}$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_SHORT	xbyak/xbyak.h	/^		T_SHORT,$/;"	e	enum:Xbyak::CodeGenerator::LabelType
T_VSIB	xbyak/xbyak.h	/^		T_VSIB = 1 << 29,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_W0	xbyak/xbyak.h	/^		T_W0 = 1 << 13,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_W1	xbyak/xbyak.h	/^		T_W1 = 1 << 14,$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_XXX	xbyak/xbyak.h	/^		T_XXX$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_YMM	xbyak/xbyak.h	/^		T_YMM = 1 << 17, \/\/ support YMM, ZMM$/;"	e	enum:Xbyak::CodeGenerator::AVXtype
T_rd_sae	xbyak/xbyak.h	/^	const EvexModifierRounding T_sae, T_rn_sae, T_rd_sae, T_ru_sae, T_rz_sae; \/\/ {sae}, {rn-sae}, {rd-sae}, {ru-sae}, {rz-sae}$/;"	m	class:Xbyak::CodeGenerator
T_rn_sae	xbyak/xbyak.h	/^	const EvexModifierRounding T_sae, T_rn_sae, T_rd_sae, T_ru_sae, T_rz_sae; \/\/ {sae}, {rn-sae}, {rd-sae}, {ru-sae}, {rz-sae}$/;"	m	class:Xbyak::CodeGenerator
T_ru_sae	xbyak/xbyak.h	/^	const EvexModifierRounding T_sae, T_rn_sae, T_rd_sae, T_ru_sae, T_rz_sae; \/\/ {sae}, {rn-sae}, {rd-sae}, {ru-sae}, {rz-sae}$/;"	m	class:Xbyak::CodeGenerator
T_rz_sae	xbyak/xbyak.h	/^	const EvexModifierRounding T_sae, T_rn_sae, T_rd_sae, T_ru_sae, T_rz_sae; \/\/ {sae}, {rn-sae}, {rd-sae}, {ru-sae}, {rz-sae}$/;"	m	class:Xbyak::CodeGenerator
T_sae	xbyak/xbyak.h	/^	const EvexModifierRounding T_sae, T_rn_sae, T_rd_sae, T_ru_sae, T_rz_sae; \/\/ {sae}, {rn-sae}, {rd-sae}, {ru-sae}, {rz-sae}$/;"	m	class:Xbyak::CodeGenerator
T_z	xbyak/xbyak.h	/^	const EvexModifierZero T_z; \/\/ {z}$/;"	m	class:Xbyak::CodeGenerator
T_z	xbyak/xbyak.h	/^static const XBYAK_CONSTEXPR EvexModifierZero T_z;$/;"	m	namespace:Xbyak::util
Tmm	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Tmm(int idx = 0, Kind kind = Operand::TMM, int bit = 8192) : Reg(idx, kind, bit) { }$/;"	f	struct:Xbyak::Tmm
Tmm	xbyak/xbyak.h	/^struct Tmm : public Reg {$/;"	s	namespace:Xbyak
TmpReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 12, AReg = 15, TmpReg = BReg;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
TmpReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 26, TmpReg = 27;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
TmpReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
TmpReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
TmpReg	jit_blas_gemm.h	/^    int CReg = 0, BReg = 24, AReg = 27, TmpReg = 28;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
TmpReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
TmpReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
TmpReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
TmpReg	jit_blas_gemm.h	/^    static int constexpr CReg = 0, TmpReg = 4;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
Transpose2D	kernel_wrapper.h	/^class Transpose2D {$/;"	c	namespace:jblas::kernel::wrapper
Type	xbyak/xbyak.h	/^	enum Type {$/;"	g	class:Xbyak::CodeArray
Type	xbyak/xbyak_util.h	/^		Type(local::TypeT<L_, H_>) : L(L_), H(H_) {}$/;"	f	class:Xbyak::util::Cpu::Type
Type	xbyak/xbyak_util.h	/^		Type(uint64_t L = 0, uint64_t H = 0) : L(L), H(H) { }$/;"	f	class:Xbyak::util::Cpu::Type
Type	xbyak/xbyak_util.h	/^	class Type {$/;"	c	class:Xbyak::util::Cpu
TypeOffset	jit_blas_prologue.h	/^  static int constexpr TypeOffset = sizeof(mSize) + sizeof(mCoreType);$/;"	m	class:jblas::prologue::PackedWeight
TypeT	xbyak/xbyak_util.h	/^struct TypeT {$/;"	s	namespace:Xbyak::util::local
USER_BUF	xbyak/xbyak.h	/^		USER_BUF = 1, \/\/ use userPtr(non alignment, non protect)$/;"	e	enum:Xbyak::CodeArray::Type
UT_AMXBF16_NN_F4_BLOCK	ut/jit_blas_weight_compression.cpp	/^  UT_AMXBF16_NN_F4_BLOCK() {$/;"	f	class:jblas::wrapper::gemm::UT_AMXBF16_NN_F4_BLOCK
UT_AMXBF16_NN_F4_BLOCK	ut/jit_blas_weight_compression.cpp	/^class UT_AMXBF16_NN_F4_BLOCK {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AMXBF16_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^  UT_AMXBF16_NN_INT4_BLOCK() {$/;"	f	class:jblas::wrapper::gemm::UT_AMXBF16_NN_INT4_BLOCK
UT_AMXBF16_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^class UT_AMXBF16_NN_INT4_BLOCK {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AMXINT8_48_NN	ut/jit_blas_wrapper.cpp	/^  UT_AMXINT8_48_NN() {$/;"	f	class:jblas::wrapper::gemm::UT_AMXINT8_48_NN
UT_AMXINT8_48_NN	ut/jit_blas_wrapper.cpp	/^class UT_AMXINT8_48_NN {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AMXINT8_NN	ut/jit_blas_wrapper.cpp	/^  UT_AMXINT8_NN() {$/;"	f	class:jblas::wrapper::gemm::UT_AMXINT8_NN
UT_AMXINT8_NN	ut/jit_blas_wrapper.cpp	/^class UT_AMXINT8_NN {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AMXINT8_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^  UT_AMXINT8_NN_INT4_BLOCK() {$/;"	f	class:jblas::wrapper::gemm::UT_AMXINT8_NN_INT4_BLOCK
UT_AMXINT8_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^class UT_AMXINT8_NN_INT4_BLOCK {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AMX_BF16_NN_PackWeight	ut/jit_blas_wrapper.cpp	/^  UT_AMX_BF16_NN_PackWeight() {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_BF16_NN_PackWeight
UT_AMX_BF16_NN_PackWeight	ut/jit_blas_wrapper.cpp	/^class UT_AMX_BF16_NN_PackWeight {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AMX_INT8_NN_INT8_PerChannel	ut/jit_blas_weight_compression.cpp	/^  UT_AMX_INT8_NN_INT8_PerChannel() {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_INT8_NN_INT8_PerChannel
UT_AMX_INT8_NN_INT8_PerChannel	ut/jit_blas_weight_compression.cpp	/^class UT_AMX_INT8_NN_INT8_PerChannel {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AMX_INT8_NN_QKV_INT4_BLOCK	ut/jit_blas_transformer.cpp	/^  UT_AMX_INT8_NN_QKV_INT4_BLOCK() {$/;"	f	class:jblas::wrapper::transformer::UT_AMX_INT8_NN_QKV_INT4_BLOCK
UT_AMX_INT8_NN_QKV_INT4_BLOCK	ut/jit_blas_transformer.cpp	/^class UT_AMX_INT8_NN_QKV_INT4_BLOCK {$/;"	c	namespace:jblas::wrapper::transformer	file:
UT_AMX_INT8ss_NN_DynamicQuant	ut/jit_blas_wrapper.cpp	/^  UT_AMX_INT8ss_NN_DynamicQuant() {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_INT8ss_NN_DynamicQuant
UT_AMX_INT8ss_NN_DynamicQuant	ut/jit_blas_wrapper.cpp	/^class UT_AMX_INT8ss_NN_DynamicQuant {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512F_NN	ut/jit_blas_wrapper.cpp	/^  UT_AVX512F_NN() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN
UT_AVX512F_NN	ut/jit_blas_wrapper.cpp	/^class UT_AVX512F_NN {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512F_NN_F4_BLOCK	ut/jit_blas_weight_compression.cpp	/^  UT_AVX512F_NN_F4_BLOCK() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_F4_BLOCK
UT_AVX512F_NN_F4_BLOCK	ut/jit_blas_weight_compression.cpp	/^class UT_AVX512F_NN_F4_BLOCK {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512F_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^  UT_AVX512F_NN_INT4_BLOCK() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_INT4_BLOCK
UT_AVX512F_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^class UT_AVX512F_NN_INT4_BLOCK {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512F_NN_INT8_BLOCK	ut/jit_blas_weight_compression.cpp	/^  UT_AVX512F_NN_INT8_BLOCK() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_INT8_BLOCK
UT_AVX512F_NN_INT8_BLOCK	ut/jit_blas_weight_compression.cpp	/^class UT_AVX512F_NN_INT8_BLOCK {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512VNNI_NN	ut/jit_blas_wrapper.cpp	/^  UT_AVX512VNNI_NN() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN
UT_AVX512VNNI_NN	ut/jit_blas_wrapper.cpp	/^class UT_AVX512VNNI_NN {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512VNNI_NN_DynamicQuantNew	ut/jit_blas_wrapper.cpp	/^  UT_AVX512VNNI_NN_DynamicQuantNew() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN_DynamicQuantNew
UT_AVX512VNNI_NN_DynamicQuantNew	ut/jit_blas_wrapper.cpp	/^class UT_AVX512VNNI_NN_DynamicQuantNew {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512VNNI_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^  UT_AVX512VNNI_NN_INT4_BLOCK() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN_INT4_BLOCK
UT_AVX512VNNI_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^class UT_AVX512VNNI_NN_INT4_BLOCK {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512VNNI_NN_QKV_INT4_BLOCK	ut/jit_blas_transformer.cpp	/^  UT_AVX512VNNI_NN_QKV_INT4_BLOCK() {$/;"	f	class:jblas::wrapper::transformer::UT_AVX512VNNI_NN_QKV_INT4_BLOCK
UT_AVX512VNNI_NN_QKV_INT4_BLOCK	ut/jit_blas_transformer.cpp	/^class UT_AVX512VNNI_NN_QKV_INT4_BLOCK {$/;"	c	namespace:jblas::wrapper::transformer	file:
UT_AVX512_FP16_NN	ut/jit_blas_wrapper.cpp	/^  UT_AVX512_FP16_NN() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512_FP16_NN
UT_AVX512_FP16_NN	ut/jit_blas_wrapper.cpp	/^class UT_AVX512_FP16_NN {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AVX512_VNNI_NN_INT8_PerChannel	ut/jit_blas_weight_compression.cpp	/^  UT_AVX512_VNNI_NN_INT8_PerChannel() {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512_VNNI_NN_INT8_PerChannel
UT_AVX512_VNNI_NN_INT8_PerChannel	ut/jit_blas_weight_compression.cpp	/^class UT_AVX512_VNNI_NN_INT8_PerChannel {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_AccumulatorWriteBack	ut/jit_blas_epilogue.cpp	/^  UT_AccumulatorWriteBack() {$/;"	f	class:jblas::ut::UT_AccumulatorWriteBack
UT_AccumulatorWriteBack	ut/jit_blas_epilogue.cpp	/^class UT_AccumulatorWriteBack {$/;"	c	namespace:jblas::ut	file:
UT_ActivationBase	ut/jit_blas_prologue.cpp	/^  UT_ActivationBase() {$/;"	f	class:jblas::ut::UT_ActivationBase
UT_ActivationBase	ut/jit_blas_prologue.cpp	/^class UT_ActivationBase {$/;"	c	namespace:jblas::ut	file:
UT_ActivationConverter	ut/jit_blas_prologue.cpp	/^  UT_ActivationConverter() {$/;"	f	class:jblas::ut::UT_ActivationConverter
UT_ActivationConverter	ut/jit_blas_prologue.cpp	/^class UT_ActivationConverter {$/;"	c	namespace:jblas::ut	file:
UT_ActivationS8KBlockQuantize	ut/jit_blas_prologue.cpp	/^  UT_ActivationS8KBlockQuantize() {$/;"	f	class:jblas::ut::UT_ActivationS8KBlockQuantize
UT_ActivationS8KBlockQuantize	ut/jit_blas_prologue.cpp	/^class UT_ActivationS8KBlockQuantize {$/;"	c	namespace:jblas::ut	file:
UT_ActivationU8KBlockQuantize	ut/jit_blas_prologue.cpp	/^  UT_ActivationU8KBlockQuantize() {$/;"	f	class:jblas::ut::UT_ActivationU8KBlockQuantize
UT_ActivationU8KBlockQuantize	ut/jit_blas_prologue.cpp	/^class UT_ActivationU8KBlockQuantize {$/;"	c	namespace:jblas::ut	file:
UT_ActivationU8PerChannelNQuantize	ut/jit_blas_prologue.cpp	/^  UT_ActivationU8PerChannelNQuantize() {$/;"	f	class:jblas::ut::UT_ActivationU8PerChannelNQuantize
UT_ActivationU8PerChannelNQuantize	ut/jit_blas_prologue.cpp	/^class UT_ActivationU8PerChannelNQuantize {$/;"	c	namespace:jblas::ut	file:
UT_AlphaBetaProcessFp32	ut/jit_blas_epilogue.cpp	/^  UT_AlphaBetaProcessFp32() {$/;"	f	class:jblas::ut::UT_AlphaBetaProcessFp32
UT_AlphaBetaProcessFp32	ut/jit_blas_epilogue.cpp	/^class UT_AlphaBetaProcessFp32 {$/;"	c	namespace:jblas::ut	file:
UT_BlockQunatize_INT8	ut/jit_blas_weight_compression.cpp	/^  UT_BlockQunatize_INT8() {$/;"	f	class:jblas::wrapper::gemm::UT_BlockQunatize_INT8
UT_BlockQunatize_INT8	ut/jit_blas_weight_compression.cpp	/^class UT_BlockQunatize_INT8 {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_DeQuant	ut/kernel_jit.cpp	/^  UT_DeQuant() {$/;"	f	class:jblas::ut::UT_DeQuant
UT_DeQuant	ut/kernel_jit.cpp	/^class UT_DeQuant {$/;"	c	namespace:jblas::ut	file:
UT_DecompressKBlockS4FP	ut/kernel_wrapper.cpp	/^  UT_DecompressKBlockS4FP() {$/;"	f	class:jblas::ut::kernel_wrapper::UT_DecompressKBlockS4FP
UT_DecompressKBlockS4FP	ut/kernel_wrapper.cpp	/^class UT_DecompressKBlockS4FP {$/;"	c	namespace:jblas::ut::kernel_wrapper	file:
UT_DecompressS4S8	ut/kernel_jit.cpp	/^  UT_DecompressS4S8() {$/;"	f	class:jblas::ut::UT_DecompressS4S8
UT_DecompressS4S8	ut/kernel_jit.cpp	/^class UT_DecompressS4S8 {$/;"	c	namespace:jblas::ut	file:
UT_GEMMData_Row_bf16	ut/jit_blas_ut.h	/^  UT_GEMMData_Row_bf16(int m, int n, int k, int lda, int ldb, int ldc, int ldd)$/;"	f	struct:jblas::ut::UT_GEMMData_Row_bf16
UT_GEMMData_Row_bf16	ut/jit_blas_ut.h	/^struct UT_GEMMData_Row_bf16 {$/;"	s	namespace:jblas::ut
UT_GEMMData_Row_f32	ut/jit_blas_ut.h	/^  UT_GEMMData_Row_f32(int m, int n, int k, int lda, int ldb, int ldc, int ldd)$/;"	f	struct:jblas::ut::UT_GEMMData_Row_f32
UT_GEMMData_Row_f32	ut/jit_blas_ut.h	/^struct UT_GEMMData_Row_f32 {$/;"	s	namespace:jblas::ut
UT_GEMMData_Row_fp16	ut/jit_blas_ut.h	/^  UT_GEMMData_Row_fp16(int m, int n, int k, int lda, int ldb, int ldc, int ldd)$/;"	f	struct:jblas::ut::UT_GEMMData_Row_fp16
UT_GEMMData_Row_fp16	ut/jit_blas_ut.h	/^struct UT_GEMMData_Row_fp16 {$/;"	s	namespace:jblas::ut
UT_GEMMData_Row_u8s8	ut/jit_blas_ut.h	/^  UT_GEMMData_Row_u8s8(int m, int n, int k, int lda, int ldb, int ldc, int ldd, int nscale = 1)$/;"	f	struct:jblas::ut::UT_GEMMData_Row_u8s8
UT_GEMMData_Row_u8s8	ut/jit_blas_ut.h	/^struct UT_GEMMData_Row_u8s8 {$/;"	s	namespace:jblas::ut
UT_GEMM_16x48_AMX_INT8	ut/jit_blas_gemm.cpp	/^  UT_GEMM_16x48_AMX_INT8() {$/;"	f	class:jblas::ut::UT_GEMM_16x48_AMX_INT8
UT_GEMM_16x48_AMX_INT8	ut/jit_blas_gemm.cpp	/^class UT_GEMM_16x48_AMX_INT8 {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_16x48_AMX_INT8_ss	ut/jit_blas_gemm.cpp	/^  UT_GEMM_16x48_AMX_INT8_ss() {$/;"	f	class:jblas::ut::UT_GEMM_16x48_AMX_INT8_ss
UT_GEMM_16x48_AMX_INT8_ss	ut/jit_blas_gemm.cpp	/^class UT_GEMM_16x48_AMX_INT8_ss {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_16x64_AMX_INT8	ut/jit_blas_gemm.cpp	/^  UT_GEMM_16x64_AMX_INT8() {$/;"	f	class:jblas::ut::UT_GEMM_16x64_AMX_INT8
UT_GEMM_16x64_AMX_INT8	ut/jit_blas_gemm.cpp	/^class UT_GEMM_16x64_AMX_INT8 {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_AMXINT8_48_KBLOCK	ut/jit_blas_gemm.cpp	/^  UT_GEMM_AMXINT8_48_KBLOCK() {$/;"	f	class:jblas::ut::UT_GEMM_AMXINT8_48_KBLOCK
UT_GEMM_AMXINT8_48_KBLOCK	ut/jit_blas_gemm.cpp	/^class UT_GEMM_AMXINT8_48_KBLOCK {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_AMX_BF16	ut/jit_blas_gemm.cpp	/^  UT_GEMM_AMX_BF16() {$/;"	f	class:jblas::ut::UT_GEMM_AMX_BF16
UT_GEMM_AMX_BF16	ut/jit_blas_gemm.cpp	/^class UT_GEMM_AMX_BF16 {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_AVX2	ut/jit_blas_gemm.cpp	/^  UT_GEMM_AVX2() {$/;"	f	class:jblas::ut::UT_GEMM_AVX2
UT_GEMM_AVX2	ut/jit_blas_gemm.cpp	/^class UT_GEMM_AVX2 {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_AVX512F	ut/jit_blas_gemm.cpp	/^  UT_GEMM_AVX512F() {$/;"	f	class:jblas::ut::UT_GEMM_AVX512F
UT_GEMM_AVX512F	ut/jit_blas_gemm.cpp	/^class UT_GEMM_AVX512F {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_VNNI	ut/jit_blas_gemm.cpp	/^  UT_GEMM_VNNI() {$/;"	f	class:jblas::ut::UT_GEMM_VNNI
UT_GEMM_VNNI	ut/jit_blas_gemm.cpp	/^class UT_GEMM_VNNI {$/;"	c	namespace:jblas::ut	file:
UT_GEMM_VNNI_KBLOCK	ut/jit_blas_gemm.cpp	/^  UT_GEMM_VNNI_KBLOCK() {$/;"	f	class:jblas::ut::UT_GEMM_VNNI_KBLOCK
UT_GEMM_VNNI_KBLOCK	ut/jit_blas_gemm.cpp	/^class UT_GEMM_VNNI_KBLOCK {$/;"	c	namespace:jblas::ut	file:
UT_GemmCore_Row_NN_AVX512_FP16	ut/jit_blas_gemm.cpp	/^  UT_GemmCore_Row_NN_AVX512_FP16() {$/;"	f	class:jblas::ut::UT_GemmCore_Row_NN_AVX512_FP16
UT_GemmCore_Row_NN_AVX512_FP16	ut/jit_blas_gemm.cpp	/^class UT_GemmCore_Row_NN_AVX512_FP16 {$/;"	c	namespace:jblas::ut	file:
UT_GemmParallel	ut/jit_blas_utils.cpp	/^  UT_GemmParallel() {$/;"	f	class:jblas::utils::parallel::UT_GemmParallel
UT_GemmParallel	ut/jit_blas_utils.cpp	/^class UT_GemmParallel {$/;"	c	namespace:jblas::utils::parallel	file:
UT_GemmParallelKBlock	ut/jit_blas_utils.cpp	/^  UT_GemmParallelKBlock() {$/;"	f	class:jblas::utils::parallel::UT_GemmParallelKBlock
UT_GemmParallelKBlock	ut/jit_blas_utils.cpp	/^class UT_GemmParallelKBlock {$/;"	c	namespace:jblas::utils::parallel	file:
UT_Memcpy2D_AVX512F	ut/kernel_jit.cpp	/^  UT_Memcpy2D_AVX512F() {$/;"	f	class:jblas::ut::jit::copy::UT_Memcpy2D_AVX512F
UT_Memcpy2D_AVX512F	ut/kernel_jit.cpp	/^class UT_Memcpy2D_AVX512F {$/;"	c	namespace:jblas::ut::jit::copy	file:
UT_PaddingInterleaveMN	ut/kernel_wrapper.cpp	/^  UT_PaddingInterleaveMN() {$/;"	f	class:jblas::ut::kernel_wrapper::UT_PaddingInterleaveMN
UT_PaddingInterleaveMN	ut/kernel_wrapper.cpp	/^class UT_PaddingInterleaveMN {$/;"	c	namespace:jblas::ut::kernel_wrapper	file:
UT_PaddingTransInterleaveMN	ut/kernel_wrapper.cpp	/^  UT_PaddingTransInterleaveMN() {$/;"	f	class:jblas::ut::kernel_wrapper::UT_PaddingTransInterleaveMN
UT_PaddingTransInterleaveMN	ut/kernel_wrapper.cpp	/^class UT_PaddingTransInterleaveMN {$/;"	c	namespace:jblas::ut::kernel_wrapper	file:
UT_QKVGemmInterfacePackWeight	ut/jit_blas_transformer.cpp	/^  UT_QKVGemmInterfacePackWeight() {$/;"	f	class:jblas::wrapper::transformer::UT_QKVGemmInterfacePackWeight
UT_QKVGemmInterfacePackWeight	ut/jit_blas_transformer.cpp	/^class UT_QKVGemmInterfacePackWeight {$/;"	c	namespace:jblas::wrapper::transformer	file:
UT_RevertPaddingInterleaveMN	ut/kernel_wrapper.cpp	/^  UT_RevertPaddingInterleaveMN() {$/;"	f	class:jblas::ut::kernel_wrapper::UT_RevertPaddingInterleaveMN
UT_RevertPaddingInterleaveMN	ut/kernel_wrapper.cpp	/^class UT_RevertPaddingInterleaveMN {$/;"	c	namespace:jblas::ut::kernel_wrapper	file:
UT_RowmajorParallelKBlock	ut/jit_blas_utils.cpp	/^  UT_RowmajorParallelKBlock() {$/;"	f	class:jblas::utils::parallel::UT_RowmajorParallelKBlock
UT_RowmajorParallelKBlock	ut/jit_blas_utils.cpp	/^class UT_RowmajorParallelKBlock {$/;"	c	namespace:jblas::utils::parallel	file:
UT_START	ut/jit_blas_ut.h	64;"	d
UT_SerDes_INT4	ut/jit_blas_weight_compression.cpp	/^  UT_SerDes_INT4() {$/;"	f	class:jblas::wrapper::gemm::UT_SerDes_INT4
UT_SerDes_INT4	ut/jit_blas_weight_compression.cpp	/^class UT_SerDes_INT4 {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_TransposeBlockQuantize_F4	ut/jit_blas_weight_compression.cpp	/^  UT_TransposeBlockQuantize_F4() {$/;"	f	class:jblas::wrapper::gemm::UT_TransposeBlockQuantize_F4
UT_TransposeBlockQuantize_F4	ut/jit_blas_weight_compression.cpp	/^class UT_TransposeBlockQuantize_F4 {$/;"	c	namespace:jblas::wrapper::gemm	file:
UT_vector_s8	ut/jit_blas_ut.h	/^struct UT_vector_s8 {$/;"	s	namespace:jblas::ut
UT_vector_u8	ut/jit_blas_ut.h	/^struct UT_vector_u8 {$/;"	s	namespace:jblas::ut
Undef	jit_blas_gemm.h	/^  Undef = 0,$/;"	m	class:jblas::gemm::GemmCoreType
Undef	jit_blas_prologue.h	/^  Undef = -1,$/;"	m	class:jblas::prologue::WeightPrologueType
UseRCX	xbyak/xbyak_util.h	/^const int UseRCX = 1 << 6;$/;"	m	namespace:Xbyak::util
UseRDX	xbyak/xbyak_util.h	/^const int UseRDX = 1 << 7;$/;"	m	namespace:Xbyak::util
VBits	jit_base.hpp	/^  static int constexpr VBits = 256;$/;"	m	class:jblas::xbyak::JitAvx
VBits	jit_base.hpp	/^  static int constexpr VBits = 256;$/;"	m	class:jblas::xbyak::JitAvx2
VBits	jit_base.hpp	/^  static int constexpr VBits = 512;$/;"	m	class:jblas::xbyak::JitAvx512f
VBytes	kernel_jit.h	/^    static int constexpr VBytes = 64;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
VBytes	kernel_jit.h	/^  static int constexpr VBytes = 64;$/;"	m	class:jblas::kernel::jit::DecompressS4S8_AVX512F
VBytes	kernel_jit.h	/^  static int constexpr VBytes = 64;$/;"	m	class:jblas::kernel::jit::JitMemcpy2DAvx512f
VERSION	xbyak/xbyak.h	/^	VERSION = 0x6691 \/* 0xABCD = A.BC(.D) *\/$/;"	e	enum:Xbyak::__anon3
VTune	xbyak/xbyak_util.h	/^		VTune = 2$/;"	e	enum:Xbyak::util::Profiler::__anon15
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 32;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
VecBytes	jit_blas_gemm.h	/^    static int constexpr VecBytes = 64;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
VecElements	jit_blas_gemm.h	/^    static int constexpr VecElements = VecBytes \/ sizeof(CType);$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
VerifyInInt32	xbyak/xbyak.h	/^inline uint32_t VerifyInInt32(uint64_t x)$/;"	f	namespace:Xbyak::inner
VexEncoding	xbyak/xbyak.h	/^	VexEncoding,$/;"	e	enum:Xbyak::__anon8
WIN32_LEAN_AND_MEAN	xbyak/xbyak.h	76;"	d
WeightBase	jit_blas_prologue.h	/^class WeightBase {$/;"	c	namespace:jblas::prologue::gemm
WeightCompType	jit_blas_weight_compression.h	/^enum class WeightCompType : int {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
WeightF4ScaleFp32	jit_blas_weight_compression.h	/^class WeightF4ScaleFp32 : public WeightS4ScaleFp32<_GemmCore_T, ISA_T, S4_CLIP> {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
WeightFp4BnbScaleFp32	jit_blas_weight_compression.h	/^  WeightFp4BnbScaleFp32,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightFp4E2M1ScaleFp32	jit_blas_weight_compression.h	/^  WeightFp4E2M1ScaleFp32,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightNf4ScaleFp32	jit_blas_weight_compression.h	/^  WeightNf4ScaleFp32,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightPack	jit_blas_prologue.h	/^  WeightPack = Begin,$/;"	m	class:jblas::prologue::WeightPrologueType
WeightPack	jit_blas_prologue.h	/^class WeightPack : public WeightBase<typename _GemmCore_T::BType, ISA_T> {$/;"	c	namespace:jblas::prologue::gemm
WeightPrologueType	jit_blas_prologue.h	/^enum class WeightPrologueType : int {$/;"	c	namespace:jblas::prologue
WeightS4ClipScaleBf16	jit_blas_weight_compression.h	/^  WeightS4ClipScaleBf16,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightS4ClipScaleFp32	jit_blas_weight_compression.h	/^  WeightS4ClipScaleFp32 = Begin,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightS4FullRangeScaleBf16	jit_blas_weight_compression.h	/^  WeightS4FullRangeScaleBf16,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightS4FullRangeScaleFp32	jit_blas_weight_compression.h	/^  WeightS4FullRangeScaleFp32,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightS4ScaleBf16	jit_blas_weight_compression.h	/^class WeightS4ScaleBf16 : public WeightS4ScaleFp32<_GemmCore_T, ISA_T, S4_T> {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
WeightS4ScaleFp32	jit_blas_weight_compression.h	/^class WeightS4ScaleFp32 : public WeightS8ScaleFp32<_GemmCore_T, ISA_T> {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
WeightS8ScaleFp32	jit_blas_weight_compression.h	/^  WeightS8ScaleFp32,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightS8ScaleFp32	jit_blas_weight_compression.h	/^class WeightS8ScaleFp32 {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
WeightS8ScaleFp32PerChannelN	jit_blas_weight_compression.h	/^  WeightS8ScaleFp32PerChannelN,$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::WeightCompType
WeightS8ScaleFp32PerChannelN	jit_blas_weight_compression.h	/^class WeightS8ScaleFp32PerChannelN : public WeightS8ScaleFp32<_GemmCore_T, ISA_T> {$/;"	c	namespace:jblas::prologue::weight_comp::gemm_kblcok
XBYAK32	xbyak/xbyak.h	117;"	d
XBYAK64	xbyak/xbyak.h	115;"	d
XBYAK64_GCC	xbyak/xbyak.h	111;"	d
XBYAK64_WIN	xbyak/xbyak.h	109;"	d
XBYAK_CONSTEXPR	xbyak/xbyak.h	134;"	d
XBYAK_CONSTEXPR	xbyak/xbyak.h	136;"	d
XBYAK_DEFINE_TYPE	xbyak/xbyak_util.h	378;"	d
XBYAK_DEFINE_TYPE	xbyak/xbyak_util.h	380;"	d
XBYAK_DEFINE_TYPE	xbyak/xbyak_util.h	464;"	d
XBYAK_DISABLE_WARNING_ARRAY_BOUNDS	xbyak/xbyak.h	149;"	d
XBYAK_GNUC_PREREQ	xbyak/xbyak.h	35;"	d
XBYAK_GNUC_PREREQ	xbyak/xbyak.h	37;"	d
XBYAK_INTEL_CPU_SPECIFIC	xbyak/xbyak_util.h	24;"	d
XBYAK_NOEXCEPT	xbyak/xbyak.h	125;"	d
XBYAK_NOEXCEPT	xbyak/xbyak.h	127;"	d
XBYAK_NO_OP_NAMES	xbyak/xbyak.h	13;"	d
XBYAK_SPLIT_ID	xbyak/xbyak_util.h	376;"	d
XBYAK_SPLIT_ID	xbyak/xbyak_util.h	463;"	d
XBYAK_STD_UNORDERED_MAP	xbyak/xbyak.h	46;"	d
XBYAK_STD_UNORDERED_MAP	xbyak/xbyak.h	57;"	d
XBYAK_STD_UNORDERED_MAP	xbyak/xbyak.h	64;"	d
XBYAK_STD_UNORDERED_MAP	xbyak/xbyak.h	71;"	d
XBYAK_STD_UNORDERED_MULTIMAP	xbyak/xbyak.h	47;"	d
XBYAK_STD_UNORDERED_MULTIMAP	xbyak/xbyak.h	58;"	d
XBYAK_STD_UNORDERED_MULTIMAP	xbyak/xbyak.h	65;"	d
XBYAK_STD_UNORDERED_MULTIMAP	xbyak/xbyak.h	72;"	d
XBYAK_STD_UNORDERED_SET	xbyak/xbyak.h	44;"	d
XBYAK_STD_UNORDERED_SET	xbyak/xbyak.h	55;"	d
XBYAK_STD_UNORDERED_SET	xbyak/xbyak.h	62;"	d
XBYAK_STD_UNORDERED_SET	xbyak/xbyak.h	69;"	d
XBYAK_THROW	xbyak/xbyak.h	309;"	d
XBYAK_THROW	xbyak/xbyak.h	338;"	d
XBYAK_THROW	xbyak/xbyak_util.h	9;"	d
XBYAK_THROW_RET	xbyak/xbyak.h	310;"	d
XBYAK_THROW_RET	xbyak/xbyak.h	339;"	d
XBYAK_THROW_RET	xbyak/xbyak_util.h	10;"	d
XBYAK_TLS	xbyak/xbyak.h	122;"	d
XBYAK_TLS	xbyak/xbyak.h	123;"	d
XBYAK_TLS	xbyak/xbyak.h	81;"	d
XBYAK_TLS	xbyak/xbyak.h	83;"	d
XBYAK_TLS	xbyak/xbyak.h	89;"	d
XBYAK_USE_MAP_JIT	xbyak/xbyak.h	92;"	d
XBYAK_USE_MEMFD	xbyak/xbyak.h	105;"	d
XBYAK_USE_MMAP_ALLOCATOR	xbyak/xbyak.h	28;"	d
XBYAK_USE_MMAP_ALLOCATOR	xbyak/xbyak.h	31;"	d
XBYAK_USE_PERF	xbyak/xbyak_util.h	79;"	d
XBYAK_VARIADIC_TEMPLATE	xbyak/xbyak.h	124;"	d
XBYAK_XBYAK_H_	xbyak/xbyak.h	3;"	d
XBYAK_XBYAK_UTIL_H_	xbyak/xbyak_util.h	2;"	d
XFEATURE_MASK_XTILE	jit_blas_utils.h	213;"	d
XFEATURE_MASK_XTILECFG	jit_blas_utils.h	211;"	d
XFEATURE_MASK_XTILEDATA	jit_blas_utils.h	212;"	d
XFEATURE_XTILECFG	jit_blas_utils.h	209;"	d
XFEATURE_XTILEDATA	jit_blas_utils.h	210;"	d
XMM	xbyak/xbyak.h	/^		XMM = 1 << 4,$/;"	e	enum:Xbyak::Operand::Kind
Xbyak	xbyak/xbyak.h	/^namespace Xbyak {$/;"	n
Xbyak	xbyak/xbyak_util.h	/^namespace Xbyak { namespace util {$/;"	n
Xmm	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Xmm(Kind kind, int idx) : Mmx(idx, kind, kind == XMM ? 128 : kind == YMM ? 256 : 512) { }$/;"	f	struct:Xbyak::Xmm
Xmm	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Xmm(int idx = 0, Kind kind = Operand::XMM, int bit = 128) : Mmx(idx, kind, bit) { }$/;"	f	struct:Xbyak::Xmm
Xmm	xbyak/xbyak.h	/^struct Xmm : public Mmx {$/;"	s	namespace:Xbyak
YMM	xbyak/xbyak.h	/^		YMM = 1 << 5,$/;"	e	enum:Xbyak::Operand::Kind
Ymm	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Ymm(int idx = 0, Kind kind = Operand::YMM, int bit = 256) : Xmm(idx, kind, bit) { }$/;"	f	struct:Xbyak::Ymm
Ymm	xbyak/xbyak.h	/^struct Ymm : public Xmm {$/;"	s	namespace:Xbyak
ZMM	xbyak/xbyak.h	/^		ZMM = 1 << 6,$/;"	e	enum:Xbyak::Operand::Kind
Zmm	xbyak/xbyak.h	/^	explicit XBYAK_CONSTEXPR Zmm(int idx = 0) : Ymm(idx, Operand::ZMM, 512) { }$/;"	f	struct:Xbyak::Zmm
Zmm	xbyak/xbyak.h	/^struct Zmm : public Ymm {$/;"	s	namespace:Xbyak
ZpAReg	jit_blas_gemm.h	/^    int CReg = 0, CF32Reg = 9, BReg = 18, AReg = 21, ZpAReg = 22, ZpTmp = 25;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
ZpARegCount	jit_blas_gemm.h	/^    int CRegCount = 9, BRegCount = 3, ARegCount = 1, ZpARegCount = MTILE;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
ZpDequantInt32ToFp32	jit_blas_epilogue.h	/^class ZpDequantInt32ToFp32 {$/;"	c	namespace:jblas::epilogue::gemm
ZpTmp	jit_blas_gemm.h	/^    int CReg = 0, CF32Reg = 9, BReg = 18, AReg = 21, ZpAReg = 22, ZpTmp = 25;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
__GNUC_PREREQ	xbyak/xbyak_util.h	52;"	d
__cpuid	xbyak/xbyak_util.h	/^		static inline __declspec(naked) void __cpuid(int[4], int)$/;"	f
__cpuid	xbyak/xbyak_util.h	58;"	d
__cpuid	xbyak/xbyak_util.h	61;"	d
__cpuid_count	xbyak/xbyak_util.h	59;"	d
__cpuid_count	xbyak/xbyak_util.h	62;"	d
_cmp_eq_oq	kernel_jit_injector.h	/^    _cmp_eq_oq = 0u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
_cmp_le_os	kernel_jit_injector.h	/^    _cmp_le_os = 2u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
_cmp_lt_os	kernel_jit_injector.h	/^    _cmp_lt_os = 1u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
_cmp_neq_uq	kernel_jit_injector.h	/^    _cmp_neq_uq = 4u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
_cmp_nle_us	kernel_jit_injector.h	/^    _cmp_nle_us = 6u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
_cmp_nlt_us	kernel_jit_injector.h	/^    _cmp_nlt_us = 5u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
_op_floor	kernel_jit_injector.h	/^    _op_floor = 1u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
_op_mxcsr	kernel_jit_injector.h	/^    _op_mxcsr = 4u,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::__anon1
aaa	xbyak/xbyak_mnemonic.h	/^void aaa() { db(0x37); }$/;"	f
aad	xbyak/xbyak_mnemonic.h	/^void aad() { db(0xD5); db(0x0A); }$/;"	f
aadd	xbyak/xbyak_mnemonic.h	/^void aadd(const Address& addr, const Reg32e &reg) { opModM(addr, reg, 0x0F, 0x38, 0x0FC); }$/;"	f
aam	xbyak/xbyak_mnemonic.h	/^void aam() { db(0xD4); db(0x0A); }$/;"	f
aand	xbyak/xbyak_mnemonic.h	/^void aand(const Address& addr, const Reg32e &reg) { db(0x66); opModM(addr, reg, 0x0F, 0x38, 0x0FC); }$/;"	f
aas	xbyak/xbyak_mnemonic.h	/^void aas() { db(0x3F); }$/;"	f
accumulate_dequantize_s32_f32	kernel_avx512f.h	/^static inline JBLAS_CODE accumulate_dequantize_s32_f32(const int32_t* srcptr, float* dstptr, float alpha, float beta,$/;"	f	namespace:jblas::kernel::avx512f
accumulate_dequantize_s32_f32	kernel_ref.h	/^static inline JBLAS_CODE accumulate_dequantize_s32_f32(const int32_t* srcptr, float* dstptr, float alpha, float beta,$/;"	f	namespace:jblas::kernel::ref
adc	xbyak/xbyak_mnemonic.h	/^void adc(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x10, 2); }$/;"	f
adc	xbyak/xbyak_mnemonic.h	/^void adc(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x10); }$/;"	f
adcx	xbyak/xbyak_mnemonic.h	/^void adcx(const Reg32e& reg, const Operand& op) { opGen(reg, op, 0xF6, 0x66, isREG32_REG32orMEM, NONE, 0x38); }$/;"	f
add	jit_blas_utils.h	/^  bool add(float time) {$/;"	f	class:jblas::utils::timer_statistics_logger
add	jit_blas_utils.h	/^  void add(T _val) {$/;"	f	class:jblas::utils::minmax_statistics
add	xbyak/xbyak_mnemonic.h	/^void add(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x00, 0); }$/;"	f
add	xbyak/xbyak_mnemonic.h	/^void add(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x00); }$/;"	f
addUndefinedLabel	xbyak/xbyak.h	/^	void addUndefinedLabel(const Label& label, const JmpLabel& jmp)$/;"	f	class:Xbyak::LabelManager
addUndefinedLabel	xbyak/xbyak.h	/^	void addUndefinedLabel(const std::string& label, const JmpLabel& jmp)$/;"	f	class:Xbyak::LabelManager
addpd	xbyak/xbyak_mnemonic.h	/^void addpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x58, 0x66, isXMM_XMMorMEM); }$/;"	f
addps	xbyak/xbyak_mnemonic.h	/^void addps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x58, 0x100, isXMM_XMMorMEM); }$/;"	f
addrInfoList_	xbyak/xbyak.h	/^	AddrInfoList addrInfoList_;$/;"	m	class:Xbyak::CodeArray
addsd	xbyak/xbyak_mnemonic.h	/^void addsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x58, 0xF2, isXMM_XMMorMEM); }$/;"	f
addss	xbyak/xbyak_mnemonic.h	/^void addss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x58, 0xF3, isXMM_XMMorMEM); }$/;"	f
addsubpd	xbyak/xbyak_mnemonic.h	/^void addsubpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xD0, 0x66, isXMM_XMMorMEM); }$/;"	f
addsubps	xbyak/xbyak_mnemonic.h	/^void addsubps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xD0, 0xF2, isXMM_XMMorMEM); }$/;"	f
adox	xbyak/xbyak_mnemonic.h	/^void adox(const Reg32e& reg, const Operand& op) { opGen(reg, op, 0xF6, 0xF3, isREG32_REG32orMEM, NONE, 0x38); }$/;"	f
aesdec	xbyak/xbyak_mnemonic.h	/^void aesdec(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xDE, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
aesdeclast	xbyak/xbyak_mnemonic.h	/^void aesdeclast(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xDF, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
aesenc	xbyak/xbyak_mnemonic.h	/^void aesenc(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xDC, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
aesenclast	xbyak/xbyak_mnemonic.h	/^void aesenclast(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xDD, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
aesimc	xbyak/xbyak_mnemonic.h	/^void aesimc(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xDB, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
aeskeygenassist	xbyak/xbyak_mnemonic.h	/^void aeskeygenassist(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0xDF, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
ah	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
al	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
align	xbyak/xbyak.h	/^	void align(size_t x = 16, bool useMultiByteNop = true)$/;"	f	class:Xbyak::CodeGenerator
aligned_vector	jit_blas_utils.h	/^  aligned_vector() : mRawsize(0), mPtr(nullptr), mAlignedsize(0) {}$/;"	f	class:jblas::utils::aligned_vector
aligned_vector	jit_blas_utils.h	/^  aligned_vector(size_t _size, _T _val = _T(0)) {$/;"	f	class:jblas::utils::aligned_vector
aligned_vector	jit_blas_utils.h	/^class aligned_vector {$/;"	c	namespace:jblas::utils
alloc	xbyak/xbyak.h	/^	uint8_t *alloc(size_t size)$/;"	f	class:Xbyak::MmapAllocator
alloc	xbyak/xbyak.h	/^	virtual uint8_t *alloc(size_t size) { return reinterpret_cast<uint8_t*>(AlignedMalloc(size, inner::ALIGN_PAGE_SIZE)); }$/;"	f	struct:Xbyak::Allocator
allocList_	xbyak/xbyak.h	/^	AllocationList allocList_;$/;"	m	class:Xbyak::MmapAllocator
alloc_	xbyak/xbyak.h	/^	Allocator *alloc_;$/;"	m	class:Xbyak::CodeArray
alpha	jit_blas_epilogue.h	/^    float alpha, beta;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessFp32::Param
alpha	jit_blas_epilogue.h	/^    float alpha;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessS32U8::Param
alphabeta_f32_f32	kernel_avx2.h	/^static inline JBLAS_CODE alphabeta_f32_f32(const float alpha, const float* srcptr, const int srcstep, const float beta,$/;"	f	namespace:jblas::kernel::avx2
alphabeta_f32_f32	kernel_avx512f.h	/^static inline JBLAS_CODE alphabeta_f32_f32(const float alpha, const float* srcptr, const int srcstep, const float beta,$/;"	f	namespace:jblas::kernel::avx512f
alphabeta_f32_f32	kernel_ref.h	/^static inline JBLAS_CODE alphabeta_f32_f32(const float alpha, const float* srcptr, const int srcstep, const float beta,$/;"	f	namespace:jblas::kernel::ref
amx_bf16	jit_blas_transformer.h	/^namespace amx_bf16 {$/;"	n	namespace:jblas::wrapper::transformer_default::weight_comp
amx_bf16	jit_blas_utils.h	/^  static bool constexpr amx_bf16 = ISA_T >= JblasAMX_BF16;$/;"	m	class:jblas::utils::isa_base
amx_bf16	jit_blas_weight_compression.h	/^namespace amx_bf16 {$/;"	n	namespace:jblas::wrapper::gemm_default::weight_comp
amx_bf16	jit_blas_wrapper.h	/^namespace amx_bf16 {$/;"	n	namespace:jblas::wrapper::gemm_default
amx_int8	jit_blas_transformer.h	/^namespace amx_int8 {$/;"	n	namespace:jblas::wrapper::transformer_default::weight_comp
amx_int8	jit_blas_utils.h	/^  static bool constexpr amx_int8 = ISA_T >= JblasAMX_INT8;$/;"	m	class:jblas::utils::isa_base
amx_int8	jit_blas_weight_compression.h	/^namespace amx_int8 {$/;"	n	namespace:jblas::wrapper::gemm_default::weight_comp
amx_int8	jit_blas_wrapper.h	/^namespace amx_int8 {$/;"	n	namespace:jblas::wrapper::gemm_default
and	xbyak/xbyak_mnemonic.h	/^void and(const Operand& op, uint32_t imm) { and_(op, imm); }$/;"	f
and	xbyak/xbyak_mnemonic.h	/^void and(const Operand& op1, const Operand& op2) { and_(op1, op2); }$/;"	f
and_	xbyak/xbyak_mnemonic.h	/^void and_(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x20, 4); }$/;"	f
and_	xbyak/xbyak_mnemonic.h	/^void and_(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x20); }$/;"	f
andn	xbyak/xbyak_mnemonic.h	/^void andn(const Reg32e& r1, const Reg32e& r2, const Operand& op) { opGpr(r1, r2, op, T_0F38, 0xf2, true); }$/;"	f
andnpd	xbyak/xbyak_mnemonic.h	/^void andnpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x55, 0x66, isXMM_XMMorMEM); }$/;"	f
andnps	xbyak/xbyak_mnemonic.h	/^void andnps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x55, 0x100, isXMM_XMMorMEM); }$/;"	f
andpd	xbyak/xbyak_mnemonic.h	/^void andpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x54, 0x66, isXMM_XMMorMEM); }$/;"	f
andps	xbyak/xbyak_mnemonic.h	/^void andps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x54, 0x100, isXMM_XMMorMEM); }$/;"	f
aor	xbyak/xbyak_mnemonic.h	/^void aor(const Address& addr, const Reg32e &reg) { db(0xF2); opModM(addr, reg, 0x0F, 0x38, 0x0FC); }$/;"	f
append	xbyak/xbyak_util.h	/^	Pack& append(const Xbyak::Reg64& t)$/;"	f	class:Xbyak::util::Pack
assign	xbyak/xbyak.h	/^	void assign(Label& dst, const Label& src)$/;"	f	class:Xbyak::LabelManager
assignL	xbyak/xbyak.h	/^	void assignL(Label& dst, const Label& src) { labelMgr_.assign(dst, src); }$/;"	f	class:Xbyak::CodeGenerator
assign_reg_elt_constp	kernel_jit_injector.h	/^  void assign_reg_elt_constp(const Xbyak::Reg64& reg) { reg_rt_const_p = reg; }$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
assign_resources	kernel_jit_injector.h	/^  void assign_resources(Xbyak::CodeGenerator* ptr, const std::set<int>& used_zmm_idx, const Xbyak::Reg64& table_reg,$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
assign_zmm	kernel_jit_injector.h	/^  void assign_zmm(const std::set<int>& used_zmm_idx, Zmm* zmm) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
assign_zmm_idx	kernel_jit_injector.h	/^  std::set<int> assign_zmm_idx;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
astep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
astep	jit_blas_gemm.h	/^    int astep, cstep;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
astep	jit_blas_gemm.h	/^    int astep, cstep;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
avg_val	jit_blas_utils.h	/^  T min_val, max_val, avg_val;$/;"	m	class:jblas::utils::minmax_statistics
avg_val	jit_blas_utils.h	/^  float min_val, max_val, avg_val;$/;"	m	class:jblas::utils::timer_statistics_logger
avx	jit_blas_utils.h	/^  static bool constexpr avx = ISA_T >= JblasAVX;$/;"	m	class:jblas::utils::isa_base
avx2	jit_blas_utils.h	/^  static bool constexpr avx2 = ISA_T >= JblasAVX2;$/;"	m	class:jblas::utils::isa_base
avx2	kernel_avx2.h	/^namespace avx2 {$/;"	n	namespace:jblas::kernel
avx512_fp16	jit_blas_utils.h	/^  static bool constexpr avx512_fp16 = ISA_T >= JblasAVX512_FP16;$/;"	m	class:jblas::utils::isa_base
avx512_fp16	jit_blas_wrapper.h	/^namespace avx512_fp16 {$/;"	n	namespace:jblas::wrapper::gemm_default
avx512_vnni	jit_blas_transformer.h	/^namespace avx512_vnni {$/;"	n	namespace:jblas::wrapper::transformer_default::weight_comp
avx512_vnni	jit_blas_utils.h	/^  static bool constexpr avx512_vnni = ISA_T >= JblasAVX512_VNNI;$/;"	m	class:jblas::utils::isa_base
avx512_vnni	jit_blas_weight_compression.h	/^namespace avx512_vnni {$/;"	n	namespace:jblas::wrapper::gemm_default::weight_comp
avx512_vnni	jit_blas_wrapper.h	/^namespace avx512_vnni {$/;"	n	namespace:jblas::wrapper::gemm_default
avx512f	jit_blas_transformer.h	/^namespace avx512f {$/;"	n	namespace:jblas::wrapper::transformer_default::weight_comp
avx512f	jit_blas_utils.h	/^  static bool constexpr avx512f = ISA_T >= JblasAVX512F;$/;"	m	class:jblas::utils::isa_base
avx512f	jit_blas_weight_compression.h	/^namespace avx512f {$/;"	n	namespace:jblas::wrapper::gemm_default::weight_comp
avx512f	jit_blas_wrapper.h	/^namespace avx512f {$/;"	n	namespace:jblas::wrapper::gemm_default
avx512f	kernel_avx512f.h	/^namespace avx512f {$/;"	n	namespace:jblas::kernel
ax	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
axor	xbyak/xbyak_mnemonic.h	/^void axor(const Address& addr, const Reg32e &reg) { db(0xF3); opModM(addr, reg, 0x0F, 0x38, 0x0FC); }$/;"	f
base_	xbyak/xbyak.h	/^	CodeArray *base_;$/;"	m	class:Xbyak::LabelManager
base_	xbyak/xbyak.h	/^	Reg base_;$/;"	m	class:Xbyak::RegExp
bcast	kernel_jit_injector.h	/^    table_entry_bcast_t bcast;$/;"	m	struct:jblas::kernel::jit_injector::eltwise_injector::mapped_table_entry_t
bcast	kernel_jit_injector.h	/^    table_entry_bcast_t bcast;$/;"	m	struct:jblas::kernel::jit_injector::eltwise_injector::table_entry_t
begin	xbyak/xbyak_util.h	/^	void begin()$/;"	f	class:Xbyak::util::Clock
beta	jit_blas_epilogue.h	/^    float alpha, beta;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessFp32::Param
bextr	xbyak/xbyak_mnemonic.h	/^void bextr(const Reg32e& r1, const Operand& op, const Reg32e& r2) { opGpr(r1, op, r2, T_0F38, 0xf7, false); }$/;"	f
bf16	jit_blas_utils.h	/^    uint16_t bf16[2];$/;"	m	union:jblas::utils::bf16::bf16f32
bf16	jit_blas_utils.h	/^  bf16() : x(0) {}$/;"	f	struct:jblas::utils::bf16
bf16	jit_blas_utils.h	/^  explicit bf16(float vf32) : x(bit_cast<uint16_t>(_mm_cvtness_sbh(vf32))) {}$/;"	f	struct:jblas::utils::bf16
bf16	jit_blas_utils.h	/^  explicit bf16(float vf32) { fromfloat(vf32); }$/;"	f	struct:jblas::utils::bf16
bf16	jit_blas_utils.h	/^struct bf16 {$/;"	s	namespace:jblas::utils
bf16_ut	ut/kernel_wrapper.cpp	/^  void bf16_ut(int row, int col, int ld_src, int ld_dst, int k_offset, int kblock, int NPad) {$/;"	f	class:jblas::ut::kernel_wrapper::UT_DecompressKBlockS4FP
bf16f32	jit_blas_utils.h	/^  union bf16f32 {$/;"	u	struct:jblas::utils::bf16
bf16ut	ut/jit_blas_epilogue.cpp	/^  void bf16ut(int _M, int _N, int _M_offset, int _N_offset, int _cpy_M, int _cpy_N) {$/;"	f	class:jblas::ut::UT_AccumulatorWriteBack
bh	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
bit4x2	jit_blas_utils.h	/^  bit4x2() : x(0), y(0) {}$/;"	f	struct:jblas::utils::bit4x2
bit4x2	jit_blas_utils.h	/^  bit4x2(int8_t v) : x(v), y(v) {}$/;"	f	struct:jblas::utils::bit4x2
bit4x2	jit_blas_utils.h	/^struct bit4x2 {$/;"	s	namespace:jblas::utils
bit_	xbyak/xbyak.h	/^	const uint32_t bit_;$/;"	m	class:Xbyak::AddressFrame
bit_cast	jit_blas_utils.h	/^inline const T2 bit_cast(T1 i) {$/;"	f	namespace:jblas::utils
bl	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
blendpd	xbyak/xbyak_mnemonic.h	/^void blendpd(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x0D, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
blendps	xbyak/xbyak_mnemonic.h	/^void blendps(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x0C, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
blendvpd	xbyak/xbyak_mnemonic.h	/^void blendvpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x15, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
blendvps	xbyak/xbyak_mnemonic.h	/^void blendvps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x14, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
blsi	xbyak/xbyak_mnemonic.h	/^void blsi(const Reg32e& r, const Operand& op) { opGpr(Reg32e(3, r.getBit()), op, r, T_0F38, 0xf3, false); }$/;"	f
blsmsk	xbyak/xbyak_mnemonic.h	/^void blsmsk(const Reg32e& r, const Operand& op) { opGpr(Reg32e(2, r.getBit()), op, r, T_0F38, 0xf3, false); }$/;"	f
blsr	xbyak/xbyak_mnemonic.h	/^void blsr(const Reg32e& r, const Operand& op) { opGpr(Reg32e(1, r.getBit()), op, r, T_0F38, 0xf3, false); }$/;"	f
bnd	xbyak/xbyak_mnemonic.h	/^void bnd() { db(0xF2); }$/;"	f
bnd0	xbyak/xbyak.h	/^	const BoundsReg bnd0, bnd1, bnd2, bnd3;$/;"	m	class:Xbyak::CodeGenerator
bnd1	xbyak/xbyak.h	/^	const BoundsReg bnd0, bnd1, bnd2, bnd3;$/;"	m	class:Xbyak::CodeGenerator
bnd2	xbyak/xbyak.h	/^	const BoundsReg bnd0, bnd1, bnd2, bnd3;$/;"	m	class:Xbyak::CodeGenerator
bnd3	xbyak/xbyak.h	/^	const BoundsReg bnd0, bnd1, bnd2, bnd3;$/;"	m	class:Xbyak::CodeGenerator
bndcl	xbyak/xbyak_mnemonic.h	/^void bndcl(const BoundsReg& bnd, const Operand& op) { db(0xF3); opR_ModM(op, i32e, bnd.getIdx(), 0x0F, 0x1A, NONE, !op.isMEM()); }$/;"	f
bndcn	xbyak/xbyak_mnemonic.h	/^void bndcn(const BoundsReg& bnd, const Operand& op) { db(0xF2); opR_ModM(op, i32e, bnd.getIdx(), 0x0F, 0x1B, NONE, !op.isMEM()); }$/;"	f
bndcu	xbyak/xbyak_mnemonic.h	/^void bndcu(const BoundsReg& bnd, const Operand& op) { db(0xF2); opR_ModM(op, i32e, bnd.getIdx(), 0x0F, 0x1A, NONE, !op.isMEM()); }$/;"	f
bndldx	xbyak/xbyak_mnemonic.h	/^void bndldx(const BoundsReg& bnd, const Address& addr) { opMIB(addr, bnd, 0x0F, 0x1A); }$/;"	f
bndmk	xbyak/xbyak_mnemonic.h	/^void bndmk(const BoundsReg& bnd, const Address& addr) { db(0xF3); opModM(addr, bnd, 0x0F, 0x1B); }$/;"	f
bndmov	xbyak/xbyak_mnemonic.h	/^void bndmov(const Address& addr, const BoundsReg& bnd) { db(0x66); opModM(addr, bnd, 0x0F, 0x1B); }$/;"	f
bndmov	xbyak/xbyak_mnemonic.h	/^void bndmov(const BoundsReg& bnd, const Operand& op) { db(0x66); opModRM(bnd, op, op.isBNDREG(), op.isMEM(), 0x0F, 0x1A); }$/;"	f
bndstx	xbyak/xbyak_mnemonic.h	/^void bndstx(const Address& addr, const BoundsReg& bnd) { opMIB(addr, bnd, 0x0F, 0x1B); }$/;"	f
bp	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
bpl	xbyak/xbyak.h	/^	const Reg8 spl, bpl, sil, dil;$/;"	m	class:Xbyak::CodeGenerator
broadcast_	xbyak/xbyak.h	/^	bool broadcast_;$/;"	m	class:Xbyak::Address
broadcast_	xbyak/xbyak.h	/^	const bool broadcast_;$/;"	m	class:Xbyak::AddressFrame
broadcast_u8	kernel_avx512f.h	/^static inline JBLAS_CODE broadcast_u8(int num, const uint8_t& srcval, uint8_t* dstptr) {$/;"	f	namespace:jblas::kernel::avx512f
broadcast_u8	kernel_ref.h	/^static inline JBLAS_CODE broadcast_u8(int num, const uint8_t& srcval, uint8_t* dstptr) {$/;"	f	namespace:jblas::kernel::ref
broadcastbf16_f32	jit_base.hpp	/^  void broadcastbf16_f32(const Xbyak::Zmm& dst, const Xbyak::Reg64& tmp, const Xbyak::Address& addr) {$/;"	f	class:jblas::xbyak::JitAvx512f
bsf	xbyak/xbyak_mnemonic.h	/^void bsf(const Reg&reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0xBC); }$/;"	f
bsr	xbyak/xbyak_mnemonic.h	/^void bsr(const Reg&reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0xBD); }$/;"	f
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
bstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
bswap	xbyak/xbyak_mnemonic.h	/^void bswap(const Reg32e& reg) { opModR(Reg32(1), reg, 0x0F); }$/;"	f
bt	xbyak/xbyak_mnemonic.h	/^void bt(const Operand& op, const Reg& reg) { opModRM(reg, op, op.isREG(16|32|64) && op.getBit() == reg.getBit(), op.isMEM(), 0x0f, 0xA3); }$/;"	f
bt	xbyak/xbyak_mnemonic.h	/^void bt(const Operand& op, uint8_t imm) { opR_ModM(op, 16|32|64, 4, 0x0f, 0xba, NONE, false, 1); db(imm); }$/;"	f
btc	xbyak/xbyak_mnemonic.h	/^void btc(const Operand& op, const Reg& reg) { opModRM(reg, op, op.isREG(16|32|64) && op.getBit() == reg.getBit(), op.isMEM(), 0x0f, 0xBB); }$/;"	f
btc	xbyak/xbyak_mnemonic.h	/^void btc(const Operand& op, uint8_t imm) { opR_ModM(op, 16|32|64, 7, 0x0f, 0xba, NONE, false, 1); db(imm); }$/;"	f
btr	xbyak/xbyak_mnemonic.h	/^void btr(const Operand& op, const Reg& reg) { opModRM(reg, op, op.isREG(16|32|64) && op.getBit() == reg.getBit(), op.isMEM(), 0x0f, 0xB3); }$/;"	f
btr	xbyak/xbyak_mnemonic.h	/^void btr(const Operand& op, uint8_t imm) { opR_ModM(op, 16|32|64, 6, 0x0f, 0xba, NONE, false, 1); db(imm); }$/;"	f
bts	xbyak/xbyak_mnemonic.h	/^void bts(const Operand& op, const Reg& reg) { opModRM(reg, op, op.isREG(16|32|64) && op.getBit() == reg.getBit(), op.isMEM(), 0x0f, 0xAB); }$/;"	f
bts	xbyak/xbyak_mnemonic.h	/^void bts(const Operand& op, uint8_t imm) { opR_ModM(op, 16|32|64, 5, 0x0f, 0xba, NONE, false, 1); db(imm); }$/;"	f
buffer_error	ut/jit_blas_ut.h	/^float buffer_error(float* ref, float* tar, size_t size, float thres) {$/;"	f	namespace:jblas::ut
buffer_error	ut/jit_blas_ut.h	/^float buffer_error(jblas::utils::bf16* ref, jblas::utils::bf16* tar, size_t size, jblas::utils::bf16 thres) {$/;"	f	namespace:jblas::ut
buffer_error	ut/jit_blas_ut.h	/^static float buffer_error(_T* ref, _T* tar, size_t size, _T thres = _T(0)) {$/;"	f	namespace:jblas::ut
buffer_error_2d	ut/jit_blas_ut.h	/^static float buffer_error_2d(_T* ref, _T* tar, size_t row, size_t col, size_t refstep, size_t tarstep,$/;"	f	namespace:jblas::ut
buffer_remove_bf16_err	ut/jit_blas_ut.h	/^inline void buffer_remove_bf16_err(float* buf, size_t size) {$/;"	f	namespace:jblas::ut
bx	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
byte	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
bzhi	xbyak/xbyak_mnemonic.h	/^void bzhi(const Reg32e& r1, const Operand& op, const Reg32e& r2) { opGpr(r1, op, r2, T_0F38, 0xf5, false); }$/;"	f
calcJmpAddress	xbyak/xbyak.h	/^	void calcJmpAddress()$/;"	f	class:Xbyak::CodeArray
calc_ref	ut/jit_blas_ut.h	/^  void calc_ref(float alpha, float beta) {$/;"	f	struct:jblas::ut::UT_GEMMData_Row_bf16
calc_ref	ut/jit_blas_ut.h	/^  void calc_ref(float alpha, float beta) {$/;"	f	struct:jblas::ut::UT_GEMMData_Row_f32
calc_ref	ut/jit_blas_ut.h	/^  void calc_ref(float alpha, float beta) {$/;"	f	struct:jblas::ut::UT_GEMMData_Row_fp16
calc_ref	ut/jit_blas_ut.h	/^  void calc_ref(float alpha, float beta) {$/;"	f	struct:jblas::ut::UT_GEMMData_Row_u8s8
calc_valid_threads	jit_blas_utils.h	/^  void calc_valid_threads() { mValidThreads = mColThreads * int(std::ceil(float(mRows) \/ mThdRow)); }$/;"	f	struct:jblas::utils::parallel::Parallel2D
calculate_score	jit_blas_utils.h	/^  float calculate_score() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
calculate_score	jit_blas_utils.h	/^  float calculate_score() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
calculate_score	jit_blas_utils.h	/^  float calculate_score() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
call	xbyak/xbyak.h	/^	void call(Ret(*func)(Params...)) { call(reinterpret_cast<const void*>(func)); }$/;"	f	class:Xbyak::CodeGenerator
call	xbyak/xbyak.h	/^	void call(const Label& label) { opJmp(label, T_NEAR, 0, 0xE8, 0); }$/;"	f	class:Xbyak::CodeGenerator
call	xbyak/xbyak.h	/^	void call(const Operand& op, LabelType type = T_AUTO) { opJmpOp(op, type, 2); }$/;"	f	class:Xbyak::CodeGenerator
call	xbyak/xbyak.h	/^	void call(const char *label) { call(std::string(label)); }$/;"	f	class:Xbyak::CodeGenerator
call	xbyak/xbyak.h	/^	void call(const void *addr) { opJmpAbs(addr, T_NEAR, 0, 0xE8); }$/;"	f	class:Xbyak::CodeGenerator
call	xbyak/xbyak.h	/^	void call(std::string label) { opJmp(label, T_NEAR, 0, 0xE8, 0); }$/;"	f	class:Xbyak::CodeGenerator
cast	jit_blas_utils.h	/^bf16 cast(float _src) {$/;"	f	namespace:jblas::utils
cast	jit_blas_utils.h	/^float cast(bf16 _src) {$/;"	f	namespace:jblas::utils
cast	jit_blas_utils.h	/^int8_t cast(float _src) {$/;"	f	namespace:jblas::utils
cast	jit_blas_utils.h	/^static inline _DSTT cast(_SRCT _src) {$/;"	f	namespace:jblas::utils
cast	jit_blas_utils.h	/^uint8_t cast(float _src) {$/;"	f	namespace:jblas::utils
cbw	xbyak/xbyak_mnemonic.h	/^void cbw() { db(0x66); db(0x98); }$/;"	f
cdq	xbyak/xbyak_mnemonic.h	/^void cdq() { db(0x99); }$/;"	f
cdqe	xbyak/xbyak_mnemonic.h	/^void cdqe() { db(0x48); db(0x98); }$/;"	f
cfg	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
cfg	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
cfg	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
cfg	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
cfg	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
cfg	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
ch	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
changeBit	xbyak/xbyak.h	/^	Reg changeBit(int bit) const { Reg r(*this); r.setBit(bit); return r; }$/;"	f	class:Xbyak::Reg
checkCvt1	xbyak/xbyak.h	/^	void checkCvt1(const Operand& x, const Operand& op) const$/;"	f	class:Xbyak::CodeGenerator
checkCvt2	xbyak/xbyak.h	/^	void checkCvt2(const Xmm& x, const Operand& op) const$/;"	f	class:Xbyak::CodeGenerator
checkCvt4	xbyak/xbyak.h	/^	void checkCvt4(const Xmm& x, const Operand& op) const$/;"	f	class:Xbyak::CodeGenerator
checkGather2	xbyak/xbyak.h	/^	void checkGather2(const Xmm& x1, const Reg& x2, int mode) const$/;"	f	class:Xbyak::CodeGenerator
cl	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
clabelDefList_	xbyak/xbyak.h	/^	ClabelDefList clabelDefList_;$/;"	m	class:Xbyak::LabelManager
clabelUndefList_	xbyak/xbyak.h	/^	ClabelUndefList clabelUndefList_;$/;"	m	class:Xbyak::LabelManager
clc	xbyak/xbyak_mnemonic.h	/^void clc() { db(0xF8); }$/;"	f
cld	xbyak/xbyak_mnemonic.h	/^void cld() { db(0xFC); }$/;"	f
cldemote	xbyak/xbyak_mnemonic.h	/^void cldemote(const Address& addr) { opMIB(addr, eax, 0x0F, 0x1C); }$/;"	f
clear	jit_blas_utils.h	/^  void clear() { startT = stime_point_t::min(); }$/;"	f	class:jblas::utils::timer
clear	jit_blas_utils.h	/^  void clear() {$/;"	f	class:jblas::utils::minmax_statistics
clear	jit_blas_utils.h	/^  void clear() {$/;"	f	class:jblas::utils::timer_statistics_logger
clear	xbyak/xbyak.h	/^	void clear() { mgr = 0; id = 0; }$/;"	f	class:Xbyak::Label
clear	xbyak/xbyak_util.h	/^	void clear() { count_ = 0; clock_ = 0; }$/;"	f	class:Xbyak::util::Clock
clflush	xbyak/xbyak_mnemonic.h	/^void clflush(const Address& addr) { opModM(addr, Reg32(7), 0x0F, 0xAE); }$/;"	f
clflushopt	xbyak/xbyak_mnemonic.h	/^void clflushopt(const Address& addr) { db(0x66); opModM(addr, Reg32(7), 0x0F, 0xAE); }$/;"	f
cli	xbyak/xbyak_mnemonic.h	/^void cli() { db(0xFA); }$/;"	f
clock_	xbyak/xbyak_util.h	/^	uint64_t clock_;$/;"	m	class:Xbyak::util::Clock
close	xbyak/xbyak_util.h	/^	void close()$/;"	f	class:Xbyak::util::Profiler
close	xbyak/xbyak_util.h	/^	void close(bool callRet = true)$/;"	f	class:Xbyak::util::StackFrame
clui	xbyak/xbyak_mnemonic.h	/^void clui() { db(0xF3); db(0x0F); db(0x01); db(0xEE); }$/;"	f
clwb	xbyak/xbyak_mnemonic.h	/^void clwb(const Address& addr) { db(0x66); opMIB(addr, esi, 0x0F, 0xAE); }$/;"	f
clzero	xbyak/xbyak_mnemonic.h	/^void clzero() { db(0x0F); db(0x01); db(0xFC); }$/;"	f
cmc	xbyak/xbyak_mnemonic.h	/^void cmc() { db(0xF5); }$/;"	f
cmova	xbyak/xbyak_mnemonic.h	/^void cmova(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 7); }\/\/-V524$/;"	f
cmovae	xbyak/xbyak_mnemonic.h	/^void cmovae(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 3); }\/\/-V524$/;"	f
cmovb	xbyak/xbyak_mnemonic.h	/^void cmovb(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 2); }\/\/-V524$/;"	f
cmovbe	xbyak/xbyak_mnemonic.h	/^void cmovbe(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 6); }\/\/-V524$/;"	f
cmovc	xbyak/xbyak_mnemonic.h	/^void cmovc(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 2); }\/\/-V524$/;"	f
cmove	xbyak/xbyak_mnemonic.h	/^void cmove(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 4); }\/\/-V524$/;"	f
cmovg	xbyak/xbyak_mnemonic.h	/^void cmovg(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 15); }\/\/-V524$/;"	f
cmovge	xbyak/xbyak_mnemonic.h	/^void cmovge(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 13); }\/\/-V524$/;"	f
cmovl	xbyak/xbyak_mnemonic.h	/^void cmovl(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 12); }\/\/-V524$/;"	f
cmovle	xbyak/xbyak_mnemonic.h	/^void cmovle(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 14); }\/\/-V524$/;"	f
cmovna	xbyak/xbyak_mnemonic.h	/^void cmovna(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 6); }\/\/-V524$/;"	f
cmovnae	xbyak/xbyak_mnemonic.h	/^void cmovnae(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 2); }\/\/-V524$/;"	f
cmovnb	xbyak/xbyak_mnemonic.h	/^void cmovnb(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 3); }\/\/-V524$/;"	f
cmovnbe	xbyak/xbyak_mnemonic.h	/^void cmovnbe(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 7); }\/\/-V524$/;"	f
cmovnc	xbyak/xbyak_mnemonic.h	/^void cmovnc(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 3); }\/\/-V524$/;"	f
cmovne	xbyak/xbyak_mnemonic.h	/^void cmovne(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 5); }\/\/-V524$/;"	f
cmovng	xbyak/xbyak_mnemonic.h	/^void cmovng(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 14); }\/\/-V524$/;"	f
cmovnge	xbyak/xbyak_mnemonic.h	/^void cmovnge(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 12); }\/\/-V524$/;"	f
cmovnl	xbyak/xbyak_mnemonic.h	/^void cmovnl(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 13); }\/\/-V524$/;"	f
cmovnle	xbyak/xbyak_mnemonic.h	/^void cmovnle(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 15); }\/\/-V524$/;"	f
cmovno	xbyak/xbyak_mnemonic.h	/^void cmovno(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 1); }\/\/-V524$/;"	f
cmovnp	xbyak/xbyak_mnemonic.h	/^void cmovnp(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 11); }\/\/-V524$/;"	f
cmovns	xbyak/xbyak_mnemonic.h	/^void cmovns(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 9); }\/\/-V524$/;"	f
cmovnz	xbyak/xbyak_mnemonic.h	/^void cmovnz(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 5); }\/\/-V524$/;"	f
cmovo	xbyak/xbyak_mnemonic.h	/^void cmovo(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 0); }\/\/-V524$/;"	f
cmovp	xbyak/xbyak_mnemonic.h	/^void cmovp(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 10); }\/\/-V524$/;"	f
cmovpe	xbyak/xbyak_mnemonic.h	/^void cmovpe(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 10); }\/\/-V524$/;"	f
cmovpo	xbyak/xbyak_mnemonic.h	/^void cmovpo(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 11); }\/\/-V524$/;"	f
cmovs	xbyak/xbyak_mnemonic.h	/^void cmovs(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 8); }\/\/-V524$/;"	f
cmovz	xbyak/xbyak_mnemonic.h	/^void cmovz(const Reg& reg, const Operand& op) { opModRM(reg, op, op.isREG(16 | i32e), op.isMEM(), 0x0F, 0x40 | 4); }\/\/-V524$/;"	f
cmp	xbyak/xbyak_mnemonic.h	/^void cmp(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x38, 7); }$/;"	f
cmp	xbyak/xbyak_mnemonic.h	/^void cmp(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x38); }$/;"	f
cmpbexadd	xbyak/xbyak_mnemonic.h	/^void cmpbexadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE6, false); }$/;"	f
cmpbxadd	xbyak/xbyak_mnemonic.h	/^void cmpbxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE2, false); }$/;"	f
cmpeqpd	xbyak/xbyak_mnemonic.h	/^void cmpeqpd(const Xmm& x, const Operand& op) { cmppd(x, op, 0); }$/;"	f
cmpeqps	xbyak/xbyak_mnemonic.h	/^void cmpeqps(const Xmm& x, const Operand& op) { cmpps(x, op, 0); }$/;"	f
cmpeqsd	xbyak/xbyak_mnemonic.h	/^void cmpeqsd(const Xmm& x, const Operand& op) { cmpsd(x, op, 0); }$/;"	f
cmpeqss	xbyak/xbyak_mnemonic.h	/^void cmpeqss(const Xmm& x, const Operand& op) { cmpss(x, op, 0); }$/;"	f
cmplepd	xbyak/xbyak_mnemonic.h	/^void cmplepd(const Xmm& x, const Operand& op) { cmppd(x, op, 2); }$/;"	f
cmpleps	xbyak/xbyak_mnemonic.h	/^void cmpleps(const Xmm& x, const Operand& op) { cmpps(x, op, 2); }$/;"	f
cmplesd	xbyak/xbyak_mnemonic.h	/^void cmplesd(const Xmm& x, const Operand& op) { cmpsd(x, op, 2); }$/;"	f
cmpless	xbyak/xbyak_mnemonic.h	/^void cmpless(const Xmm& x, const Operand& op) { cmpss(x, op, 2); }$/;"	f
cmplexadd	xbyak/xbyak_mnemonic.h	/^void cmplexadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xEE, false); }$/;"	f
cmpltpd	xbyak/xbyak_mnemonic.h	/^void cmpltpd(const Xmm& x, const Operand& op) { cmppd(x, op, 1); }$/;"	f
cmpltps	xbyak/xbyak_mnemonic.h	/^void cmpltps(const Xmm& x, const Operand& op) { cmpps(x, op, 1); }$/;"	f
cmpltsd	xbyak/xbyak_mnemonic.h	/^void cmpltsd(const Xmm& x, const Operand& op) { cmpsd(x, op, 1); }$/;"	f
cmpltss	xbyak/xbyak_mnemonic.h	/^void cmpltss(const Xmm& x, const Operand& op) { cmpss(x, op, 1); }$/;"	f
cmplxadd	xbyak/xbyak_mnemonic.h	/^void cmplxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xEC, false); }$/;"	f
cmpnbexadd	xbyak/xbyak_mnemonic.h	/^void cmpnbexadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE7, false); }$/;"	f
cmpnbxadd	xbyak/xbyak_mnemonic.h	/^void cmpnbxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE3, false); }$/;"	f
cmpneqpd	xbyak/xbyak_mnemonic.h	/^void cmpneqpd(const Xmm& x, const Operand& op) { cmppd(x, op, 4); }$/;"	f
cmpneqps	xbyak/xbyak_mnemonic.h	/^void cmpneqps(const Xmm& x, const Operand& op) { cmpps(x, op, 4); }$/;"	f
cmpneqsd	xbyak/xbyak_mnemonic.h	/^void cmpneqsd(const Xmm& x, const Operand& op) { cmpsd(x, op, 4); }$/;"	f
cmpneqss	xbyak/xbyak_mnemonic.h	/^void cmpneqss(const Xmm& x, const Operand& op) { cmpss(x, op, 4); }$/;"	f
cmpnlepd	xbyak/xbyak_mnemonic.h	/^void cmpnlepd(const Xmm& x, const Operand& op) { cmppd(x, op, 6); }$/;"	f
cmpnleps	xbyak/xbyak_mnemonic.h	/^void cmpnleps(const Xmm& x, const Operand& op) { cmpps(x, op, 6); }$/;"	f
cmpnlesd	xbyak/xbyak_mnemonic.h	/^void cmpnlesd(const Xmm& x, const Operand& op) { cmpsd(x, op, 6); }$/;"	f
cmpnless	xbyak/xbyak_mnemonic.h	/^void cmpnless(const Xmm& x, const Operand& op) { cmpss(x, op, 6); }$/;"	f
cmpnlexadd	xbyak/xbyak_mnemonic.h	/^void cmpnlexadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xEF, false); }$/;"	f
cmpnltpd	xbyak/xbyak_mnemonic.h	/^void cmpnltpd(const Xmm& x, const Operand& op) { cmppd(x, op, 5); }$/;"	f
cmpnltps	xbyak/xbyak_mnemonic.h	/^void cmpnltps(const Xmm& x, const Operand& op) { cmpps(x, op, 5); }$/;"	f
cmpnltsd	xbyak/xbyak_mnemonic.h	/^void cmpnltsd(const Xmm& x, const Operand& op) { cmpsd(x, op, 5); }$/;"	f
cmpnltss	xbyak/xbyak_mnemonic.h	/^void cmpnltss(const Xmm& x, const Operand& op) { cmpss(x, op, 5); }$/;"	f
cmpnlxadd	xbyak/xbyak_mnemonic.h	/^void cmpnlxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xED, false); }$/;"	f
cmpnoxadd	xbyak/xbyak_mnemonic.h	/^void cmpnoxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE1, false); }$/;"	f
cmpnpxadd	xbyak/xbyak_mnemonic.h	/^void cmpnpxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xEB, false); }$/;"	f
cmpnsxadd	xbyak/xbyak_mnemonic.h	/^void cmpnsxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE9, false); }$/;"	f
cmpnzxadd	xbyak/xbyak_mnemonic.h	/^void cmpnzxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE5, false); }$/;"	f
cmpordpd	xbyak/xbyak_mnemonic.h	/^void cmpordpd(const Xmm& x, const Operand& op) { cmppd(x, op, 7); }$/;"	f
cmpordps	xbyak/xbyak_mnemonic.h	/^void cmpordps(const Xmm& x, const Operand& op) { cmpps(x, op, 7); }$/;"	f
cmpordsd	xbyak/xbyak_mnemonic.h	/^void cmpordsd(const Xmm& x, const Operand& op) { cmpsd(x, op, 7); }$/;"	f
cmpordss	xbyak/xbyak_mnemonic.h	/^void cmpordss(const Xmm& x, const Operand& op) { cmpss(x, op, 7); }$/;"	f
cmpoxadd	xbyak/xbyak_mnemonic.h	/^void cmpoxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE0, false); }$/;"	f
cmppd	xbyak/xbyak_mnemonic.h	/^void cmppd(const Xmm& xmm, const Operand& op, uint8_t imm8) { opGen(xmm, op, 0xC2, 0x66, isXMM_XMMorMEM, imm8); }$/;"	f
cmpps	xbyak/xbyak_mnemonic.h	/^void cmpps(const Xmm& xmm, const Operand& op, uint8_t imm8) { opGen(xmm, op, 0xC2, 0x100, isXMM_XMMorMEM, imm8); }$/;"	f
cmppxadd	xbyak/xbyak_mnemonic.h	/^void cmppxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xEA, false); }$/;"	f
cmpsb	xbyak/xbyak_mnemonic.h	/^void cmpsb() { db(0xA6); }$/;"	f
cmpsd	xbyak/xbyak_mnemonic.h	/^void cmpsd() { db(0xA7); }$/;"	f
cmpsd	xbyak/xbyak_mnemonic.h	/^void cmpsd(const Xmm& xmm, const Operand& op, uint8_t imm8) { opGen(xmm, op, 0xC2, 0xF2, isXMM_XMMorMEM, imm8); }$/;"	f
cmpsq	xbyak/xbyak_mnemonic.h	/^void cmpsq() { db(0x48); db(0xA7); }$/;"	f
cmpss	xbyak/xbyak_mnemonic.h	/^void cmpss(const Xmm& xmm, const Operand& op, uint8_t imm8) { opGen(xmm, op, 0xC2, 0xF3, isXMM_XMMorMEM, imm8); }$/;"	f
cmpsw	xbyak/xbyak_mnemonic.h	/^void cmpsw() { db(0x66); db(0xA7); }$/;"	f
cmpsxadd	xbyak/xbyak_mnemonic.h	/^void cmpsxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE8, false); }$/;"	f
cmpunordpd	xbyak/xbyak_mnemonic.h	/^void cmpunordpd(const Xmm& x, const Operand& op) { cmppd(x, op, 3); }$/;"	f
cmpunordps	xbyak/xbyak_mnemonic.h	/^void cmpunordps(const Xmm& x, const Operand& op) { cmpps(x, op, 3); }$/;"	f
cmpunordsd	xbyak/xbyak_mnemonic.h	/^void cmpunordsd(const Xmm& x, const Operand& op) { cmpsd(x, op, 3); }$/;"	f
cmpunordss	xbyak/xbyak_mnemonic.h	/^void cmpunordss(const Xmm& x, const Operand& op) { cmpss(x, op, 3); }$/;"	f
cmpxchg	xbyak/xbyak_mnemonic.h	/^void cmpxchg(const Operand& op, const Reg& reg) { opModRM(reg, op, (op.isREG() && reg.isREG() && op.getBit() == reg.getBit()), op.isMEM(), 0x0F, 0xB0 | (reg.isBit(8) ? 0 : 1)); }$/;"	f
cmpxchg16b	xbyak/xbyak_mnemonic.h	/^void cmpxchg16b(const Address& addr) { opModM(addr, Reg64(1), 0x0F, 0xC7); }$/;"	f
cmpxchg8b	xbyak/xbyak_mnemonic.h	/^void cmpxchg8b(const Address& addr) { opModM(addr, Reg32(1), 0x0F, 0xC7); }$/;"	f
cmpzxadd	xbyak/xbyak_mnemonic.h	/^void cmpzxadd(const Address& addr, const Reg32e& r1, const Reg32e& r2) { opGpr(r1, addr, r2, T_66 | T_0F38, 0xE4, false); }$/;"	f
codeOffset	xbyak/xbyak.h	/^		size_t codeOffset; \/\/ position to write$/;"	m	struct:Xbyak::CodeArray::AddrInfo
code_	xbyak/xbyak_util.h	/^	Xbyak::CodeGenerator *code_;$/;"	m	class:Xbyak::util::StackFrame
col	kernel_jit.h	/^      int row, col;$/;"	m	struct:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F::params
col	kernel_jit.h	/^    int row, col;$/;"	m	struct:jblas::kernel::jit::JitMemcpy2DAvx512f::params
col	kernel_jit.h	/^  int col;$/;"	m	struct:decompress_block_s4_f32_codegen_param
colidx	jit_blas_weight_compression.h	/^    const int rowidx, colidx;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
colidx	jit_blas_wrapper.h	/^    const int rowidx, colidx;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
colsize	jit_blas_weight_compression.h	/^    const int rowsize, colsize;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
colsize	jit_blas_wrapper.h	/^    const int rowsize, colsize;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
comisd	xbyak/xbyak_mnemonic.h	/^void comisd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x2F, 0x66, isXMM_XMMorMEM); }$/;"	f
comiss	xbyak/xbyak_mnemonic.h	/^void comiss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x2F, 0x100, isXMM_XMMorMEM); }$/;"	f
compressWeight	jit_blas_weight_compression.h	/^  void compressWeight(const int N, const int K, const int8_t* B, const int ldb, utils::bit4x2* dstptr) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS4ScaleFp32
compress_f4	kernel_ref.h	/^static inline JBLAS_CODE compress_f4(const int8_t* srcptr, jblas::utils::f4x2* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
compress_s8_s4	kernel_ref.h	/^static inline JBLAS_CODE compress_s8_s4(const int8_t* srcptr, jblas::utils::int4x2* dstptr, int row, int col,$/;"	f	namespace:jblas::kernel::ref
compute	jit_blas_transformer.h	/^  JBLAS_CODE compute(const Arguments& _param, Parallel _paral = Parallel()) {$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight
compute	jit_blas_transformer.h	/^  JBLAS_CODE compute(const Arguments& _param, Parallel _paral = Parallel()) {$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfacePackWeight
compute	jit_blas_weight_compression.h	/^  JBLAS_CODE compute(const Arguments& _param) {$/;"	f	class:jblas::wrapper::gemm_kblock::GemmInterfaceKblockAB
compute	jit_blas_weight_compression.h	/^  JBLAS_CODE compute(const Arguments& _param, Parallel _paral = Parallel(), Eltops... ops) {$/;"	f	class:jblas::wrapper::gemm_kblock::GemmInterfaceKBlockPackWeight
compute	jit_blas_wrapper.h	/^  JBLAS_CODE compute(const Arguments& _param) {$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmInterfaceAB
compute	jit_blas_wrapper.h	/^  JBLAS_CODE compute(const Arguments& _param, Parallel _paral = Parallel()) {$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmInterfacePackWeight
configure_tiles	jit_base.hpp	/^  static void configure_tiles(tileconfig_t& tc, int TILE_M, int TILE_N, int TILE_K, int elesize, int ANum, int BNum,$/;"	f	class:jblas::xbyak::JitAmxtile
convert	jit_blas_utils.h	/^  static int8_t convert(int8_t src) {$/;"	f	struct:jblas::utils::int4x2
convert_s4_s8	kernel_avx512f.h	/^static inline void convert_s4_s8(int8_t* dstptr, int8_t* srcptr, __m512i vmask, int LoadMask) {$/;"	f	namespace:jblas::kernel::avx512f
convert_s4_s8	kernel_jit.h	/^  static inline void convert_s4_s8(convert_s4_s8_param p) {$/;"	f	class:jblas::kernel::jit::DequanKBlockS4F32
convert_s4_s8_24_avx2	kernel_avx2.h	/^static inline void convert_s4_s8_24_avx2(int8_t* dstptr, int8_t* srcptr, __m256i vmask) {$/;"	f	namespace:jblas::kernel::avx2
convert_s4_s8_48_avx2	kernel_avx2.h	/^static inline void convert_s4_s8_48_avx2(int8_t* dstptr, int8_t* srcptr, __m256i vmask) {$/;"	f	namespace:jblas::kernel::avx2
convert_s4_s8_64_avx2	kernel_avx2.h	/^static inline void convert_s4_s8_64_avx2(int8_t* dstptr, int8_t* srcptr, __m256i vmask) {$/;"	f	namespace:jblas::kernel::avx2
convert_s4_s8_param	kernel_jit.h	/^  struct convert_s4_s8_param {$/;"	s	class:jblas::kernel::jit::DequanKBlockS4F32
copy	ut/kernel_jit.cpp	/^namespace copy {$/;"	n	namespace:jblas::ut::jit	file:
copyAndSetIdx	xbyak/xbyak.h	/^	Xmm copyAndSetIdx(int idx) const { Xmm ret(*this); ret.setIdx(idx); return ret; }$/;"	f	struct:Xbyak::Xmm
copyAndSetKind	xbyak/xbyak.h	/^	Xmm copyAndSetKind(Operand::Kind kind) const { Xmm ret(*this); ret.setKind(kind); return ret; }$/;"	f	struct:Xbyak::Xmm
coresSharignDataCache_	xbyak/xbyak_util.h	/^	uint32_t coresSharignDataCache_[maxNumberCacheLevels];$/;"	m	class:Xbyak::util::Cpu
count	jit_blas_utils.h	/^  size_t count;$/;"	m	class:jblas::utils::minmax_statistics
count_	xbyak/xbyak_util.h	/^	int count_;$/;"	m	class:Xbyak::util::Clock
cpuid	xbyak/xbyak_mnemonic.h	/^void cpuid() { db(0x0F); db(0xA2); }$/;"	f
cqo	xbyak/xbyak_mnemonic.h	/^void cqo() { db(0x48); db(0x99); }$/;"	f
crc32	xbyak/xbyak_mnemonic.h	/^void crc32(const Reg32e& reg, const Operand& op) { if (reg.isBit(32) && op.isBit(16)) db(0x66); db(0xF2); opModRM(reg, op, op.isREG(), op.isMEM(), 0x0F, 0x38, 0xF0 | (op.isBit(8) ? 0 : 1)); }$/;"	f
createParallel	jit_blas_prologue.h	/^  Parallel createParallel(int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32AsymU8Quantize
createParallel	jit_blas_prologue.h	/^  Parallel createParallel(int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32SymS8Quantize
createParallel	jit_blas_prologue.h	/^  Parallel createParallel(int m, int k, int kblock) {$/;"	f	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
createParallel	jit_blas_prologue.h	/^  Parallel createParallel(int m, int k, int kblock) {$/;"	f	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
createParallel	jit_blas_prologue.h	/^  Parallel createParallel(int n, int k) {$/;"	f	class:jblas::prologue::gemm::WeightPack
createParallel	jit_blas_transformer.h	/^  Parallel createParallel(int M = 0, int N = 0, int K = 0, int Batch = 1, int KBlock = 0) {$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight
createParallel	jit_blas_transformer.h	/^  Parallel createParallel(int M = 0, int N = 0, int K = 0, int Batch = 1, int KBlock = 0) {$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfacePackWeight
createParallel	jit_blas_weight_compression.h	/^  Parallel createParallel(const int N, const int K) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32PerChannelN
createParallel	jit_blas_weight_compression.h	/^  Parallel createParallel(const int N, const int K, const int blocksize) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
createParallel	jit_blas_weight_compression.h	/^  Parallel createParallel(int M = 0, int N = 0, int K = 0, int KBlock = 0) {$/;"	f	class:jblas::wrapper::gemm_kblock::GemmInterfaceKBlockPackWeight
createParallel	jit_blas_wrapper.h	/^  Parallel createParallel(int M = 0, int N = 0, int K = 0) {$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmInterfacePackWeight
createStorage	jit_blas_prologue.h	/^  QParam* createStorage(int m, int k, int kblock, int8_t* workspace) {$/;"	f	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
createStorage	jit_blas_prologue.h	/^  QParam* createStorage(int m, int k, int kblock, int8_t* workspace) {$/;"	f	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
createStorage	jit_blas_prologue.h	/^  QParam* createStorage(int m, int k, int8_t* workspace) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32AsymU8Quantize
createStorage	jit_blas_prologue.h	/^  QParam* createStorage(int m, int k, int8_t* workspace) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32SymS8Quantize
createStorage	jit_blas_prologue.h	/^  StorageWeight* createStorage(int n, int k, int8_t* workspace) {$/;"	f	class:jblas::prologue::gemm::WeightPack
createStorage	jit_blas_weight_compression.h	/^  virtual PackedWeight* createStorage(const int N, const int K) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32PerChannelN
createStorage	jit_blas_weight_compression.h	/^  virtual PackedWeight* createStorage(const int N, const int K, int blocksize) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
cs	xbyak/xbyak.h	/^		es, cs, ss, ds, fs, gs$/;"	e	enum:Xbyak::Segment::__anon6
cs	xbyak/xbyak.h	/^	const Segment es, cs, ss, ds, fs, gs;$/;"	m	class:Xbyak::CodeGenerator
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
cstep	jit_blas_gemm.h	/^    int astep, bstep, cstep;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
cstep	jit_blas_gemm.h	/^    int astep, cstep;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
cstep	jit_blas_gemm.h	/^    int astep, cstep;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
cvt16	xbyak/xbyak.h	/^inline Reg16 Reg::cvt16() const$/;"	f	class:Xbyak::Reg
cvt32	xbyak/xbyak.h	/^inline Reg32 Reg::cvt32() const$/;"	f	class:Xbyak::Reg
cvt64	xbyak/xbyak.h	/^inline Reg64 Reg::cvt64() const$/;"	f	class:Xbyak::Reg
cvt8	xbyak/xbyak.h	/^inline Reg8 Reg::cvt8() const$/;"	f	class:Xbyak::Reg
cvtIdx0	xbyak/xbyak.h	/^	const Xmm& cvtIdx0(const Operand& x) const$/;"	f	class:Xbyak::CodeGenerator
cvt_fp32_bf16	jit_base.hpp	/^  void cvt_fp32_bf16(const Xbyak::Ymm& _bf16, const Xbyak::Zmm& _fp32) { vcvtneps2bf16(_bf16, _fp32); }$/;"	f	class:jblas::xbyak::JitAmxbf16
cvt_fp32_bf16	jit_base.hpp	/^  void cvt_fp32_bf16(const Xbyak::Ymm& _bf16, const Xbyak::Zmm& _fp32) {$/;"	f	class:jblas::xbyak::JitAvx512f
cvtdq2pd	xbyak/xbyak_mnemonic.h	/^void cvtdq2pd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xE6, 0xF3, isXMM_XMMorMEM); }$/;"	f
cvtdq2ps	xbyak/xbyak_mnemonic.h	/^void cvtdq2ps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5B, 0x100, isXMM_XMMorMEM); }$/;"	f
cvtpd2dq	xbyak/xbyak_mnemonic.h	/^void cvtpd2dq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xE6, 0xF2, isXMM_XMMorMEM); }$/;"	f
cvtpd2pi	xbyak/xbyak_mnemonic.h	/^void cvtpd2pi(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2D, 0x66, isMMX_XMMorMEM); }$/;"	f
cvtpd2ps	xbyak/xbyak_mnemonic.h	/^void cvtpd2ps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5A, 0x66, isXMM_XMMorMEM); }$/;"	f
cvtpi2pd	xbyak/xbyak_mnemonic.h	/^void cvtpi2pd(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2A, 0x66, isXMM_MMXorMEM); }$/;"	f
cvtpi2ps	xbyak/xbyak_mnemonic.h	/^void cvtpi2ps(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2A, 0x100, isXMM_MMXorMEM); }$/;"	f
cvtps2dq	xbyak/xbyak_mnemonic.h	/^void cvtps2dq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5B, 0x66, isXMM_XMMorMEM); }$/;"	f
cvtps2pd	xbyak/xbyak_mnemonic.h	/^void cvtps2pd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5A, 0x100, isXMM_XMMorMEM); }$/;"	f
cvtps2pi	xbyak/xbyak_mnemonic.h	/^void cvtps2pi(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2D, 0x100, isMMX_XMMorMEM); }$/;"	f
cvtsd2si	xbyak/xbyak_mnemonic.h	/^void cvtsd2si(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2D, 0xF2, isREG32_XMMorMEM); }$/;"	f
cvtsd2ss	xbyak/xbyak_mnemonic.h	/^void cvtsd2ss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5A, 0xF2, isXMM_XMMorMEM); }$/;"	f
cvtsi2sd	xbyak/xbyak_mnemonic.h	/^void cvtsi2sd(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2A, 0xF2, isXMM_REG32orMEM); }$/;"	f
cvtsi2ss	xbyak/xbyak_mnemonic.h	/^void cvtsi2ss(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2A, 0xF3, isXMM_REG32orMEM); }$/;"	f
cvtss2sd	xbyak/xbyak_mnemonic.h	/^void cvtss2sd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5A, 0xF3, isXMM_XMMorMEM); }$/;"	f
cvtss2si	xbyak/xbyak_mnemonic.h	/^void cvtss2si(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2D, 0xF3, isREG32_XMMorMEM); }$/;"	f
cvttpd2dq	xbyak/xbyak_mnemonic.h	/^void cvttpd2dq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xE6, 0x66, isXMM_XMMorMEM); }$/;"	f
cvttpd2pi	xbyak/xbyak_mnemonic.h	/^void cvttpd2pi(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2C, 0x66, isMMX_XMMorMEM); }$/;"	f
cvttps2dq	xbyak/xbyak_mnemonic.h	/^void cvttps2dq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5B, 0xF3, isXMM_XMMorMEM); }$/;"	f
cvttps2pi	xbyak/xbyak_mnemonic.h	/^void cvttps2pi(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2C, 0x100, isMMX_XMMorMEM); }$/;"	f
cvttsd2si	xbyak/xbyak_mnemonic.h	/^void cvttsd2si(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2C, 0xF2, isREG32_XMMorMEM); }$/;"	f
cvttss2si	xbyak/xbyak_mnemonic.h	/^void cvttss2si(const Operand& reg, const Operand& op) { opGen(reg, op, 0x2C, 0xF3, isREG32_XMMorMEM); }$/;"	f
cwd	xbyak/xbyak_mnemonic.h	/^void cwd() { db(0x66); db(0x99); }$/;"	f
cwde	xbyak/xbyak_mnemonic.h	/^void cwde() { db(0x98); }$/;"	f
cx	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
daa	xbyak/xbyak_mnemonic.h	/^void daa() { db(0x27); }$/;"	f
das	xbyak/xbyak_mnemonic.h	/^void das() { db(0x2F); }$/;"	f
data	jit_blas_utils.h	/^  _T* data() const { return mPtr; }$/;"	f	class:jblas::utils::aligned_vector
data	ut/jit_blas_ut.h	/^  int8_t* data() { return data_.data(); }$/;"	f	struct:jblas::ut::UT_vector_s8
data	ut/jit_blas_ut.h	/^  uint8_t* data() { return data_.data(); }$/;"	f	struct:jblas::ut::UT_vector_u8
dataCacheLevels_	xbyak/xbyak_util.h	/^	uint32_t dataCacheLevels_;$/;"	m	class:Xbyak::util::Cpu
dataCacheSize_	xbyak/xbyak_util.h	/^	uint32_t dataCacheSize_[maxNumberCacheLevels];$/;"	m	class:Xbyak::util::Cpu
data_	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<int8_t> data_;$/;"	m	struct:jblas::ut::UT_vector_s8
data_	ut/jit_blas_ut.h	/^  utils::aligned_vector<uint8_t> data_;$/;"	m	struct:jblas::ut::UT_vector_u8
db	xbyak/xbyak.h	/^	void db(const uint8_t *code, size_t codeSize)$/;"	f	class:Xbyak::CodeArray
db	xbyak/xbyak.h	/^	void db(int code)$/;"	f	class:Xbyak::CodeArray
db	xbyak/xbyak.h	/^	void db(uint64_t code, size_t codeSize)$/;"	f	class:Xbyak::CodeArray
dd	xbyak/xbyak.h	/^	void dd(uint32_t code) { db(code, 4); }$/;"	f	class:Xbyak::CodeArray
dec	xbyak/xbyak_mnemonic.h	/^void dec(const Operand& op) { opIncDec(op, 0x48, 1); }$/;"	f
decRefCount	xbyak/xbyak.h	/^	void decRefCount(int id, Label *label)$/;"	f	class:Xbyak::LabelManager
decompress_block_s4_f32	kernel_jit.h	/^    decompress_block_s4_f32(decompress_block_s4_f32_codegen_param p) : Xbyak::CodeGenerator(128 * 1024) {$/;"	f	class:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32
decompress_block_s4_f32	kernel_jit.h	/^  class decompress_block_s4_f32 : protected Xbyak::CodeGenerator {$/;"	c	class:jblas::kernel::jit::DequanKBlockS4F32
decompress_block_s4_f32_codegen_param	kernel_jit.h	/^struct decompress_block_s4_f32_codegen_param {$/;"	s
decompress_kblock_bit4_bf16_asym	kernel_avx512f.h	/^static inline JBLAS_CODE decompress_kblock_bit4_bf16_asym(utils::bit4x2* srcptr, utils::bf16* dstptr, int row, int col,$/;"	f	namespace:jblas::kernel::avx512f
decompress_kblock_bit4_bf16_sym	kernel_avx512f.h	/^static inline JBLAS_CODE decompress_kblock_bit4_bf16_sym(utils::bit4x2* srcptr, utils::bf16* dstptr, int row, int col,$/;"	f	namespace:jblas::kernel::avx512f
decompress_kblock_bit4_fp32	kernel_avx512f.h	/^static inline JBLAS_CODE decompress_kblock_bit4_fp32(utils::bit4x2* srcptr, float* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::avx512f
decompress_kblock_f4_fp	kernel_avx512f.h	/^static inline JBLAS_CODE decompress_kblock_f4_fp(utils::f4x2* srcptr, _DST_T* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::avx512f
decompress_kblock_f4_fp	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_f4_fp(utils::f4x2* srcptr, float* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	namespace:jblas::kernel::ref
decompress_kblock_f4_fp	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_f4_fp(utils::f4x2* srcptr, utils::bf16* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
decompress_kblock_f4_fp_packrow	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_f4_fp_packrow(utils::f4x2* srcptr, float* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
decompress_kblock_s4_fp	kernel_avx512f.h	/^static inline JBLAS_CODE decompress_kblock_s4_fp(utils::int4x2* srcptr, _DST_T* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::avx512f
decompress_kblock_s4_fp	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_s4_fp(utils::int4x2* srcptr, float* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
decompress_kblock_s4_fp	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_s4_fp(utils::int4x2* srcptr, utils::bf16* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
decompress_kblock_s4_fp_packrow	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_s4_fp_packrow(utils::int4x2* srcptr, float* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
decompress_kblock_s8_f32	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_s8_f32(int8_t* srcptr, float* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	namespace:jblas::kernel::ref
decompress_kblock_s8_f32_packrow	kernel_ref.h	/^inline JBLAS_CODE decompress_kblock_s8_f32_packrow(int8_t* srcptr, float* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
decompress_load_scale	kernel_jit.h	/^  static inline void decompress_load_scale(Xbyak::CodeGenerator* jit, int zmm_scale_num,$/;"	f	class:jblas::kernel::jit::DequanKBlockS4F32
decompress_s4_f32	kernel_ref.h	/^static inline JBLAS_CODE decompress_s4_f32(jblas::utils::int4x2* srcptr, float* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
decompress_s4_s8	kernel_avx512f.h	/^static inline JBLAS_CODE decompress_s4_s8(utils::int4x2* srcptr, int8_t* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::avx512f
decompress_s4_s8	kernel_jit.h	/^static inline JBLAS_CODE decompress_s4_s8(utils::int4x2* srcptr, int8_t* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::jit
decompress_s4_s8	kernel_ref.h	/^inline JBLAS_CODE decompress_s4_s8(utils::int4x2* srcptr, int8_t* dstptr, int row, int col, int ld_src, int ld_dst) {$/;"	f	namespace:jblas::kernel::ref
defList	xbyak/xbyak.h	/^		SlabelDefList defList;$/;"	m	struct:Xbyak::LabelManager::SlabelState
defaultAllocator_	xbyak/xbyak.h	/^	Allocator defaultAllocator_;$/;"	m	class:Xbyak::CodeArray
defaultAllocator_	xbyak/xbyak.h	/^	MmapAllocator defaultAllocator_;$/;"	m	class:Xbyak::CodeArray
defaultEncoding_	xbyak/xbyak.h	/^	PreferredEncoding defaultEncoding_;$/;"	m	class:Xbyak::CodeGenerator
defineClabel	xbyak/xbyak.h	/^	void defineClabel(Label& label)$/;"	f	class:Xbyak::LabelManager
defineSlabel	xbyak/xbyak.h	/^	void defineSlabel(std::string label)$/;"	f	class:Xbyak::LabelManager
define_inner	xbyak/xbyak.h	/^	void define_inner(DefList& defList, UndefList& undefList, const T& labelId, size_t addrOffset)$/;"	f	class:Xbyak::LabelManager
dequan_s8_bf16	kernel_ref.h	/^static inline JBLAS_CODE dequan_s8_bf16(int8_t* srcptr, uint16_t* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	namespace:jblas::kernel::ref
dequan_s8_f32	kernel_ref.h	/^static inline JBLAS_CODE dequan_s8_f32(int8_t* srcptr, float* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	namespace:jblas::kernel::ref
dequant_f4_N	kernel_avx512f.h	/^static inline void dequant_f4_N(_DST_T* dstptr, int8_t* srcptr, __m512* vscales) {$/;"	f	namespace:jblas::kernel::avx512f
dequant_s32_fp32	kernel_avx512f.h	/^static inline JBLAS_CODE dequant_s32_fp32(const int32_t* srcptr, const int srcstep, float* dstptr, const int dststep,$/;"	f	namespace:jblas::kernel::avx512f
dequant_s32_fp32	kernel_ref.h	/^static inline JBLAS_CODE dequant_s32_fp32(const int32_t* srcptr, const int srcstep, float* dstptr, const int dststep,$/;"	f	namespace:jblas::kernel::ref
dequant_s8_N	kernel_avx512f.h	/^static inline void dequant_s8_N(_DST_T* dstptr, int8_t* srcptr, __m512* vscales, __m512* vzps = nullptr) {$/;"	f	namespace:jblas::kernel::avx512f
dequant_s8_N	kernel_jit.h	/^  static inline void dequant_s8_N(Xbyak::CodeGenerator* jit, Xbyak::RegExp dst_addr, Xbyak::RegExp src_addr,$/;"	f	class:jblas::kernel::jit::DequanKBlockS4F32
dequant_s8_N_avx2	kernel_avx2.h	/^static inline void dequant_s8_N_avx2(float* dstptr, int8_t* srcptr, __m256* vscales) {$/;"	f	namespace:jblas::kernel::avx2
deserialBuffer	jit_blas_prologue.h	/^  static PackedWeight* deserialBuffer(void* serialized_buf, int memalloc = 0) {$/;"	f	class:jblas::prologue::PackedWeightParser
deserialBuffer	jit_blas_weight_compression.h	/^  static PackedWeight* deserialBuffer(void* serialized_buf, int memalloc = 0) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::PackedWeightParser
deserialize	jit_blas_utils.h	/^_T deserialize(int8_t*& buf) {$/;"	f	namespace:jblas::utils
deserializeBuffer	jit_blas_prologue.h	/^  virtual void deserializeBuffer(void* buf, int memalloc) {$/;"	f	class:jblas::prologue::PackedWeight
dh	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
di	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
dil	xbyak/xbyak.h	/^	const Reg8 spl, bpl, sil, dil;$/;"	m	class:Xbyak::CodeGenerator
disp	xbyak/xbyak.h	/^	size_t disp; \/\/ disp for [rip + disp]$/;"	m	struct:Xbyak::JmpLabel
disp_	xbyak/xbyak.h	/^	int64_t disp_;$/;"	m	struct:Xbyak::RegRip
disp_	xbyak/xbyak.h	/^	size_t disp_;$/;"	m	class:Xbyak::RegExp
displayFamily	xbyak/xbyak_util.h	/^	int displayFamily; \/\/ family + extFamily$/;"	m	class:Xbyak::util::Cpu
displayModel	xbyak/xbyak_util.h	/^	int displayModel; \/\/ model + extModel$/;"	m	class:Xbyak::util::Cpu
div	xbyak/xbyak_mnemonic.h	/^void div(const Operand& op) { opR_ModM(op, 0, 6, 0xF6); }$/;"	f
divpd	xbyak/xbyak_mnemonic.h	/^void divpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5E, 0x66, isXMM_XMMorMEM); }$/;"	f
divps	xbyak/xbyak_mnemonic.h	/^void divps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5E, 0x100, isXMM_XMMorMEM); }$/;"	f
divsd	xbyak/xbyak_mnemonic.h	/^void divsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5E, 0xF2, isXMM_XMMorMEM); }$/;"	f
divss	xbyak/xbyak_mnemonic.h	/^void divss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5E, 0xF3, isXMM_XMMorMEM); }$/;"	f
dl	xbyak/xbyak.h	/^	const Reg8 al, cl, dl, bl, ah, ch, dh, bh;$/;"	m	class:Xbyak::CodeGenerator
doCompress	jit_blas_weight_compression.h	/^  virtual JBLAS_CODE doCompress(const int8_t* srcptr, void* dstptr, int row, int col, int ld_src, int ld_dst) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS4ScaleFp32
downdiv	jit_blas_utils.h	/^static inline int downdiv(int a, int b) { return a \/ b; }$/;"	f	namespace:jblas::utils
dppd	xbyak/xbyak_mnemonic.h	/^void dppd(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x41, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
dpps	xbyak/xbyak_mnemonic.h	/^void dpps(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x40, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
dq	xbyak/xbyak.h	/^	void dq(uint64_t code) { db(code, 8); }$/;"	f	class:Xbyak::CodeArray
ds	xbyak/xbyak.h	/^		es, cs, ss, ds, fs, gs$/;"	e	enum:Xbyak::Segment::__anon6
ds	xbyak/xbyak.h	/^	const Segment es, cs, ss, ds, fs, gs;$/;"	m	class:Xbyak::CodeGenerator
dst_addr	kernel_jit.h	/^    Xbyak::RegExp dst_addr;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
dstptr	kernel_jit.h	/^      void *srcptr, *dstptr;$/;"	m	struct:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F::params
dstptr	kernel_jit.h	/^    void *srcptr, *dstptr, *elt_const_v;$/;"	m	struct:jblas::kernel::jit::JitMemcpy2DAvx512f::params
dstptr	kernel_jit.h	/^    void *srcptr, *dstptr;$/;"	m	struct:jblas::kernel::jit::DecompressS4S8_AVX512F::params
dststride	kernel_jit.h	/^      int srcstride, dststride;$/;"	m	struct:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F::params
dststride	kernel_jit.h	/^    int srcstride, dststride;$/;"	m	struct:jblas::kernel::jit::JitMemcpy2DAvx512f::params
dummyAddr	xbyak/xbyak.h	/^	static const size_t dummyAddr = 0x12345678;$/;"	m	class:Xbyak::CodeGenerator
dummyAddr	xbyak/xbyak.h	/^	static const uint64_t dummyAddr = uint64_t(0x1122334455667788ull);$/;"	m	class:Xbyak::CodeGenerator
dump	xbyak/xbyak.h	/^	void dump() const$/;"	f	class:Xbyak::CodeArray
dump	xbyak/xbyak.h	/^	void dump(bool doClear = true)$/;"	f	class:Xbyak::CodeGenerator
dump_idx	kernel_jit.h	/^    int dump_idx = 0;$/;"	m	class:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32
dw	xbyak/xbyak.h	/^	void dw(uint32_t code) { db(code, 2); }$/;"	f	class:Xbyak::CodeArray
dword	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
dx	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
e_	xbyak/xbyak.h	/^	RegExp e_;$/;"	m	class:Xbyak::Address
eax	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
ebp	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
ebx	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
ecx	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
edi	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
edx	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
elt_const_v	jit_blas_epilogue.h	/^    void* elt_const_v;$/;"	m	struct:jblas::epilogue::gemm::AccumulatorWriteBack::Param
elt_const_v	jit_blas_epilogue.h	/^    void* elt_const_v;$/;"	m	struct:jblas::epilogue::gemm::CustomAccumulatorWriteBackWithEltop::Param
elt_const_v	kernel_jit.h	/^    void *srcptr, *dstptr, *elt_const_v;$/;"	m	struct:jblas::kernel::jit::JitMemcpy2DAvx512f::params
elt_op	kernel_jit_injector.h	/^  JBLAS_ELTWISEOP elt_op;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
eltwise_injector	kernel_jit_injector.h	/^  eltwise_injector(JBLAS_ELTWISEOP eltwiseop) : elt_op(eltwiseop) { reigster_table_entries(); }$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
eltwise_injector	kernel_jit_injector.h	/^class eltwise_injector {$/;"	c	namespace:jblas::kernel::jit_injector
emms	xbyak/xbyak_mnemonic.h	/^void emms() { db(0x0F); db(0x77); }$/;"	f
end	xbyak/xbyak_util.h	/^	void end()$/;"	f	class:Xbyak::util::Clock
endOfJmp	xbyak/xbyak.h	/^	size_t endOfJmp; \/* offset from top to the end address of jmp *\/$/;"	m	struct:Xbyak::JmpLabel
endbr32	xbyak/xbyak_mnemonic.h	/^void endbr32() { db(0xF3); db(0x0F); db(0x1E); db(0xFB); }$/;"	f
endbr64	xbyak/xbyak_mnemonic.h	/^void endbr64() { db(0xF3); db(0x0F); db(0x1E); db(0xFA); }$/;"	f
enter	xbyak/xbyak_mnemonic.h	/^void enter(uint16_t x, uint8_t y) { db(0xC8); dw(x); db(y); }$/;"	f
enterLocal	xbyak/xbyak.h	/^	void enterLocal()$/;"	f	class:Xbyak::LabelManager
epilogue	jit_blas_epilogue.h	/^namespace epilogue {$/;"	n	namespace:jblas
err_	xbyak/xbyak.h	/^	int err_;$/;"	m	class:Xbyak::Error
es	xbyak/xbyak.h	/^		es, cs, ss, ds, fs, gs$/;"	e	enum:Xbyak::Segment::__anon6
es	xbyak/xbyak.h	/^	const Segment es, cs, ss, ds, fs, gs;$/;"	m	class:Xbyak::CodeGenerator
esi	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
esp	xbyak/xbyak.h	/^	const Reg32 eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	class:Xbyak::CodeGenerator
evex	xbyak/xbyak.h	/^	int evex(const Reg& reg, const Reg& base, const Operand *v, int type, int code, bool x = false, bool b = false, int aaa = 0, uint32_t VL = 0, bool Hi16Vidx = false)$/;"	f	class:Xbyak::CodeGenerator
exp_compute_vector_fwd	kernel_jit_injector.h	/^  void exp_compute_vector_fwd(const Xbyak::Zmm& zmm_src) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
exp_ln_flt_max_f	kernel_jit_injector.h	/^    exp_ln_flt_max_f,                     \/\/ logf(FLT_MAX) - max normal value$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
exp_ln_flt_min_f	kernel_jit_injector.h	/^    exp_ln_flt_min_f,                     \/\/ logf(FLT_MIN) - min normal value$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
exp_log2ef	kernel_jit_injector.h	/^    exp_log2ef,                           \/\/ 1.44269502f - formula-based for approx$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
exp_pol	kernel_jit_injector.h	/^    exp_pol,                              \/\/ see correspondent table for float values$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
exponent_bias	kernel_jit_injector.h	/^    exponent_bias,                        \/\/ (127 = 2^7 - 1), gets exponent bits$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
extFamily	xbyak/xbyak_util.h	/^	int extFamily;$/;"	m	class:Xbyak::util::Cpu
extModel	xbyak/xbyak_util.h	/^	int extModel;$/;"	m	class:Xbyak::util::Cpu
extractBit	xbyak/xbyak_util.h	/^	uint32_t extractBit(uint32_t val, uint32_t base, uint32_t end)$/;"	f	class:Xbyak::util::Cpu
extractps	xbyak/xbyak_mnemonic.h	/^void extractps(const Operand& op, const Xmm& xmm, uint8_t imm) { opExt(op, xmm, 0x17, imm); }$/;"	f
f2xm1	xbyak/xbyak_mnemonic.h	/^void f2xm1() { db(0xD9); db(0xF0); }$/;"	f
f32	jit_blas_utils.h	/^    float f32;$/;"	m	union:jblas::utils::bf16::bf16f32
f32	kernel_jit.h	/^      float* f32;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32::params
f4_dequantize	kernel_ref.h	/^inline float f4_dequantize(int8_t v, float scale) {$/;"	f	namespace:jblas::kernel::ref
f4_quantize	kernel_ref.h	/^inline int8_t f4_quantize(float x) {$/;"	f	namespace:jblas::kernel::ref
f4x2	jit_blas_utils.h	/^  f4x2() : bit4x2() {}$/;"	f	struct:jblas::utils::f4x2
f4x2	jit_blas_utils.h	/^  f4x2(int8_t v) : bit4x2(v) {}$/;"	f	struct:jblas::utils::f4x2
f4x2	jit_blas_utils.h	/^struct f4x2 : bit4x2 {$/;"	s	namespace:jblas::utils
fabs	xbyak/xbyak_mnemonic.h	/^void fabs() { db(0xD9); db(0xE1); }$/;"	f
fadd	xbyak/xbyak_mnemonic.h	/^void fadd(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 0, 0); }$/;"	f
fadd	xbyak/xbyak_mnemonic.h	/^void fadd(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xD8C0, 0xDCC0); }$/;"	f
fadd	xbyak/xbyak_mnemonic.h	/^void fadd(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xD8C0, 0xDCC0); }$/;"	f
faddp	xbyak/xbyak_mnemonic.h	/^void faddp() { db(0xDE); db(0xC1); }$/;"	f
faddp	xbyak/xbyak_mnemonic.h	/^void faddp(const Fpu& reg1) { opFpuFpu(reg1, st0, 0x0000, 0xDEC0); }$/;"	f
faddp	xbyak/xbyak_mnemonic.h	/^void faddp(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0x0000, 0xDEC0); }$/;"	f
family	xbyak/xbyak_util.h	/^	int family;$/;"	m	class:Xbyak::util::Cpu
fatal_error	jit_blas_utils.h	208;"	d
fbld	xbyak/xbyak_mnemonic.h	/^void fbld(const Address& addr) { opModM(addr, Reg32(4), 0xDF, 0x100); }$/;"	f
fbstp	xbyak/xbyak_mnemonic.h	/^void fbstp(const Address& addr) { opModM(addr, Reg32(6), 0xDF, 0x100); }$/;"	f
fchs	xbyak/xbyak_mnemonic.h	/^void fchs() { db(0xD9); db(0xE0); }$/;"	f
fclex	xbyak/xbyak_mnemonic.h	/^void fclex() { db(0x9B); db(0xDB); db(0xE2); }$/;"	f
fcmovb	xbyak/xbyak_mnemonic.h	/^void fcmovb(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDAC0, 0x00C0); }$/;"	f
fcmovb	xbyak/xbyak_mnemonic.h	/^void fcmovb(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDAC0, 0x00C0); }$/;"	f
fcmovbe	xbyak/xbyak_mnemonic.h	/^void fcmovbe(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDAD0, 0x00D0); }$/;"	f
fcmovbe	xbyak/xbyak_mnemonic.h	/^void fcmovbe(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDAD0, 0x00D0); }$/;"	f
fcmove	xbyak/xbyak_mnemonic.h	/^void fcmove(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDAC8, 0x00C8); }$/;"	f
fcmove	xbyak/xbyak_mnemonic.h	/^void fcmove(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDAC8, 0x00C8); }$/;"	f
fcmovnb	xbyak/xbyak_mnemonic.h	/^void fcmovnb(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDBC0, 0x00C0); }$/;"	f
fcmovnb	xbyak/xbyak_mnemonic.h	/^void fcmovnb(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDBC0, 0x00C0); }$/;"	f
fcmovnbe	xbyak/xbyak_mnemonic.h	/^void fcmovnbe(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDBD0, 0x00D0); }$/;"	f
fcmovnbe	xbyak/xbyak_mnemonic.h	/^void fcmovnbe(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDBD0, 0x00D0); }$/;"	f
fcmovne	xbyak/xbyak_mnemonic.h	/^void fcmovne(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDBC8, 0x00C8); }$/;"	f
fcmovne	xbyak/xbyak_mnemonic.h	/^void fcmovne(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDBC8, 0x00C8); }$/;"	f
fcmovnu	xbyak/xbyak_mnemonic.h	/^void fcmovnu(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDBD8, 0x00D8); }$/;"	f
fcmovnu	xbyak/xbyak_mnemonic.h	/^void fcmovnu(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDBD8, 0x00D8); }$/;"	f
fcmovu	xbyak/xbyak_mnemonic.h	/^void fcmovu(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDAD8, 0x00D8); }$/;"	f
fcmovu	xbyak/xbyak_mnemonic.h	/^void fcmovu(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDAD8, 0x00D8); }$/;"	f
fcom	xbyak/xbyak_mnemonic.h	/^void fcom() { db(0xD8); db(0xD1); }$/;"	f
fcom	xbyak/xbyak_mnemonic.h	/^void fcom(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 2, 0); }$/;"	f
fcom	xbyak/xbyak_mnemonic.h	/^void fcom(const Fpu& reg) { opFpu(reg, 0xD8, 0xD0); }$/;"	f
fcomi	xbyak/xbyak_mnemonic.h	/^void fcomi(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDBF0, 0x00F0); }$/;"	f
fcomi	xbyak/xbyak_mnemonic.h	/^void fcomi(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDBF0, 0x00F0); }$/;"	f
fcomip	xbyak/xbyak_mnemonic.h	/^void fcomip(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDFF0, 0x00F0); }$/;"	f
fcomip	xbyak/xbyak_mnemonic.h	/^void fcomip(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDFF0, 0x00F0); }$/;"	f
fcomp	xbyak/xbyak_mnemonic.h	/^void fcomp() { db(0xD8); db(0xD9); }$/;"	f
fcomp	xbyak/xbyak_mnemonic.h	/^void fcomp(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 3, 0); }$/;"	f
fcomp	xbyak/xbyak_mnemonic.h	/^void fcomp(const Fpu& reg) { opFpu(reg, 0xD8, 0xD8); }$/;"	f
fcompp	xbyak/xbyak_mnemonic.h	/^void fcompp() { db(0xDE); db(0xD9); }$/;"	f
fcos	xbyak/xbyak_mnemonic.h	/^void fcos() { db(0xD9); db(0xFF); }$/;"	f
fd	xbyak/xbyak.h	/^		int fd;$/;"	m	struct:Xbyak::MmapAllocator::Allocation
fdecstp	xbyak/xbyak_mnemonic.h	/^void fdecstp() { db(0xD9); db(0xF6); }$/;"	f
fdiv	xbyak/xbyak_mnemonic.h	/^void fdiv(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 6, 0); }$/;"	f
fdiv	xbyak/xbyak_mnemonic.h	/^void fdiv(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xD8F0, 0xDCF8); }$/;"	f
fdiv	xbyak/xbyak_mnemonic.h	/^void fdiv(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xD8F0, 0xDCF8); }$/;"	f
fdivp	xbyak/xbyak_mnemonic.h	/^void fdivp() { db(0xDE); db(0xF9); }$/;"	f
fdivp	xbyak/xbyak_mnemonic.h	/^void fdivp(const Fpu& reg1) { opFpuFpu(reg1, st0, 0x0000, 0xDEF8); }$/;"	f
fdivp	xbyak/xbyak_mnemonic.h	/^void fdivp(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0x0000, 0xDEF8); }$/;"	f
fdivr	xbyak/xbyak_mnemonic.h	/^void fdivr(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 7, 0); }$/;"	f
fdivr	xbyak/xbyak_mnemonic.h	/^void fdivr(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xD8F8, 0xDCF0); }$/;"	f
fdivr	xbyak/xbyak_mnemonic.h	/^void fdivr(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xD8F8, 0xDCF0); }$/;"	f
fdivrp	xbyak/xbyak_mnemonic.h	/^void fdivrp() { db(0xDE); db(0xF1); }$/;"	f
fdivrp	xbyak/xbyak_mnemonic.h	/^void fdivrp(const Fpu& reg1) { opFpuFpu(reg1, st0, 0x0000, 0xDEF0); }$/;"	f
fdivrp	xbyak/xbyak_mnemonic.h	/^void fdivrp(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0x0000, 0xDEF0); }$/;"	f
ffree	xbyak/xbyak_mnemonic.h	/^void ffree(const Fpu& reg) { opFpu(reg, 0xDD, 0xC0); }$/;"	f
fiadd	xbyak/xbyak_mnemonic.h	/^void fiadd(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 0, 0); }$/;"	f
ficom	xbyak/xbyak_mnemonic.h	/^void ficom(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 2, 0); }$/;"	f
ficomp	xbyak/xbyak_mnemonic.h	/^void ficomp(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 3, 0); }$/;"	f
fidiv	xbyak/xbyak_mnemonic.h	/^void fidiv(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 6, 0); }$/;"	f
fidivr	xbyak/xbyak_mnemonic.h	/^void fidivr(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 7, 0); }$/;"	f
fild	xbyak/xbyak_mnemonic.h	/^void fild(const Address& addr) { opFpuMem(addr, 0xDF, 0xDB, 0xDF, 0, 5); }$/;"	f
fill_buffer_randn	ut/jit_blas_ut.h	/^static void fill_buffer_randn(_T* buf, size_t size, _T minval, _T maxval) {$/;"	f	namespace:jblas::ut
fill_rand	ut/jit_blas_ut.h	/^  void fill_rand(int8_t minval, int8_t maxval) {$/;"	f	struct:jblas::ut::UT_vector_s8
fill_rand	ut/jit_blas_ut.h	/^  void fill_rand(uint8_t minval, uint8_t maxval) {$/;"	f	struct:jblas::ut::UT_vector_u8
fimul	xbyak/xbyak_mnemonic.h	/^void fimul(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 1, 0); }$/;"	f
fincstp	xbyak/xbyak_mnemonic.h	/^void fincstp() { db(0xD9); db(0xF7); }$/;"	f
finit	xbyak/xbyak_mnemonic.h	/^void finit() { db(0x9B); db(0xDB); db(0xE3); }$/;"	f
fist	xbyak/xbyak_mnemonic.h	/^void fist(const Address& addr) { opFpuMem(addr, 0xDF, 0xDB, 0x00, 2, 0); }$/;"	f
fistp	xbyak/xbyak_mnemonic.h	/^void fistp(const Address& addr) { opFpuMem(addr, 0xDF, 0xDB, 0xDF, 3, 7); }$/;"	f
fisttp	xbyak/xbyak_mnemonic.h	/^void fisttp(const Address& addr) { opFpuMem(addr, 0xDF, 0xDB, 0xDD, 1, 0); }$/;"	f
fisub	xbyak/xbyak_mnemonic.h	/^void fisub(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 4, 0); }$/;"	f
fisubr	xbyak/xbyak_mnemonic.h	/^void fisubr(const Address& addr) { opFpuMem(addr, 0xDE, 0xDA, 0x00, 5, 0); }$/;"	f
fld	xbyak/xbyak_mnemonic.h	/^void fld(const Address& addr) { opFpuMem(addr, 0x00, 0xD9, 0xDD, 0, 0); }$/;"	f
fld	xbyak/xbyak_mnemonic.h	/^void fld(const Fpu& reg) { opFpu(reg, 0xD9, 0xC0); }$/;"	f
fld1	xbyak/xbyak_mnemonic.h	/^void fld1() { db(0xD9); db(0xE8); }$/;"	f
fldcw	xbyak/xbyak_mnemonic.h	/^void fldcw(const Address& addr) { opModM(addr, Reg32(5), 0xD9, 0x100); }$/;"	f
fldenv	xbyak/xbyak_mnemonic.h	/^void fldenv(const Address& addr) { opModM(addr, Reg32(4), 0xD9, 0x100); }$/;"	f
fldl2e	xbyak/xbyak_mnemonic.h	/^void fldl2e() { db(0xD9); db(0xEA); }$/;"	f
fldl2t	xbyak/xbyak_mnemonic.h	/^void fldl2t() { db(0xD9); db(0xE9); }$/;"	f
fldlg2	xbyak/xbyak_mnemonic.h	/^void fldlg2() { db(0xD9); db(0xEC); }$/;"	f
fldln2	xbyak/xbyak_mnemonic.h	/^void fldln2() { db(0xD9); db(0xED); }$/;"	f
fldpi	xbyak/xbyak_mnemonic.h	/^void fldpi() { db(0xD9); db(0xEB); }$/;"	f
fldz	xbyak/xbyak_mnemonic.h	/^void fldz() { db(0xD9); db(0xEE); }$/;"	f
fmul	xbyak/xbyak_mnemonic.h	/^void fmul(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 1, 0); }$/;"	f
fmul	xbyak/xbyak_mnemonic.h	/^void fmul(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xD8C8, 0xDCC8); }$/;"	f
fmul	xbyak/xbyak_mnemonic.h	/^void fmul(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xD8C8, 0xDCC8); }$/;"	f
fmulp	xbyak/xbyak_mnemonic.h	/^void fmulp() { db(0xDE); db(0xC9); }$/;"	f
fmulp	xbyak/xbyak_mnemonic.h	/^void fmulp(const Fpu& reg1) { opFpuFpu(reg1, st0, 0x0000, 0xDEC8); }$/;"	f
fmulp	xbyak/xbyak_mnemonic.h	/^void fmulp(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0x0000, 0xDEC8); }$/;"	f
fnclex	xbyak/xbyak_mnemonic.h	/^void fnclex() { db(0xDB); db(0xE2); }$/;"	f
fninit	xbyak/xbyak_mnemonic.h	/^void fninit() { db(0xDB); db(0xE3); }$/;"	f
fnop	xbyak/xbyak_mnemonic.h	/^void fnop() { db(0xD9); db(0xD0); }$/;"	f
fnsave	xbyak/xbyak_mnemonic.h	/^void fnsave(const Address& addr) { opModM(addr, Reg32(6), 0xDD, 0x100); }$/;"	f
fnstcw	xbyak/xbyak_mnemonic.h	/^void fnstcw(const Address& addr) { opModM(addr, Reg32(7), 0xD9, 0x100); }$/;"	f
fnstenv	xbyak/xbyak_mnemonic.h	/^void fnstenv(const Address& addr) { opModM(addr, Reg32(6), 0xD9, 0x100); }$/;"	f
fnstsw	xbyak/xbyak_mnemonic.h	/^void fnstsw(const Address& addr) { opModM(addr, Reg32(7), 0xDD, 0x100); }$/;"	f
fnstsw	xbyak/xbyak_mnemonic.h	/^void fnstsw(const Reg16& r) { if (r.getIdx() != Operand::AX) XBYAK_THROW(ERR_BAD_PARAMETER) db(0xDF); db(0xE0); }$/;"	f
forward	jit_blas_epilogue.h	/^  JBLAS_CODE forward(const _SRC_T* cacheptr, const int cachestep, const int M_offset, const int N_offset, const int M,$/;"	f	class:jblas::epilogue::gemm::AccumulatorWriteBack
forward	jit_blas_epilogue.h	/^  JBLAS_CODE forward(const _SRC_T* cacheptr, const int cachestep, const int M_offset, const int N_offset, const int M,$/;"	f	class:jblas::epilogue::gemm::CustomAccumulatorWriteBackWithEltop
forward	jit_blas_epilogue.h	/^  JBLAS_CODE forward(const float* cacheptr, const int cachestep, const int M_offset, const int N_offset, const int M,$/;"	f	class:jblas::epilogue::gemm::AlphaBetaProcessFp32
forward	jit_blas_epilogue.h	/^  JBLAS_CODE forward(const int32_t* cacheptr, const int cachestep, const int M_offset, const int N_offset, const int M,$/;"	f	class:jblas::epilogue::gemm::AlphaBetaProcessS32U8
forward	jit_blas_epilogue.h	/^  JBLAS_CODE forward(const int32_t* cacheptr, const int cachestep, const int M_offset, const int N_offset, const int M,$/;"	f	class:jblas::epilogue::gemm::DequantInt32ToFp32
forward	jit_blas_epilogue.h	/^  JBLAS_CODE forward(const int32_t* cacheptr, const int cachestep, const int M_offset, const int N_offset, const int M,$/;"	f	class:jblas::epilogue::gemm::ZpDequantInt32ToFp32
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, AType* zpA, float* scaleA, int _ldsa, float* scaleB, int _ldsb,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, AType* zpA, float* scaleA, int _ldsa, float* scaleB, int _ldsb,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, AType* zpA, float* scaleA, int _ldsa, utils::bf16* scaleB,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, AType* zpA, float* scaleA, int _ldsa, utils::bf16* scaleB,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
forward	jit_blas_gemm.h	/^  void forward(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
forward	jit_blas_gemm.h	/^  void forward(float* matA, float* matB, float* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
forward	jit_blas_gemm.h	/^  void forward(float* matA, float* matB, float* matC, int _m, int _n, int _k, int _astride, int _bstride, int _cstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
forward	jit_blas_gemm.h	/^  void forward(utils::fp16* matA, utils::fp16* matB, utils::fp16* matC, int _m, int _n, int _k, int _astride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
forward	jit_blas_gemm.h	/^  void forward(utils::fp16* matA, utils::fp16* matB, utils::fp16* matC, int _m, int _n, int _k, int _astride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
forward	kernel_avx512f.h	/^  static JBLAS_CODE forward(const T_SRC* src, T_DST* dst, int MTile, int row, int col, int row_pad, int col_pad,$/;"	f	struct:jblas::kernel::avx512f::padding_trans_interleave_cvt
forward	kernel_avx512f.h	/^  static JBLAS_CODE forward(const T_SRC* src, T_DST* dst, int NTile, int row, int col, int row_pad, int col_pad,$/;"	f	struct:jblas::kernel::avx512f::padding_interleave_cvt
forward	kernel_avx512f.h	/^  static JBLAS_CODE forward(const utils::fp16* src, utils::bf16* dst, int MTile, int row, int col, int row_pad,$/;"	f	struct:jblas::kernel::avx512f::padding_trans_interleave_cvt
forward	kernel_avx512f.h	/^  static JBLAS_CODE forward(const utils::fp16* src, utils::bf16* dst, int NTile, int row, int col, int row_pad,$/;"	f	struct:jblas::kernel::avx512f::padding_interleave_cvt
forward	kernel_jit.h	/^  static JBLAS_CODE forward(const float* srcptr, float* dstptr, int row, int col, int srcstride, int dststride,$/;"	f	class:jblas::kernel::jit::CustomMemCpy
forward	kernel_jit.h	/^  static JBLAS_CODE forward(void* srcptr, void* dstptr, int row, int col, int srcstride, int dststride,$/;"	f	class:jblas::kernel::jit::JitMemcpy2DAvx512f
forward	kernel_jit.h	/^  static JBLAS_CODE forward(void* srcptr, void* dstptr, size_t size) {$/;"	f	class:jblas::kernel::jit::DecompressS4S8_AVX512F
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(const T_SRC* src, T_DST* dst, int row, int col, int row_pad, int col_pad, int src_step,$/;"	f	class:jblas::kernel::wrapper::PaddingInterleaveMN
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(const T_SRC* src, T_DST* dst, int row, int col, int row_pad, int col_pad, int src_step,$/;"	f	class:jblas::kernel::wrapper::PaddingTransInterleaveMN
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(const T_SRC* src, T_DST* dst, int row, int col, int row_pad, int col_pad, int src_step,$/;"	f	class:jblas::kernel::wrapper::RevertPaddingInterleaveMN
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(const float alpha, const float* srcptr, const int srcstep, const float beta,$/;"	f	class:jblas::kernel::wrapper::AlphaBetaF32F32
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(const float alpha, const int32_t* srcptr, const int srcstep, uint8_t* dstptr,$/;"	f	class:jblas::kernel::wrapper::QuanOutS32U32
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(const int32_t* srcptr, const int srcstep, float* dstptr, const int dststep, const int M,$/;"	f	class:jblas::kernel::wrapper::DequanS32Fp32
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(const void* srcptr, void* dstptr, int row, int col, int srcstride, int dststride) {$/;"	f	class:jblas::kernel::wrapper::Memcpy2DFp32CvtBf16
forward	kernel_wrapper.h	/^  static JBLAS_CODE forward(void* srcptr, void* dstptr, int row, int col, int srcstride, int dststride,$/;"	f	class:jblas::kernel::wrapper::Memcpy2D
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(const _T* srcptr, _T* dstptr, int row, int col, int ld_src, int ld_dst) {$/;"	f	class:jblas::kernel::wrapper::Transpose2D
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(const float* srcptr, int row, int col, int ld_src, float* minmaxptr, int ld_minmax,$/;"	f	class:jblas::kernel::wrapper::MinMaxKBlock
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(const float* srcptr, int8_t* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::QuantizeF4RowBlock
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(const float* srcptr, int8_t* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::QuantizeSignIntRowBlock
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(const int32_t* srcptr, float* dstptr, float alpha, float beta, int row, int col,$/;"	f	class:jblas::kernel::wrapper::AccumulateDequantizeS32F32
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(const int8_t* srcptr, jblas::utils::f4x2* dstptr, int row, int col, int ld_src,$/;"	f	class:jblas::kernel::wrapper::CompressFp4
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(const int8_t* srcptr, jblas::utils::int4x2* dstptr, int row, int col, int ld_src,$/;"	f	class:jblas::kernel::wrapper::CompressS8S4
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(float* accptr, int ldacc, int row, int col, uint8_t* zps, float* scales, int lds,$/;"	f	class:jblas::kernel::wrapper::RemoveZeroPointBias
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(int num, const uint8_t& srcval, uint8_t* dstptr) {$/;"	f	class:jblas::kernel::wrapper::Broadcast
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(int row, int col, const float* srcptr, int ld_src, int8_t* dstptr, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::QuantizeS8ColBlock
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(int row, int col, const float* srcptr, int ld_src, uint8_t* dstptr, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::QuantizeU8ColBlock
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(int8_t* srcptr, float* dstptr, int row, int col, int ld_src, int ld_dst, _T* scales,$/;"	f	class:jblas::kernel::wrapper::DecompressKBlockS8F32
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(int8_t* srcptr, float* dstptr, int row, int col, int ld_src, int ld_dst, _T* scales,$/;"	f	class:jblas::kernel::wrapper::DecompressKBlockS8FP32PackRow
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(utils::f4x2* srcptr, _DST_T* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::DecompressKBlockF4FPPackRow
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(utils::f4x2* srcptr, _DST_T* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::DecompressKBlockF4Fp
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(utils::int4x2* srcptr, _DST_T* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::DecompressKBlockS4FP
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(utils::int4x2* srcptr, _DST_T* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::kernel::wrapper::DecompressKBlockS4FPPackRow
forward	kernel_wrapper.h	/^  static inline JBLAS_CODE forward(utils::int4x2* srcptr, int8_t* dstptr, int row, int col, int ld_src, int ld_dst) {$/;"	f	class:jblas::kernel::wrapper::DecompressKBlockS4S8
forward_avx512f	kernel_jit.h	/^  static inline JBLAS_CODE forward_avx512f(int8_t* srcptr, float* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::kernel::jit::DequanKBlockS8F32
forward_avx512f	kernel_jit.h	/^  static void forward_avx512f(int8_t* srcptr, float* dstptr, int row, int col, int ld_src, int ld_dst, float* scales) {$/;"	f	class:jblas::kernel::jit::DequanS8F32
fp16	jit_blas_utils.h	/^  explicit fp16(bf16 val) { (*this) = static_cast<float>(val); }$/;"	f	struct:jblas::utils::fp16
fp16	jit_blas_utils.h	/^  explicit fp16(float val) { (*this) = val; }$/;"	f	struct:jblas::utils::fp16
fp16	jit_blas_utils.h	/^  fp16() { x = 0; }$/;"	f	struct:jblas::utils::fp16
fp16	jit_blas_utils.h	/^struct fp16 {$/;"	s	namespace:jblas::utils
fp32_bf16_ut	ut/jit_blas_prologue.cpp	/^  void fp32_bf16_ut(int m, int k, int lda) {$/;"	f	class:jblas::ut::UT_ActivationConverter
fp32_cvt_bf16_2D_write_back	kernel_avx512f.h	/^static inline JBLAS_CODE fp32_cvt_bf16_2D_write_back(const void* raw_srcptr, void* raw_dstptr, int row, int col,$/;"	f	namespace:jblas::kernel::avx512f
fp32ut	ut/jit_blas_epilogue.cpp	/^  void fp32ut(int _M, int _N, int _M_offset, int _N_offset, int _cpy_M, int _cpy_N) {$/;"	f	class:jblas::ut::UT_AccumulatorWriteBack
fp32ut_with_custom_gelu	ut/jit_blas_epilogue.cpp	/^  void fp32ut_with_custom_gelu(int _M, int _N, int _M_offset, int _N_offset, int _cpy_M, int _cpy_N) {$/;"	f	class:jblas::ut::UT_AccumulatorWriteBack
fp32ut_with_gelu_and_linear	ut/jit_blas_epilogue.cpp	/^  void fp32ut_with_gelu_and_linear(int _M, int _N, int _M_offset, int _N_offset, int _cpy_M, int _cpy_N) {$/;"	f	class:jblas::ut::UT_AccumulatorWriteBack
fp4_bnb_dequant_fp32_LUT	kernel_avx512f.h	/^static float fp4_bnb_dequant_fp32_LUT[] = {$/;"	m	namespace:jblas::kernel::avx512f
fp4_bnb_dequantize	kernel_ref.h	/^inline float fp4_bnb_dequantize(uint8_t val, float absmax) {$/;"	f	namespace:jblas::kernel::ref
fp4_bnb_quantize	kernel_ref.h	/^inline int8_t fp4_bnb_quantize(float x) {$/;"	f	namespace:jblas::kernel::ref
fp4_e2m1_dequant_fp32_LUT	kernel_avx512f.h	/^static float fp4_e2m1_dequant_fp32_LUT[] = {$/;"	m	namespace:jblas::kernel::avx512f
fp4_e2m1_dequantize	kernel_ref.h	/^inline float fp4_e2m1_dequantize(uint8_t val, float absmax) {$/;"	f	namespace:jblas::kernel::ref
fp4_e2m1_quantize	kernel_ref.h	/^inline int8_t fp4_e2m1_quantize(float x) {$/;"	f	namespace:jblas::kernel::ref
fp_	xbyak/xbyak_util.h	/^	FILE *fp_;$/;"	m	class:Xbyak::util::Profiler
fpatan	xbyak/xbyak_mnemonic.h	/^void fpatan() { db(0xD9); db(0xF3); }$/;"	f
fprem	xbyak/xbyak_mnemonic.h	/^void fprem() { db(0xD9); db(0xF8); }$/;"	f
fprem1	xbyak/xbyak_mnemonic.h	/^void fprem1() { db(0xD9); db(0xF5); }$/;"	f
fptan	xbyak/xbyak_mnemonic.h	/^void fptan() { db(0xD9); db(0xF2); }$/;"	f
free	xbyak/xbyak.h	/^	virtual void free(uint8_t *p) { AlignedFree(p); }$/;"	f	struct:Xbyak::Allocator
free	xbyak/xbyak.h	/^	void free(uint8_t *p)$/;"	f	class:Xbyak::MmapAllocator
free_zmm_idx	kernel_jit.h	/^    int free_zmm_idx;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
frndint	xbyak/xbyak_mnemonic.h	/^void frndint() { db(0xD9); db(0xFC); }$/;"	f
from_bin	jit_blas_utils.h	/^  static bf16 from_bin(const uint16_t x) {$/;"	f	struct:jblas::utils::bf16
fromfloat	jit_blas_utils.h	/^  void fromfloat(float _v) {$/;"	f	struct:jblas::utils::bf16
frstor	xbyak/xbyak_mnemonic.h	/^void frstor(const Address& addr) { opModM(addr, Reg32(4), 0xDD, 0x100); }$/;"	f
fs	xbyak/xbyak.h	/^		es, cs, ss, ds, fs, gs$/;"	e	enum:Xbyak::Segment::__anon6
fs	xbyak/xbyak.h	/^	const Segment es, cs, ss, ds, fs, gs;$/;"	m	class:Xbyak::CodeGenerator
fsave	xbyak/xbyak_mnemonic.h	/^void fsave(const Address& addr) { db(0x9B); opModM(addr, Reg32(6), 0xDD, 0x100); }$/;"	f
fscale	xbyak/xbyak_mnemonic.h	/^void fscale() { db(0xD9); db(0xFD); }$/;"	f
fsin	xbyak/xbyak_mnemonic.h	/^void fsin() { db(0xD9); db(0xFE); }$/;"	f
fsincos	xbyak/xbyak_mnemonic.h	/^void fsincos() { db(0xD9); db(0xFB); }$/;"	f
fsqrt	xbyak/xbyak_mnemonic.h	/^void fsqrt() { db(0xD9); db(0xFA); }$/;"	f
fst	xbyak/xbyak_mnemonic.h	/^void fst(const Address& addr) { opFpuMem(addr, 0x00, 0xD9, 0xDD, 2, 0); }$/;"	f
fst	xbyak/xbyak_mnemonic.h	/^void fst(const Fpu& reg) { opFpu(reg, 0xDD, 0xD0); }$/;"	f
fstcw	xbyak/xbyak_mnemonic.h	/^void fstcw(const Address& addr) { db(0x9B); opModM(addr, Reg32(7), 0xD9, 0x100); }$/;"	f
fstenv	xbyak/xbyak_mnemonic.h	/^void fstenv(const Address& addr) { db(0x9B); opModM(addr, Reg32(6), 0xD9, 0x100); }$/;"	f
fstp	xbyak/xbyak_mnemonic.h	/^void fstp(const Address& addr) { opFpuMem(addr, 0x00, 0xD9, 0xDD, 3, 0); }$/;"	f
fstp	xbyak/xbyak_mnemonic.h	/^void fstp(const Fpu& reg) { opFpu(reg, 0xDD, 0xD8); }$/;"	f
fstsw	xbyak/xbyak_mnemonic.h	/^void fstsw(const Address& addr) { db(0x9B); opModM(addr, Reg32(7), 0xDD, 0x100); }$/;"	f
fstsw	xbyak/xbyak_mnemonic.h	/^void fstsw(const Reg16& r) { if (r.getIdx() != Operand::AX) XBYAK_THROW(ERR_BAD_PARAMETER) db(0x9B); db(0xDF); db(0xE0); }$/;"	f
fsub	xbyak/xbyak_mnemonic.h	/^void fsub(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 4, 0); }$/;"	f
fsub	xbyak/xbyak_mnemonic.h	/^void fsub(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xD8E0, 0xDCE8); }$/;"	f
fsub	xbyak/xbyak_mnemonic.h	/^void fsub(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xD8E0, 0xDCE8); }$/;"	f
fsubp	xbyak/xbyak_mnemonic.h	/^void fsubp() { db(0xDE); db(0xE9); }$/;"	f
fsubp	xbyak/xbyak_mnemonic.h	/^void fsubp(const Fpu& reg1) { opFpuFpu(reg1, st0, 0x0000, 0xDEE8); }$/;"	f
fsubp	xbyak/xbyak_mnemonic.h	/^void fsubp(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0x0000, 0xDEE8); }$/;"	f
fsubr	xbyak/xbyak_mnemonic.h	/^void fsubr(const Address& addr) { opFpuMem(addr, 0x00, 0xD8, 0xDC, 5, 0); }$/;"	f
fsubr	xbyak/xbyak_mnemonic.h	/^void fsubr(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xD8E8, 0xDCE0); }$/;"	f
fsubr	xbyak/xbyak_mnemonic.h	/^void fsubr(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xD8E8, 0xDCE0); }$/;"	f
fsubrp	xbyak/xbyak_mnemonic.h	/^void fsubrp() { db(0xDE); db(0xE1); }$/;"	f
fsubrp	xbyak/xbyak_mnemonic.h	/^void fsubrp(const Fpu& reg1) { opFpuFpu(reg1, st0, 0x0000, 0xDEE0); }$/;"	f
fsubrp	xbyak/xbyak_mnemonic.h	/^void fsubrp(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0x0000, 0xDEE0); }$/;"	f
ftst	xbyak/xbyak_mnemonic.h	/^void ftst() { db(0xD9); db(0xE4); }$/;"	f
fucom	xbyak/xbyak_mnemonic.h	/^void fucom() { db(0xDD); db(0xE1); }$/;"	f
fucom	xbyak/xbyak_mnemonic.h	/^void fucom(const Fpu& reg) { opFpu(reg, 0xDD, 0xE0); }$/;"	f
fucomi	xbyak/xbyak_mnemonic.h	/^void fucomi(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDBE8, 0x00E8); }$/;"	f
fucomi	xbyak/xbyak_mnemonic.h	/^void fucomi(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDBE8, 0x00E8); }$/;"	f
fucomip	xbyak/xbyak_mnemonic.h	/^void fucomip(const Fpu& reg1) { opFpuFpu(st0, reg1, 0xDFE8, 0x00E8); }$/;"	f
fucomip	xbyak/xbyak_mnemonic.h	/^void fucomip(const Fpu& reg1, const Fpu& reg2) { opFpuFpu(reg1, reg2, 0xDFE8, 0x00E8); }$/;"	f
fucomp	xbyak/xbyak_mnemonic.h	/^void fucomp() { db(0xDD); db(0xE9); }$/;"	f
fucomp	xbyak/xbyak_mnemonic.h	/^void fucomp(const Fpu& reg) { opFpu(reg, 0xDD, 0xE8); }$/;"	f
fucompp	xbyak/xbyak_mnemonic.h	/^void fucompp() { db(0xDA); db(0xE9); }$/;"	f
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
func_t	jit_blas_gemm.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
func_t	kernel_jit.h	/^    typedef long long (*func_t)(params*);$/;"	t	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
func_t	kernel_jit.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::kernel::jit::DecompressS4S8_AVX512F
func_t	kernel_jit.h	/^  typedef long long (*func_t)(params*);$/;"	t	class:jblas::kernel::jit::JitMemcpy2DAvx512f
fwait	xbyak/xbyak_mnemonic.h	/^void fwait() { db(0x9B); }$/;"	f
fwd	kernel_jit.h	/^    void fwd(float* scale, void* s4, void* tmp_buf, float* f32) {$/;"	f	class:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32
fxam	xbyak/xbyak_mnemonic.h	/^void fxam() { db(0xD9); db(0xE5); }$/;"	f
fxch	xbyak/xbyak_mnemonic.h	/^void fxch() { db(0xD9); db(0xC9); }$/;"	f
fxch	xbyak/xbyak_mnemonic.h	/^void fxch(const Fpu& reg) { opFpu(reg, 0xD9, 0xC8); }$/;"	f
fxrstor	xbyak/xbyak_mnemonic.h	/^void fxrstor(const Address& addr) { opModM(addr, Reg32(1), 0x0F, 0xAE); }$/;"	f
fxrstor64	xbyak/xbyak_mnemonic.h	/^void fxrstor64(const Address& addr) { opModM(addr, Reg64(1), 0x0F, 0xAE); }$/;"	f
fxtract	xbyak/xbyak_mnemonic.h	/^void fxtract() { db(0xD9); db(0xF4); }$/;"	f
fyl2x	xbyak/xbyak_mnemonic.h	/^void fyl2x() { db(0xD9); db(0xF1); }$/;"	f
fyl2xp1	xbyak/xbyak_mnemonic.h	/^void fyl2xp1() { db(0xD9); db(0xF9); }$/;"	f
gelu_compute_vector_fwd	kernel_jit_injector.h	/^  void gelu_compute_vector_fwd(const Xbyak::Zmm& zmm_src) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
gelu_tanh_fitting_const	kernel_jit_injector.h	/^    gelu_tanh_fitting_const,              \/\/ 0.044715f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
gelu_tanh_fitting_const_times_three	kernel_jit_injector.h	/^    gelu_tanh_fitting_const_times_three,  \/\/ 0.134145f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
gelu_tanh_flt_max_x	kernel_jit_injector.h	/^    gelu_tanh_flt_max_x,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
gelu_tanh_flt_min_x	kernel_jit_injector.h	/^    gelu_tanh_flt_min_x,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
gelu_tanh_sqrt_two_over_pi	kernel_jit_injector.h	/^    gelu_tanh_sqrt_two_over_pi,           \/\/ sqrtf(2.f\/pi) = 0.797884f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
gemm	jit_blas_epilogue.h	/^namespace gemm {$/;"	n	namespace:jblas::epilogue
gemm	jit_blas_gemm.h	/^namespace gemm {$/;"	n	namespace:jblas
gemm	jit_blas_prologue.h	/^namespace gemm {$/;"	n	namespace:jblas::prologue
gemm	ut/jit_blas_weight_compression.cpp	/^namespace gemm {$/;"	n	namespace:jblas::wrapper	file:
gemm	ut/jit_blas_wrapper.cpp	/^namespace gemm {$/;"	n	namespace:jblas::wrapper	file:
gemm_default	jit_blas_weight_compression.h	/^namespace gemm_default {$/;"	n	namespace:jblas::wrapper
gemm_default	jit_blas_wrapper.h	/^namespace gemm_default {$/;"	n	namespace:jblas::wrapper
gemm_kblcok	jit_blas_weight_compression.h	/^namespace gemm_kblcok {$/;"	n	namespace:jblas::prologue::weight_comp
gemm_kblock	jit_blas_weight_compression.h	/^namespace gemm_kblock {$/;"	n	namespace:jblas::wrapper
gemm_pack_weight	jit_blas_wrapper.h	/^namespace gemm_pack_weight {$/;"	n	namespace:jblas::wrapper
gemmref_bf16bf16fp32	ut/jit_blas_ut.h	/^static inline void gemmref_bf16bf16fp32(int m, int n, int k, utils::bf16* A, utils::bf16* B, float* C, int lda, int ldb,$/;"	f	namespace:jblas::ut
gemmref_s8s8s32	ut/jit_blas_ut.h	/^static inline void gemmref_s8s8s32(int m, int n, int k, int8_t* A, int8_t* B, int32_t* C, int lda, int ldb, int ldc) {$/;"	f	namespace:jblas::ut
gemmref_u8s8s32	ut/jit_blas_ut.h	/^static inline void gemmref_u8s8s32(int m, int n, int k, uint8_t* A, int8_t* B, int32_t* C, int lda, int ldb, int ldc) {$/;"	f	namespace:jblas::ut
generate	kernel_jit.h	/^    void generate() {$/;"	f	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
generate	kernel_jit.h	/^  void generate(int unrollk, std::vector<kernel::jit_injector::eltwise_injector>& injectors) {  \/\/ unrollK=[1,2,4]$/;"	f	class:jblas::kernel::jit::JitMemcpy2DAvx512f
generateNTile	kernel_jit.h	/^    void generateNTile(int N) {$/;"	f	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
generate_Nbitsmask	jit_base.hpp	/^  void generate_Nbitsmask(const Xbyak::Opmask& _msk, const Xbyak::Reg64& _pos, const Xbyak::Reg64& _total,$/;"	f	class:jblas::xbyak::JitBase
generate_by_cores	jit_blas_utils.h	/^  void generate_by_cores(int ny, int nx, int rownum, int colnum) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
generate_by_cores	jit_blas_utils.h	/^  void generate_by_cores(int ny, int nx, int rownum, int colnum) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
generate_by_cores	jit_blas_utils.h	/^  void generate_by_cores(int ny, int nx, int rownum, int colnum) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
generate_code	jit_blas_gemm.h	/^    void generate_code() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code(JBLAS_DTYPE scaletype) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
generate_code	jit_blas_gemm.h	/^    void generate_code(int _mtile, JBLAS_DTYPE _scale_dt) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
generate_f32_accumulate	jit_blas_gemm.h	/^    void generate_f32_accumulate(int _NRegs) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
generate_f32_accumulate	jit_blas_gemm.h	/^    void generate_f32_accumulate(int _mtile, int _NRegs) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _NNum, int _kunroll, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _NTile, int _kunroll, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _NTile, int _kunroll, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _NTile, int _kunroll, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _NTile, int _kunroll, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _NTile, int _kunroll, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _mtile, int _NRegs, int _ktile, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _mtile, int _NRegs, int _ktile, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _mtile, int _NRegs, int _ktile, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _mtile, int _NRegs, int _ktile, const Xbyak::Reg64& reg_tmp, const Xbyak::Reg64& reg_matAptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _mtile, int _NRegs, int _kunroll, const Xbyak::Reg64& reg_tmp,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
generate_fma	jit_blas_gemm.h	/^    void generate_fma(int _mtile, int _NRegs, int _kunroll, const Xbyak::Reg64& reg_tmp,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _mtile, int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _mtile, int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _mtile, int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _mtile, int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _mtile, int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _mtile, int _nregs) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _nregs) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
generate_kloop	jit_blas_gemm.h	/^    void generate_kloop(int _nregs) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile() {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile() {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile(int _mtile) {$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
generate_mtile	jit_blas_gemm.h	/^    void generate_mtile(int _mtile) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
generate_zp_fma	jit_blas_gemm.h	/^    void generate_zp_fma(int _mtile, int _NRegs, int _kunroll, const Xbyak::Reg64& reg_tmp,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
get32bitAsBE	xbyak/xbyak_util.h	/^	uint32_t get32bitAsBE(const char *x) const$/;"	f	class:Xbyak::util::Cpu
getActivation	jit_blas_prologue.h	/^  JBLAS_CODE getActivation(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationBase
getActivation	jit_blas_prologue.h	/^  JBLAS_CODE getActivation(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationConverterFp32
getActivation	jit_blas_prologue.h	/^  JBLAS_CODE getActivation(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
getActivation	jit_blas_prologue.h	/^  JBLAS_CODE getActivation(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
getActivation	jit_blas_prologue.h	/^  JBLAS_CODE getActivation(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationFp32AsymU8Quantize
getActivation	jit_blas_prologue.h	/^  JBLAS_CODE getActivation(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationFp32SymS8Quantize
getActivationPtr	jit_blas_transformer.h	/^  ActivationType* getActivationPtr() { return &mLauncher.mProA; }$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight
getActivationPtr	jit_blas_transformer.h	/^  ActivationType* getActivationPtr() { return &mLauncher.mProA; }$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfacePackWeight
getActivationPtr	jit_blas_weight_compression.h	/^  ActivationType* getActivationPtr() { return &mLauncher.mProA; }$/;"	f	class:jblas::wrapper::gemm_kblock::GemmInterfaceKBlockPackWeight
getActivationPtr	jit_blas_weight_compression.h	/^  ActivationType* getActivationPtr() { return &mLauncher.mProA; }$/;"	f	class:jblas::wrapper::gemm_kblock::GemmInterfaceKblockAB
getActivationPtr	jit_blas_wrapper.h	/^  ActivationType* getActivationPtr() { return &mLauncher.mProA; }$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmInterfaceAB
getAddress	xbyak/xbyak.h	/^inline const Address& Operand::getAddress() const$/;"	f	class:Xbyak::Operand
getAddress	xbyak/xbyak.h	/^inline const uint8_t* Label::getAddress() const$/;"	f	class:Xbyak::Label
getAlignedAddress	xbyak/xbyak.h	/^	static inline uint8_t *getAlignedAddress(uint8_t *addr, size_t alignedSize = 16)$/;"	f	class:Xbyak::CodeArray
getBase	xbyak/xbyak.h	/^	const Reg& getBase() const { return base_; }$/;"	f	class:Xbyak::RegExp
getBit	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR uint32_t getBit() const { return bit_; }$/;"	f	class:Xbyak::Operand
getClock	xbyak/xbyak_util.h	/^	uint64_t getClock() const { return clock_; }$/;"	f	class:Xbyak::util::Clock
getCode	xbyak/xbyak.h	/^	const F getCode() const { return reinterpret_cast<F>(top_); }$/;"	f	class:Xbyak::CodeArray
getCode	xbyak/xbyak.h	/^	const uint8_t *getCode() const { return base_->getCode(); }$/;"	f	class:Xbyak::LabelManager
getCode	xbyak/xbyak.h	/^	const uint8_t *getCode() const { return top_; }$/;"	f	class:Xbyak::CodeArray
getCoresSharingDataCache	xbyak/xbyak_util.h	/^	uint32_t getCoresSharingDataCache(uint32_t i) const$/;"	f	class:Xbyak::util::Cpu
getCount	xbyak/xbyak_util.h	/^	int getCount() const { return count_; }$/;"	f	class:Xbyak::util::Clock
getCpuid	xbyak/xbyak_util.h	/^	static inline void getCpuid(uint32_t eaxIn, uint32_t data[4])$/;"	f	class:Xbyak::util::Cpu
getCpuidEx	xbyak/xbyak_util.h	/^	static inline void getCpuidEx(uint32_t eaxIn, uint32_t ecxIn, uint32_t data[4])$/;"	f	class:Xbyak::util::Cpu
getCurr	xbyak/xbyak.h	/^	const F getCurr() const { return reinterpret_cast<F>(&top_[size_]); }$/;"	f	class:Xbyak::CodeArray
getCurr	xbyak/xbyak.h	/^	const uint8_t *getCurr() const { return &top_[size_]; }$/;"	f	class:Xbyak::CodeArray
getDataCacheLevels	xbyak/xbyak_util.h	/^	uint32_t getDataCacheLevels() const { return dataCacheLevels_; }$/;"	f	class:Xbyak::util::Cpu
getDataCacheSize	xbyak/xbyak_util.h	/^	uint32_t getDataCacheSize(uint32_t i) const$/;"	f	class:Xbyak::util::Cpu
getDisp	xbyak/xbyak.h	/^	size_t getDisp() const { return disp_; }$/;"	f	class:Xbyak::RegExp
getDisp	xbyak/xbyak.h	/^	size_t getDisp() const { return e_.getDisp(); }$/;"	f	class:Xbyak::Address
getH	xbyak/xbyak_util.h	/^		uint64_t getH() const { return H; }$/;"	f	class:Xbyak::util::Cpu::Type
getId	xbyak/xbyak.h	/^	int getId() const { return id; }$/;"	f	class:Xbyak::Label
getId	xbyak/xbyak.h	/^	int getId(const Label& label) const$/;"	f	class:Xbyak::LabelManager
getIdx	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR int getIdx() const { return idx_ & (EXT8BIT - 1); }$/;"	f	class:Xbyak::Operand
getIdx	xbyak/xbyak.h	/^	int getIdx() const { return idx_; }$/;"	f	class:Xbyak::Segment
getIndex	jit_blas_utils.h	/^  virtual void getIndex(int threadIdx, int* row, int* col, int* rowsize, int* colsize) const {$/;"	f	struct:jblas::utils::parallel::Parallel2D
getIndex	jit_blas_utils.h	/^  virtual void getIndex(int threadIdx, int* row, int* col, int* rowsize, int* colsize, int* block,$/;"	f	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
getIndex	xbyak/xbyak.h	/^	const Reg& getIndex() const { return index_; }$/;"	f	class:Xbyak::RegExp
getInstance	jit_blas_utils.h	/^  static CpuDevice* getInstance() {$/;"	f	class:jblas::utils::parallel::CpuDevice
getK	jit_blas_utils.h	/^  inline int getK() { return mK; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getK	jit_blas_utils.h	/^  inline int getK() { return mK; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getK	jit_blas_utils.h	/^  inline int getK() { return mK; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getKStep	jit_blas_utils.h	/^  inline int getKStep() { return mKStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getKStep	jit_blas_utils.h	/^  inline int getKStep() { return mKStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getKStep	jit_blas_utils.h	/^  inline int getKStep() { return mKStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getKind	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR Kind getKind() const { return static_cast<Kind>(kind_); }$/;"	f	class:Xbyak::Operand
getL	xbyak/xbyak_util.h	/^		uint64_t getL() const { return L; }$/;"	f	class:Xbyak::util::Cpu::Type
getL1CacheSize	jit_blas_utils.h	/^  inline uint32_t getL1CacheSize() { return L1Cache; }$/;"	f	class:jblas::utils::parallel::CpuDevice
getL2CacheSize	jit_blas_utils.h	/^  inline uint32_t getL2CacheSize() { return L2Cache; }$/;"	f	class:jblas::utils::parallel::CpuDevice
getLabel	xbyak/xbyak.h	/^	const Label* getLabel() const { return label_; }$/;"	f	class:Xbyak::Address
getM	jit_blas_utils.h	/^  inline int getM() { return mM; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getM	jit_blas_utils.h	/^  inline int getM() { return mM; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getM	jit_blas_utils.h	/^  inline int getM() { return mM; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getMStep	jit_blas_utils.h	/^  inline int getMStep() { return mMStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getMStep	jit_blas_utils.h	/^  inline int getMStep() { return mMStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getMStep	jit_blas_utils.h	/^  inline int getMStep() { return mMStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getMacOsVersion	xbyak/xbyak.h	/^inline int getMacOsVersion()$/;"	f	namespace:Xbyak::util
getMacOsVersionPure	xbyak/xbyak.h	/^inline int getMacOsVersionPure()$/;"	f	namespace:Xbyak::util
getMode	xbyak/xbyak.h	/^	Mode getMode() const { return mode_; }$/;"	f	class:Xbyak::Address
getN	jit_blas_utils.h	/^  inline int getN() { return mN; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getN	jit_blas_utils.h	/^  inline int getN() { return mN; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getN	jit_blas_utils.h	/^  inline int getN() { return mN; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getNStep	jit_blas_utils.h	/^  inline int getNStep() { return mNStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getNStep	jit_blas_utils.h	/^  inline int getNStep() { return mNStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getNStep	jit_blas_utils.h	/^  inline int getNStep() { return mNStep; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getNumCores	xbyak/xbyak_util.h	/^	uint32_t getNumCores(IntelCpuTopologyLevel level) const {$/;"	f	class:Xbyak::util::Cpu
getOffset	xbyak/xbyak.h	/^	bool getOffset(size_t *offset, const Label& label) const$/;"	f	class:Xbyak::LabelManager
getOffset	xbyak/xbyak.h	/^	bool getOffset(size_t *offset, std::string& label) const$/;"	f	class:Xbyak::LabelManager
getOffset_inner	xbyak/xbyak.h	/^	bool getOffset_inner(const DefList& defList, size_t *offset, const T& label) const$/;"	f	class:Xbyak::LabelManager
getOpmaskIdx	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR int getOpmaskIdx() const { return mask_; }$/;"	f	class:Xbyak::Operand
getOrderTbl	xbyak/xbyak_util.h	/^	const int *getOrderTbl() const$/;"	f	class:Xbyak::util::StackFrame
getPP	xbyak/xbyak.h	/^	uint32_t getPP(int type) const { return (type >> 5) & 3; }$/;"	f	class:Xbyak::CodeGenerator
getPaddedK	jit_blas_utils.h	/^  inline int getPaddedK() { return mKPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getPaddedK	jit_blas_utils.h	/^  inline int getPaddedK() { return mKPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getPaddedK	jit_blas_utils.h	/^  inline int getPaddedK() { return mKPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getPaddedM	jit_blas_utils.h	/^  inline int getPaddedM() { return mMPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getPaddedM	jit_blas_utils.h	/^  inline int getPaddedM() { return mMPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getPaddedM	jit_blas_utils.h	/^  inline int getPaddedM() { return mMPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getPaddedN	jit_blas_utils.h	/^  inline int getPaddedN() { return mNPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
getPaddedN	jit_blas_utils.h	/^  inline int getPaddedN() { return mNPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
getPaddedN	jit_blas_utils.h	/^  inline int getPaddedN() { return mNPadded; }$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
getPtr	jit_blas_prologue.h	/^  inline WT* getPtr() const {$/;"	f	class:jblas::prologue::gemm::StorageWeight
getRdtsc	xbyak/xbyak_util.h	/^	static inline uint64_t getRdtsc()$/;"	f	class:Xbyak::util::Clock
getReg	xbyak/xbyak.h	/^inline const Reg& Operand::getReg() const$/;"	f	class:Xbyak::Operand
getRegExp	xbyak/xbyak.h	/^	RegExp getRegExp(bool optimize = true) const$/;"	f	class:Xbyak::Address
getRegIdx	xbyak/xbyak_util.h	/^	int getRegIdx(int& pos) const$/;"	f	class:Xbyak::util::StackFrame
getRex	xbyak/xbyak.h	/^	uint8_t getRex() const$/;"	f	class:Xbyak::Address
getRex	xbyak/xbyak.h	/^	uint8_t getRex() const$/;"	f	class:Xbyak::RegExp
getRex	xbyak/xbyak.h	/^	uint8_t getRex(const Reg& base = Reg()) const$/;"	f	class:Xbyak::Reg
getRexB	xbyak/xbyak.h	/^	uint8_t getRexB() const { return isExtIdx() ? 1 : 0; }$/;"	f	class:Xbyak::Reg
getRexR	xbyak/xbyak.h	/^	uint8_t getRexR() const { return isExtIdx() ? 4 : 0; }$/;"	f	class:Xbyak::Reg
getRexW	xbyak/xbyak.h	/^	uint8_t getRexW() const { return isREG(64) ? 8 : 0; }$/;"	f	class:Xbyak::Reg
getRexX	xbyak/xbyak.h	/^	uint8_t getRexX() const { return isExtIdx() ? 2 : 0; }$/;"	f	class:Xbyak::Reg
getRounding	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR int getRounding() const { return rounding_; }$/;"	f	class:Xbyak::Operand
getScale	jit_blas_prologue.h	/^  JBLAS_CODE getScale(SType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
getScale	jit_blas_prologue.h	/^  JBLAS_CODE getScale(SType** dstptr, int* dststep, const Param& _param, int m_size, int k_size, int m_offset,$/;"	f	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
getScale	jit_blas_weight_compression.h	/^  virtual JBLAS_CODE getScale(float** dstptr, int* dststep, int n_size, int k_size, int n_offset, int k_offset,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
getScale	jit_blas_weight_compression.h	/^  virtual inline JBLAS_CODE getScale(utils::bf16** dstptr, int* dststep, int n_size, int k_size, int n_offset,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS4ScaleBf16
getScale	xbyak/xbyak.h	/^	int getScale() const { return scale_; }$/;"	f	class:Xbyak::RegExp
getSerializedSize	jit_blas_prologue.h	/^  virtual size_t getSerializedSize() {$/;"	f	class:jblas::prologue::PackedWeight
getSize	jit_blas_prologue.h	/^  inline size_t getSize() const {$/;"	f	class:jblas::prologue::gemm::StorageWeight
getSize	jit_blas_prologue.h	/^  static size_t getSize(int NPad, int KPad, int EleBytes) { return (size_t)NPad * KPad * EleBytes; }$/;"	f	class:jblas::prologue::gemm::StorageWeight
getSize	jit_blas_prologue.h	/^  static size_t getSize(int m, int k, int kblock) {$/;"	f	class:jblas::prologue::gemm::StorageQuantActivationKblock
getSize	jit_blas_prologue.h	/^  static size_t getSize(int m, int lda, int lds) {$/;"	f	class:jblas::prologue::gemm::StorageQuantActivation
getSize	xbyak/xbyak.h	/^	size_t getSize() const { return size_; }$/;"	f	class:Xbyak::CodeArray
getThreads	jit_blas_utils.h	/^  inline int getThreads() { return numthreads; }$/;"	f	class:jblas::utils::parallel::CpuDevice
getTmpSize	jit_blas_utils.h	/^  size_t getTmpSize(size_t elesize, int sizepadding = 64) {$/;"	f	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
getVal	xbyak/xbyak.h	/^		uint64_t getVal(const uint8_t *top) const$/;"	f	struct:Xbyak::CodeArray::AddrInfo
getVersion	xbyak/xbyak.h	/^	unsigned int getVersion() const { return VERSION; }$/;"	f	class:Xbyak::CodeGenerator
getVersionString	xbyak/xbyak_mnemonic.h	/^const char *getVersionString() const { return "6.69.1"; }$/;"	f
getWeight	jit_blas_prologue.h	/^  inline JBLAS_CODE getWeight(WType** dstptr, int* dststep, int k_size, int n_size, int k_offset, int n_offset,$/;"	f	class:jblas::prologue::gemm::WeightPack
getWeight	jit_blas_weight_compression.h	/^  virtual inline JBLAS_CODE getWeight(float** dstptr, int* dststep, int k_size, int n_size, int k_offset, int n_offset,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
getWeight	jit_blas_weight_compression.h	/^  virtual inline JBLAS_CODE getWeight(int8_t** dstptr, int* dststep, int k_size, int n_size, int k_offset, int n_offset,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
getWeight	jit_blas_weight_compression.h	/^  virtual inline JBLAS_CODE getWeight(utils::bf16** dstptr, int* dststep, int k_size, int n_size, int k_offset,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightF4ScaleFp32
getWeight	jit_blas_weight_compression.h	/^  virtual inline JBLAS_CODE getWeight(utils::bf16** dstptr, int* dststep, int k_size, int n_size, int k_offset,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS4ScaleFp32
getWeightPtr	jit_blas_transformer.h	/^  WeightType* getWeightPtr() { return &mLauncher.mProB; }$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight
getWeightPtr	jit_blas_transformer.h	/^  WeightType* getWeightPtr() { return &mLauncher.mProB; }$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfacePackWeight
getWeightPtr	jit_blas_weight_compression.h	/^  WeightType* getWeightPtr() { return &mLauncher.mProB; }$/;"	f	class:jblas::wrapper::gemm_kblock::GemmInterfaceKBlockPackWeight
getWeightPtr	jit_blas_weight_compression.h	/^  WeightType* getWeightPtr() { return &mLauncher.mProB; }$/;"	f	class:jblas::wrapper::gemm_kblock::GemmInterfaceKblockAB
getWeightPtr	jit_blas_wrapper.h	/^  WeightType* getWeightPtr() { return &mLauncher.mProB; }$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmInterfaceAB
getWeightPtr	jit_blas_wrapper.h	/^  WeightType* getWeightPtr() { return &mLauncher.mProB; }$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmInterfacePackWeight
getWeightSize	jit_blas_gemm.h	/^static inline size_t getWeightSize(GemmCoreType _type) {$/;"	f	namespace:jblas::gemm
getWorkSpaceSize	jit_blas_prologue.h	/^  size_t getWorkSpaceSize(int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32AsymU8Quantize
getWorkSpaceSize	jit_blas_prologue.h	/^  size_t getWorkSpaceSize(int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32SymS8Quantize
getWorkSpaceSize	jit_blas_prologue.h	/^  size_t getWorkSpaceSize(int n, int k) {$/;"	f	class:jblas::prologue::gemm::WeightPack
getXfeature	xbyak/xbyak_util.h	/^	static inline uint64_t getXfeature()$/;"	f	class:Xbyak::util::Cpu
getZp	jit_blas_prologue.h	/^  static inline JBLAS_CODE getZp(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size,$/;"	f	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
getZp	jit_blas_prologue.h	/^  static inline JBLAS_CODE getZp(AType** dstptr, int* dststep, const Param& _param, int m_size, int k_size,$/;"	f	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
get_log_str	jit_blas_utils.h	/^  const char* get_log_str() {$/;"	f	class:jblas::utils::timer_statistics_logger
get_s8	kernel_ref.h	/^inline int8_t get_s8(int8_t v) {$/;"	f	namespace:jblas::kernel::ref
get_scales	jit_blas_weight_compression.h	/^  SRC_T* get_scales() { return mScales.data(); }$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
get_zps	jit_blas_weight_compression.h	/^  DST_T* get_zps() { return mZeroPoints.data(); }$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
gf2p8affineinvqb	xbyak/xbyak_mnemonic.h	/^void gf2p8affineinvqb(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0xCF, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
gf2p8affineqb	xbyak/xbyak_mnemonic.h	/^void gf2p8affineqb(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0xCE, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
gf2p8mulb	xbyak/xbyak_mnemonic.h	/^void gf2p8mulb(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xCF, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
growMemory	xbyak/xbyak.h	/^	void growMemory()$/;"	f	class:Xbyak::CodeArray
gs	xbyak/xbyak.h	/^		es, cs, ss, ds, fs, gs$/;"	e	enum:Xbyak::Segment::__anon6
gs	xbyak/xbyak.h	/^	const Segment es, cs, ss, ds, fs, gs;$/;"	m	class:Xbyak::CodeGenerator
h	kernel_jit_injector.h	/^  Xbyak::CodeGenerator* h = nullptr;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
haddpd	xbyak/xbyak_mnemonic.h	/^void haddpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x7C, 0x66, isXMM_XMMorMEM); }$/;"	f
haddps	xbyak/xbyak_mnemonic.h	/^void haddps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x7C, 0xF2, isXMM_XMMorMEM); }$/;"	f
half	kernel_jit_injector.h	/^    half,                                 \/\/ 0.5f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
has	xbyak/xbyak_util.h	/^	bool has(const Type& type) const$/;"	f	class:Xbyak::util::Cpu
hasEvex	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool hasEvex() const { return isZMM() || isExtIdx2() || getOpmaskIdx() || getRounding(); }$/;"	f	class:Xbyak::Operand
hasRex	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool hasRex() const { return isExt8bit() || isREG(64) || isExtIdx(); }$/;"	f	class:Xbyak::Operand
hasUndefClabel	xbyak/xbyak.h	/^	bool hasUndefClabel() const { return hasUndefinedLabel_inner(clabelUndefList_); }$/;"	f	class:Xbyak::LabelManager
hasUndefSlabel	xbyak/xbyak.h	/^	bool hasUndefSlabel() const$/;"	f	class:Xbyak::LabelManager
hasUndefinedLabel	xbyak/xbyak.h	/^	bool hasUndefinedLabel() const { return labelMgr_.hasUndefSlabel() || labelMgr_.hasUndefClabel(); }$/;"	f	class:Xbyak::CodeGenerator
hasUndefinedLabel_inner	xbyak/xbyak.h	/^	bool hasUndefinedLabel_inner(const T& list) const$/;"	f	class:Xbyak::LabelManager
hasZero	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool hasZero() const { return zero_; }$/;"	f	class:Xbyak::Operand
hlt	xbyak/xbyak_mnemonic.h	/^void hlt() { db(0xF4); }$/;"	f
hsubpd	xbyak/xbyak_mnemonic.h	/^void hsubpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x7D, 0x66, isXMM_XMMorMEM); }$/;"	f
hsubps	xbyak/xbyak_mnemonic.h	/^void hsubps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x7D, 0xF2, isXMM_XMMorMEM); }$/;"	f
i32e	xbyak/xbyak.h	/^	enum { i32e = 32 | 64 };$/;"	e	enum:Xbyak::RegExp::__anon7
i32e	xbyak/xbyak.h	/^	enum { i32e = 32 | 64, BIT = 64 };$/;"	e	enum:Xbyak::CodeGenerator::__anon9
i32e	xbyak/xbyak.h	/^	enum { i32e = 32, BIT = 32 };$/;"	e	enum:Xbyak::CodeGenerator::__anon10
id	xbyak/xbyak.h	/^	mutable int id;$/;"	m	class:Xbyak::Label
idiv	xbyak/xbyak_mnemonic.h	/^void idiv(const Operand& op) { opR_ModM(op, 0, 7, 0xF6); }$/;"	f
idx_	xbyak/xbyak.h	/^	int idx_;$/;"	m	class:Xbyak::Segment
imul	xbyak/xbyak.h	/^	void imul(const Reg& reg, const Operand& op)$/;"	f	class:Xbyak::CodeGenerator
imul	xbyak/xbyak.h	/^	void imul(const Reg& reg, const Operand& op, int imm)$/;"	f	class:Xbyak::CodeGenerator
imul	xbyak/xbyak_mnemonic.h	/^void imul(const Operand& op) { opR_ModM(op, 0, 5, 0xF6); }$/;"	f
inLocalLabel	xbyak/xbyak.h	/^	void inLocalLabel() { labelMgr_.enterLocal(); }$/;"	f	class:Xbyak::CodeGenerator
in_	xbyak/xbyak_mnemonic.h	/^void in_(const Reg& a, const Reg& d) { opInOut(a, d, 0xEC); }$/;"	f
in_	xbyak/xbyak_mnemonic.h	/^void in_(const Reg& a, uint8_t v) { opInOut(a, 0xE4, v); }$/;"	f
inc	xbyak/xbyak_mnemonic.h	/^void inc(const Operand& op) { opIncDec(op, 0x40, 0); }$/;"	f
incRefCount	xbyak/xbyak.h	/^	void incRefCount(int id, Label *label)$/;"	f	class:Xbyak::LabelManager
index_	xbyak/xbyak.h	/^	Reg index_;$/;"	m	class:Xbyak::RegExp
init	xbyak/xbyak_util.h	/^	void init(const Xbyak::Reg64 *tbl, size_t n)$/;"	f	class:Xbyak::util::Pack
init	xbyak/xbyak_util.h	/^	void init(int mode)$/;"	f	class:Xbyak::util::Profiler
init_accumulator_mem	jit_blas_gemm.h	/^    void init_accumulator_mem(int _NRegs) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
init_scales	jit_blas_weight_compression.h	/^  void init_scales(size_t _size, SRC_T* _scales, int memalloc = 0) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
init_zp	jit_blas_weight_compression.h	/^  void init_zp(size_t _size, DST_T* _zeroPoints, int memalloc = 0) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
inner	xbyak/xbyak.h	/^namespace inner {$/;"	n	namespace:Xbyak
insertps	xbyak/xbyak_mnemonic.h	/^void insertps(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x21, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
int3	xbyak/xbyak_mnemonic.h	/^void int3() { db(0xCC); }$/;"	f
int4x2	jit_blas_utils.h	/^  int4x2() : bit4x2() {}$/;"	f	struct:jblas::utils::int4x2
int4x2	jit_blas_utils.h	/^  int4x2(int8_t v) : bit4x2(v) {}$/;"	f	struct:jblas::utils::int4x2
int4x2	jit_blas_utils.h	/^struct int4x2 : bit4x2 {$/;"	s	namespace:jblas::utils
int_	xbyak/xbyak_mnemonic.h	/^void int_(uint8_t x) { db(0xCD); db(x); }$/;"	f
interleave_2rows_4regs	jit_base.hpp	/^  void interleave_2rows_4regs(Xbyak::Zmm* src_2regs, Xbyak::Zmm* tmp_2reg) {$/;"	f	class:jblas::xbyak::JitAvx512f
interleave_4rows_6regs	jit_base.hpp	/^  void interleave_4rows_6regs(Xbyak::Zmm* src_4regs, Xbyak::Zmm* tmp_regs, const Xbyak::Opmask* masks) {$/;"	f	class:jblas::xbyak::JitAvx512f
interleave_word	kernel_avx512f.h	/^static inline void interleave_word(std::array<__m512i, 2>& dst) {  \/\/ NOLINT [runtime\/references]$/;"	f	namespace:jblas::kernel::avx512f
into	xbyak/xbyak_mnemonic.h	/^void into() { db(0xCE); }$/;"	f
intrin	ut/kernel_intrin.cpp	/^namespace intrin {}  \/\/ namespace intrin$/;"	n	namespace:jblas::ut	file:
is	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool is(int kind, uint32_t bit = 0) const$/;"	f	class:Xbyak::Operand
is32bit	xbyak/xbyak.h	/^	bool is32bit() const { return e_.getBase().getBit() == 32 || e_.getIndex().getBit() == 32; }$/;"	f	class:Xbyak::Address
is64bitDisp	xbyak/xbyak.h	/^	bool is64bitDisp() const { return mode_ == M_64bitDisp; } \/\/ for moffset$/;"	f	class:Xbyak::Address
isAddr_	xbyak/xbyak.h	/^	bool isAddr_;$/;"	m	struct:Xbyak::RegRip
isAllocType	xbyak/xbyak.h	/^	bool isAllocType() const { return type_ == ALLOC_BUF || type_ == AUTO_GROW; }$/;"	f	class:Xbyak::CodeArray
isAutoGrow	xbyak/xbyak.h	/^	bool isAutoGrow() const { return type_ == AUTO_GROW; }$/;"	f	class:Xbyak::CodeArray
isBNDREG	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isBNDREG() const { return is(BNDREG); }$/;"	f	class:Xbyak::Operand
isBit	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isBit(uint32_t bit) const { return (bit_ & bit) != 0; }$/;"	f	class:Xbyak::Operand
isBroadcast	xbyak/xbyak.h	/^	bool isBroadcast() const { return broadcast_; }$/;"	f	class:Xbyak::Address
isCalledCalcJmpAddress	xbyak/xbyak.h	/^	bool isCalledCalcJmpAddress() const { return isCalledCalcJmpAddress_; }$/;"	f	class:Xbyak::CodeArray
isCalledCalcJmpAddress_	xbyak/xbyak.h	/^	bool isCalledCalcJmpAddress_;$/;"	m	class:Xbyak::CodeArray
isDefaultJmpNEAR_	xbyak/xbyak.h	/^	bool isDefaultJmpNEAR_;$/;"	m	class:Xbyak::CodeGenerator
isEqualIfNotInherited	xbyak/xbyak.h	/^	bool isEqualIfNotInherited(const Operand& rhs) const { return idx_ == rhs.idx_ && kind_ == rhs.kind_ && bit_ == rhs.bit_ && zero_ == rhs.zero_ && mask_ == rhs.mask_ && rounding_ == rhs.rounding_; }$/;"	f	class:Xbyak::Operand
isExt8bit	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isExt8bit() const { return (idx_ & EXT8BIT) != 0; }$/;"	f	class:Xbyak::Operand
isExtIdx	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isExtIdx() const { return (getIdx() & 8) != 0; }$/;"	f	class:Xbyak::Operand
isExtIdx2	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isExtIdx2() const { return (getIdx() & 16) != 0; }$/;"	f	class:Xbyak::Operand
isFPU	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isFPU() const { return is(FPU); }$/;"	f	class:Xbyak::Operand
isHigh8bit	xbyak/xbyak.h	/^	bool isHigh8bit() const$/;"	f	class:Xbyak::Operand
isInDisp16	xbyak/xbyak.h	/^	bool isInDisp16(uint32_t x) const { return 0xFFFF8000 <= x || x <= 0x7FFF; }$/;"	f	class:Xbyak::CodeGenerator
isMEM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isMEM(int bit = 0) const { return is(MEM, bit); }$/;"	f	class:Xbyak::Operand
isMMX	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isMMX() const { return is(MMX); }$/;"	f	class:Xbyak::Operand
isMMX_XMMorMEM	xbyak/xbyak.h	/^	static inline bool isMMX_XMMorMEM(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
isNEAR	xbyak/xbyak.h	/^	bool isNEAR(LabelType type) const { return type == T_NEAR || (type == T_AUTO && isDefaultJmpNEAR_); }$/;"	f	class:Xbyak::CodeGenerator
isNone	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isNone() const { return kind_ == 0; }$/;"	f	class:Xbyak::Operand
isOPMASK	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isOPMASK() const { return is(OPMASK); }$/;"	f	class:Xbyak::Operand
isOnlyDisp	xbyak/xbyak.h	/^	bool isOnlyDisp() const { return !e_.getBase().getBit() && !e_.getIndex().getBit(); } \/\/ for mov eax$/;"	f	class:Xbyak::Address
isREG	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isREG(int bit = 0) const { return is(REG, bit); }$/;"	f	class:Xbyak::Operand
isREG32_REG32orMEM	xbyak/xbyak.h	/^	static inline bool isREG32_REG32orMEM(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
isREG32_XMMorMEM	xbyak/xbyak.h	/^	static inline bool isREG32_XMMorMEM(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
isReady	xbyak/xbyak.h	/^	bool isReady() const { return !base_->isAutoGrow() || base_->isCalledCalcJmpAddress(); }$/;"	f	class:Xbyak::LabelManager
isSym	jit_blas_weight_compression.h	/^  bool isSym = true;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
isTMM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isTMM() const { return is(TMM); }$/;"	f	class:Xbyak::Operand
isValidSSE	xbyak/xbyak.h	/^	static inline bool isValidSSE(const Operand& op1)$/;"	f	class:Xbyak::CodeGenerator
isVsib	xbyak/xbyak.h	/^	bool isVsib() const { return e_.isVsib(); }$/;"	f	class:Xbyak::Address
isVsib	xbyak/xbyak.h	/^	bool isVsib(int bit = 128 | 256 | 512) const { return index_.isBit(bit); }$/;"	f	class:Xbyak::RegExp
isXMEM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isXMEM() const { return is(XMM | MEM); }$/;"	f	class:Xbyak::Operand
isXMM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isXMM() const { return is(XMM); }$/;"	f	class:Xbyak::Operand
isXMM_MMXorMEM	xbyak/xbyak.h	/^	static inline bool isXMM_MMXorMEM(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
isXMM_REG32orMEM	xbyak/xbyak.h	/^	static inline bool isXMM_REG32orMEM(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
isXMM_XMMorMEM	xbyak/xbyak.h	/^	static inline bool isXMM_XMMorMEM(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
isXMMorMMX_MEM	xbyak/xbyak.h	/^	static inline bool isXMMorMMX_MEM(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
isYMEM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isYMEM() const { return is(YMM | MEM); }$/;"	f	class:Xbyak::Operand
isYMM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isYMM() const { return is(YMM); }$/;"	f	class:Xbyak::Operand
isZMEM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isZMEM() const { return is(ZMM | MEM); }$/;"	f	class:Xbyak::Operand
isZMM	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR bool isZMM() const { return is(ZMM); }$/;"	f	class:Xbyak::Operand
is_sym	jit_blas_weight_compression.h	/^  constexpr bool is_sym() { return isSym; }$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
isa_base	jit_blas_utils.h	/^class isa_base {$/;"	c	namespace:jblas::utils
ja	xbyak/xbyak_mnemonic.h	/^void ja(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x77, 0x87, 0x0F); }\/\/-V524$/;"	f
ja	xbyak/xbyak_mnemonic.h	/^void ja(const char *label, LabelType type = T_AUTO) { ja(std::string(label), type); }\/\/-V524$/;"	f
ja	xbyak/xbyak_mnemonic.h	/^void ja(const void *addr) { opJmpAbs(addr, T_NEAR, 0x77, 0x87, 0x0F); }\/\/-V524$/;"	f
ja	xbyak/xbyak_mnemonic.h	/^void ja(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x77, 0x87, 0x0F); }\/\/-V524$/;"	f
jae	xbyak/xbyak_mnemonic.h	/^void jae(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jae	xbyak/xbyak_mnemonic.h	/^void jae(const char *label, LabelType type = T_AUTO) { jae(std::string(label), type); }\/\/-V524$/;"	f
jae	xbyak/xbyak_mnemonic.h	/^void jae(const void *addr) { opJmpAbs(addr, T_NEAR, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jae	xbyak/xbyak_mnemonic.h	/^void jae(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jb	xbyak/xbyak_mnemonic.h	/^void jb(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jb	xbyak/xbyak_mnemonic.h	/^void jb(const char *label, LabelType type = T_AUTO) { jb(std::string(label), type); }\/\/-V524$/;"	f
jb	xbyak/xbyak_mnemonic.h	/^void jb(const void *addr) { opJmpAbs(addr, T_NEAR, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jb	xbyak/xbyak_mnemonic.h	/^void jb(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jbe	xbyak/xbyak_mnemonic.h	/^void jbe(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x76, 0x86, 0x0F); }\/\/-V524$/;"	f
jbe	xbyak/xbyak_mnemonic.h	/^void jbe(const char *label, LabelType type = T_AUTO) { jbe(std::string(label), type); }\/\/-V524$/;"	f
jbe	xbyak/xbyak_mnemonic.h	/^void jbe(const void *addr) { opJmpAbs(addr, T_NEAR, 0x76, 0x86, 0x0F); }\/\/-V524$/;"	f
jbe	xbyak/xbyak_mnemonic.h	/^void jbe(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x76, 0x86, 0x0F); }\/\/-V524$/;"	f
jblas	jit_base.hpp	/^namespace jblas {$/;"	n
jblas	jit_blas_epilogue.h	/^namespace jblas {$/;"	n
jblas	jit_blas_gemm.h	/^namespace jblas {$/;"	n
jblas	jit_blas_prologue.h	/^namespace jblas {$/;"	n
jblas	jit_blas_transformer.h	/^namespace jblas {$/;"	n
jblas	jit_blas_utils.h	/^namespace jblas {$/;"	n
jblas	jit_blas_weight_compression.h	/^namespace jblas {$/;"	n
jblas	jit_blas_wrapper.h	/^namespace jblas {$/;"	n
jblas	kernel_avx2.h	/^namespace jblas {$/;"	n
jblas	kernel_avx512f.h	/^namespace jblas {$/;"	n
jblas	kernel_jit.h	/^namespace jblas {$/;"	n
jblas	kernel_jit_injector.h	/^namespace jblas {$/;"	n
jblas	kernel_ref.h	/^namespace jblas {$/;"	n
jblas	kernel_wrapper.h	/^namespace jblas {$/;"	n
jblas	ut/jit_blas_epilogue.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/jit_blas_gemm.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/jit_blas_prologue.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/jit_blas_transformer.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/jit_blas_ut.h	/^namespace jblas {$/;"	n
jblas	ut/jit_blas_utils.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/jit_blas_weight_compression.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/jit_blas_wrapper.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/kernel_intrin.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/kernel_jit.cpp	/^namespace jblas {$/;"	n	file:
jblas	ut/kernel_wrapper.cpp	/^namespace jblas {$/;"	n	file:
jblas_bf16gemm	ut/jit_blas.cpp	/^void jblas_bf16gemm(const JBLAS_LAYOUT Layout, const JBLAS_TRANSPOSE TransA, const JBLAS_TRANSPOSE TransB, const int M,$/;"	f
jblas_sgemm	ut/jit_blas.cpp	/^void jblas_sgemm(const JBLAS_LAYOUT Layout, const JBLAS_TRANSPOSE TransA, const JBLAS_TRANSPOSE TransB, const int M,$/;"	f
jblas_u8s8gemm	ut/jit_blas.cpp	/^void jblas_u8s8gemm(const JBLAS_LAYOUT Layout, const JBLAS_TRANSPOSE TransA, const JBLAS_TRANSPOSE TransB, const int M,$/;"	f
jc	xbyak/xbyak_mnemonic.h	/^void jc(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jc	xbyak/xbyak_mnemonic.h	/^void jc(const char *label, LabelType type = T_AUTO) { jc(std::string(label), type); }\/\/-V524$/;"	f
jc	xbyak/xbyak_mnemonic.h	/^void jc(const void *addr) { opJmpAbs(addr, T_NEAR, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jc	xbyak/xbyak_mnemonic.h	/^void jc(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jcxz	xbyak/xbyak_mnemonic.h	/^void jcxz(const Label& label) { db(0x67); opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
jcxz	xbyak/xbyak_mnemonic.h	/^void jcxz(std::string label) { db(0x67); opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
je	xbyak/xbyak_mnemonic.h	/^void je(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x74, 0x84, 0x0F); }\/\/-V524$/;"	f
je	xbyak/xbyak_mnemonic.h	/^void je(const char *label, LabelType type = T_AUTO) { je(std::string(label), type); }\/\/-V524$/;"	f
je	xbyak/xbyak_mnemonic.h	/^void je(const void *addr) { opJmpAbs(addr, T_NEAR, 0x74, 0x84, 0x0F); }\/\/-V524$/;"	f
je	xbyak/xbyak_mnemonic.h	/^void je(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x74, 0x84, 0x0F); }\/\/-V524$/;"	f
jecxz	xbyak/xbyak_mnemonic.h	/^void jecxz(const Label& label) { db(0x67); opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
jecxz	xbyak/xbyak_mnemonic.h	/^void jecxz(const Label& label) { opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
jecxz	xbyak/xbyak_mnemonic.h	/^void jecxz(std::string label) { db(0x67); opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
jecxz	xbyak/xbyak_mnemonic.h	/^void jecxz(std::string label) { opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
jg	xbyak/xbyak_mnemonic.h	/^void jg(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7F, 0x8F, 0x0F); }\/\/-V524$/;"	f
jg	xbyak/xbyak_mnemonic.h	/^void jg(const char *label, LabelType type = T_AUTO) { jg(std::string(label), type); }\/\/-V524$/;"	f
jg	xbyak/xbyak_mnemonic.h	/^void jg(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7F, 0x8F, 0x0F); }\/\/-V524$/;"	f
jg	xbyak/xbyak_mnemonic.h	/^void jg(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7F, 0x8F, 0x0F); }\/\/-V524$/;"	f
jge	xbyak/xbyak_mnemonic.h	/^void jge(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7D, 0x8D, 0x0F); }\/\/-V524$/;"	f
jge	xbyak/xbyak_mnemonic.h	/^void jge(const char *label, LabelType type = T_AUTO) { jge(std::string(label), type); }\/\/-V524$/;"	f
jge	xbyak/xbyak_mnemonic.h	/^void jge(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7D, 0x8D, 0x0F); }\/\/-V524$/;"	f
jge	xbyak/xbyak_mnemonic.h	/^void jge(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7D, 0x8D, 0x0F); }\/\/-V524$/;"	f
jit	kernel_jit.h	/^    Xbyak::CodeGenerator* jit;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
jit	kernel_jit.h	/^namespace jit {$/;"	n	namespace:jblas::kernel
jit	ut/kernel_jit.cpp	/^namespace jit {$/;"	n	namespace:jblas::ut	file:
jit_injector	kernel_jit_injector.h	/^namespace jit_injector {$/;"	n	namespace:jblas::kernel
jl	xbyak/xbyak_mnemonic.h	/^void jl(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7C, 0x8C, 0x0F); }\/\/-V524$/;"	f
jl	xbyak/xbyak_mnemonic.h	/^void jl(const char *label, LabelType type = T_AUTO) { jl(std::string(label), type); }\/\/-V524$/;"	f
jl	xbyak/xbyak_mnemonic.h	/^void jl(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7C, 0x8C, 0x0F); }\/\/-V524$/;"	f
jl	xbyak/xbyak_mnemonic.h	/^void jl(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7C, 0x8C, 0x0F); }\/\/-V524$/;"	f
jle	xbyak/xbyak_mnemonic.h	/^void jle(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7E, 0x8E, 0x0F); }\/\/-V524$/;"	f
jle	xbyak/xbyak_mnemonic.h	/^void jle(const char *label, LabelType type = T_AUTO) { jle(std::string(label), type); }\/\/-V524$/;"	f
jle	xbyak/xbyak_mnemonic.h	/^void jle(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7E, 0x8E, 0x0F); }\/\/-V524$/;"	f
jle	xbyak/xbyak_mnemonic.h	/^void jle(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7E, 0x8E, 0x0F); }\/\/-V524$/;"	f
jmp	xbyak/xbyak.h	/^	void jmp(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0xEB, 0xE9, 0); }$/;"	f	class:Xbyak::CodeGenerator
jmp	xbyak/xbyak.h	/^	void jmp(const Operand& op, LabelType type = T_AUTO) { opJmpOp(op, type, 4); }$/;"	f	class:Xbyak::CodeGenerator
jmp	xbyak/xbyak.h	/^	void jmp(const char *label, LabelType type = T_AUTO) { jmp(std::string(label), type); }$/;"	f	class:Xbyak::CodeGenerator
jmp	xbyak/xbyak.h	/^	void jmp(const void *addr, LabelType type = T_AUTO) { opJmpAbs(addr, type, 0xEB, 0xE9); }$/;"	f	class:Xbyak::CodeGenerator
jmp	xbyak/xbyak.h	/^	void jmp(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0xEB, 0xE9, 0); }$/;"	f	class:Xbyak::CodeGenerator
jmpAddr	xbyak/xbyak.h	/^		size_t jmpAddr; \/\/ value to write$/;"	m	struct:Xbyak::CodeArray::AddrInfo
jmpSize	xbyak/xbyak.h	/^		int jmpSize; \/\/ size of jmpAddr$/;"	m	struct:Xbyak::CodeArray::AddrInfo
jmpSize	xbyak/xbyak.h	/^	int jmpSize;$/;"	m	struct:Xbyak::JmpLabel
jna	xbyak/xbyak_mnemonic.h	/^void jna(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x76, 0x86, 0x0F); }\/\/-V524$/;"	f
jna	xbyak/xbyak_mnemonic.h	/^void jna(const char *label, LabelType type = T_AUTO) { jna(std::string(label), type); }\/\/-V524$/;"	f
jna	xbyak/xbyak_mnemonic.h	/^void jna(const void *addr) { opJmpAbs(addr, T_NEAR, 0x76, 0x86, 0x0F); }\/\/-V524$/;"	f
jna	xbyak/xbyak_mnemonic.h	/^void jna(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x76, 0x86, 0x0F); }\/\/-V524$/;"	f
jnae	xbyak/xbyak_mnemonic.h	/^void jnae(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jnae	xbyak/xbyak_mnemonic.h	/^void jnae(const char *label, LabelType type = T_AUTO) { jnae(std::string(label), type); }\/\/-V524$/;"	f
jnae	xbyak/xbyak_mnemonic.h	/^void jnae(const void *addr) { opJmpAbs(addr, T_NEAR, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jnae	xbyak/xbyak_mnemonic.h	/^void jnae(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x72, 0x82, 0x0F); }\/\/-V524$/;"	f
jnb	xbyak/xbyak_mnemonic.h	/^void jnb(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jnb	xbyak/xbyak_mnemonic.h	/^void jnb(const char *label, LabelType type = T_AUTO) { jnb(std::string(label), type); }\/\/-V524$/;"	f
jnb	xbyak/xbyak_mnemonic.h	/^void jnb(const void *addr) { opJmpAbs(addr, T_NEAR, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jnb	xbyak/xbyak_mnemonic.h	/^void jnb(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jnbe	xbyak/xbyak_mnemonic.h	/^void jnbe(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x77, 0x87, 0x0F); }\/\/-V524$/;"	f
jnbe	xbyak/xbyak_mnemonic.h	/^void jnbe(const char *label, LabelType type = T_AUTO) { jnbe(std::string(label), type); }\/\/-V524$/;"	f
jnbe	xbyak/xbyak_mnemonic.h	/^void jnbe(const void *addr) { opJmpAbs(addr, T_NEAR, 0x77, 0x87, 0x0F); }\/\/-V524$/;"	f
jnbe	xbyak/xbyak_mnemonic.h	/^void jnbe(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x77, 0x87, 0x0F); }\/\/-V524$/;"	f
jnc	xbyak/xbyak_mnemonic.h	/^void jnc(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jnc	xbyak/xbyak_mnemonic.h	/^void jnc(const char *label, LabelType type = T_AUTO) { jnc(std::string(label), type); }\/\/-V524$/;"	f
jnc	xbyak/xbyak_mnemonic.h	/^void jnc(const void *addr) { opJmpAbs(addr, T_NEAR, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jnc	xbyak/xbyak_mnemonic.h	/^void jnc(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x73, 0x83, 0x0F); }\/\/-V524$/;"	f
jne	xbyak/xbyak_mnemonic.h	/^void jne(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x75, 0x85, 0x0F); }\/\/-V524$/;"	f
jne	xbyak/xbyak_mnemonic.h	/^void jne(const char *label, LabelType type = T_AUTO) { jne(std::string(label), type); }\/\/-V524$/;"	f
jne	xbyak/xbyak_mnemonic.h	/^void jne(const void *addr) { opJmpAbs(addr, T_NEAR, 0x75, 0x85, 0x0F); }\/\/-V524$/;"	f
jne	xbyak/xbyak_mnemonic.h	/^void jne(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x75, 0x85, 0x0F); }\/\/-V524$/;"	f
jng	xbyak/xbyak_mnemonic.h	/^void jng(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7E, 0x8E, 0x0F); }\/\/-V524$/;"	f
jng	xbyak/xbyak_mnemonic.h	/^void jng(const char *label, LabelType type = T_AUTO) { jng(std::string(label), type); }\/\/-V524$/;"	f
jng	xbyak/xbyak_mnemonic.h	/^void jng(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7E, 0x8E, 0x0F); }\/\/-V524$/;"	f
jng	xbyak/xbyak_mnemonic.h	/^void jng(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7E, 0x8E, 0x0F); }\/\/-V524$/;"	f
jnge	xbyak/xbyak_mnemonic.h	/^void jnge(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7C, 0x8C, 0x0F); }\/\/-V524$/;"	f
jnge	xbyak/xbyak_mnemonic.h	/^void jnge(const char *label, LabelType type = T_AUTO) { jnge(std::string(label), type); }\/\/-V524$/;"	f
jnge	xbyak/xbyak_mnemonic.h	/^void jnge(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7C, 0x8C, 0x0F); }\/\/-V524$/;"	f
jnge	xbyak/xbyak_mnemonic.h	/^void jnge(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7C, 0x8C, 0x0F); }\/\/-V524$/;"	f
jnl	xbyak/xbyak.h	2835;"	d
jnl	xbyak/xbyak_mnemonic.h	/^void jnl(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7D, 0x8D, 0x0F); }\/\/-V524$/;"	f
jnl	xbyak/xbyak_mnemonic.h	/^void jnl(const char *label, LabelType type = T_AUTO) { jnl(std::string(label), type); }\/\/-V524$/;"	f
jnl	xbyak/xbyak_mnemonic.h	/^void jnl(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7D, 0x8D, 0x0F); }\/\/-V524$/;"	f
jnl	xbyak/xbyak_mnemonic.h	/^void jnl(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7D, 0x8D, 0x0F); }\/\/-V524$/;"	f
jnle	xbyak/xbyak_mnemonic.h	/^void jnle(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7F, 0x8F, 0x0F); }\/\/-V524$/;"	f
jnle	xbyak/xbyak_mnemonic.h	/^void jnle(const char *label, LabelType type = T_AUTO) { jnle(std::string(label), type); }\/\/-V524$/;"	f
jnle	xbyak/xbyak_mnemonic.h	/^void jnle(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7F, 0x8F, 0x0F); }\/\/-V524$/;"	f
jnle	xbyak/xbyak_mnemonic.h	/^void jnle(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7F, 0x8F, 0x0F); }\/\/-V524$/;"	f
jno	xbyak/xbyak_mnemonic.h	/^void jno(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x71, 0x81, 0x0F); }\/\/-V524$/;"	f
jno	xbyak/xbyak_mnemonic.h	/^void jno(const char *label, LabelType type = T_AUTO) { jno(std::string(label), type); }\/\/-V524$/;"	f
jno	xbyak/xbyak_mnemonic.h	/^void jno(const void *addr) { opJmpAbs(addr, T_NEAR, 0x71, 0x81, 0x0F); }\/\/-V524$/;"	f
jno	xbyak/xbyak_mnemonic.h	/^void jno(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x71, 0x81, 0x0F); }\/\/-V524$/;"	f
jnp	xbyak/xbyak_mnemonic.h	/^void jnp(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7B, 0x8B, 0x0F); }\/\/-V524$/;"	f
jnp	xbyak/xbyak_mnemonic.h	/^void jnp(const char *label, LabelType type = T_AUTO) { jnp(std::string(label), type); }\/\/-V524$/;"	f
jnp	xbyak/xbyak_mnemonic.h	/^void jnp(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7B, 0x8B, 0x0F); }\/\/-V524$/;"	f
jnp	xbyak/xbyak_mnemonic.h	/^void jnp(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7B, 0x8B, 0x0F); }\/\/-V524$/;"	f
jns	xbyak/xbyak_mnemonic.h	/^void jns(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x79, 0x89, 0x0F); }\/\/-V524$/;"	f
jns	xbyak/xbyak_mnemonic.h	/^void jns(const char *label, LabelType type = T_AUTO) { jns(std::string(label), type); }\/\/-V524$/;"	f
jns	xbyak/xbyak_mnemonic.h	/^void jns(const void *addr) { opJmpAbs(addr, T_NEAR, 0x79, 0x89, 0x0F); }\/\/-V524$/;"	f
jns	xbyak/xbyak_mnemonic.h	/^void jns(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x79, 0x89, 0x0F); }\/\/-V524$/;"	f
jnz	xbyak/xbyak_mnemonic.h	/^void jnz(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x75, 0x85, 0x0F); }\/\/-V524$/;"	f
jnz	xbyak/xbyak_mnemonic.h	/^void jnz(const char *label, LabelType type = T_AUTO) { jnz(std::string(label), type); }\/\/-V524$/;"	f
jnz	xbyak/xbyak_mnemonic.h	/^void jnz(const void *addr) { opJmpAbs(addr, T_NEAR, 0x75, 0x85, 0x0F); }\/\/-V524$/;"	f
jnz	xbyak/xbyak_mnemonic.h	/^void jnz(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x75, 0x85, 0x0F); }\/\/-V524$/;"	f
jo	xbyak/xbyak_mnemonic.h	/^void jo(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x70, 0x80, 0x0F); }\/\/-V524$/;"	f
jo	xbyak/xbyak_mnemonic.h	/^void jo(const char *label, LabelType type = T_AUTO) { jo(std::string(label), type); }\/\/-V524$/;"	f
jo	xbyak/xbyak_mnemonic.h	/^void jo(const void *addr) { opJmpAbs(addr, T_NEAR, 0x70, 0x80, 0x0F); }\/\/-V524$/;"	f
jo	xbyak/xbyak_mnemonic.h	/^void jo(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x70, 0x80, 0x0F); }\/\/-V524$/;"	f
jp	xbyak/xbyak_mnemonic.h	/^void jp(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7A, 0x8A, 0x0F); }\/\/-V524$/;"	f
jp	xbyak/xbyak_mnemonic.h	/^void jp(const char *label, LabelType type = T_AUTO) { jp(std::string(label), type); }\/\/-V524$/;"	f
jp	xbyak/xbyak_mnemonic.h	/^void jp(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7A, 0x8A, 0x0F); }\/\/-V524$/;"	f
jp	xbyak/xbyak_mnemonic.h	/^void jp(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7A, 0x8A, 0x0F); }\/\/-V524$/;"	f
jpe	xbyak/xbyak_mnemonic.h	/^void jpe(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7A, 0x8A, 0x0F); }\/\/-V524$/;"	f
jpe	xbyak/xbyak_mnemonic.h	/^void jpe(const char *label, LabelType type = T_AUTO) { jpe(std::string(label), type); }\/\/-V524$/;"	f
jpe	xbyak/xbyak_mnemonic.h	/^void jpe(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7A, 0x8A, 0x0F); }\/\/-V524$/;"	f
jpe	xbyak/xbyak_mnemonic.h	/^void jpe(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7A, 0x8A, 0x0F); }\/\/-V524$/;"	f
jpo	xbyak/xbyak_mnemonic.h	/^void jpo(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x7B, 0x8B, 0x0F); }\/\/-V524$/;"	f
jpo	xbyak/xbyak_mnemonic.h	/^void jpo(const char *label, LabelType type = T_AUTO) { jpo(std::string(label), type); }\/\/-V524$/;"	f
jpo	xbyak/xbyak_mnemonic.h	/^void jpo(const void *addr) { opJmpAbs(addr, T_NEAR, 0x7B, 0x8B, 0x0F); }\/\/-V524$/;"	f
jpo	xbyak/xbyak_mnemonic.h	/^void jpo(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x7B, 0x8B, 0x0F); }\/\/-V524$/;"	f
jrcxz	xbyak/xbyak_mnemonic.h	/^void jrcxz(const Label& label) { opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
jrcxz	xbyak/xbyak_mnemonic.h	/^void jrcxz(std::string label) { opJmp(label, T_SHORT, 0xe3, 0, 0); }$/;"	f
js	xbyak/xbyak_mnemonic.h	/^void js(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x78, 0x88, 0x0F); }\/\/-V524$/;"	f
js	xbyak/xbyak_mnemonic.h	/^void js(const char *label, LabelType type = T_AUTO) { js(std::string(label), type); }\/\/-V524$/;"	f
js	xbyak/xbyak_mnemonic.h	/^void js(const void *addr) { opJmpAbs(addr, T_NEAR, 0x78, 0x88, 0x0F); }\/\/-V524$/;"	f
js	xbyak/xbyak_mnemonic.h	/^void js(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x78, 0x88, 0x0F); }\/\/-V524$/;"	f
jz	xbyak/xbyak_mnemonic.h	/^void jz(const Label& label, LabelType type = T_AUTO) { opJmp(label, type, 0x74, 0x84, 0x0F); }\/\/-V524$/;"	f
jz	xbyak/xbyak_mnemonic.h	/^void jz(const char *label, LabelType type = T_AUTO) { jz(std::string(label), type); }\/\/-V524$/;"	f
jz	xbyak/xbyak_mnemonic.h	/^void jz(const void *addr) { opJmpAbs(addr, T_NEAR, 0x74, 0x84, 0x0F); }\/\/-V524$/;"	f
jz	xbyak/xbyak_mnemonic.h	/^void jz(std::string label, LabelType type = T_AUTO) { opJmp(label, type, 0x74, 0x84, 0x0F); }\/\/-V524$/;"	f
k	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
k	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
k	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
k	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
k	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
k	jit_blas_gemm.h	/^    int k, nsize, msize;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
k	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
k	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
k	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
k	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
k	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
k	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
k0	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k1	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k2	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k3	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k4	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k5	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k6	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k7	xbyak/xbyak.h	/^	const Opmask k0, k1, k2, k3, k4, k5, k6, k7;$/;"	m	class:Xbyak::CodeGenerator
k_mask	kernel_jit_injector.h	/^  Xbyak::Opmask k_mask;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
kaddb	xbyak/xbyak_mnemonic.h	/^void kaddb(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W0, 0x4A); }$/;"	f
kaddd	xbyak/xbyak_mnemonic.h	/^void kaddd(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W1, 0x4A); }$/;"	f
kaddq	xbyak/xbyak_mnemonic.h	/^void kaddq(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W1, 0x4A); }$/;"	f
kaddw	xbyak/xbyak_mnemonic.h	/^void kaddw(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W0, 0x4A); }$/;"	f
kandb	xbyak/xbyak_mnemonic.h	/^void kandb(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W0, 0x41); }$/;"	f
kandd	xbyak/xbyak_mnemonic.h	/^void kandd(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W1, 0x41); }$/;"	f
kandnb	xbyak/xbyak_mnemonic.h	/^void kandnb(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W0, 0x42); }$/;"	f
kandnd	xbyak/xbyak_mnemonic.h	/^void kandnd(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W1, 0x42); }$/;"	f
kandnq	xbyak/xbyak_mnemonic.h	/^void kandnq(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W1, 0x42); }$/;"	f
kandnw	xbyak/xbyak_mnemonic.h	/^void kandnw(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W0, 0x42); }$/;"	f
kandq	xbyak/xbyak_mnemonic.h	/^void kandq(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W1, 0x41); }$/;"	f
kandw	xbyak/xbyak_mnemonic.h	/^void kandw(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W0, 0x41); }$/;"	f
kblock	jit_blas_gemm.h	/^    int kblock;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
kblock	jit_blas_gemm.h	/^    int kblock;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
kblock	jit_blas_gemm.h	/^namespace kblock {$/;"	n	namespace:jblas::gemm
kblock	jit_blas_prologue.h	/^  int kblock;$/;"	m	class:jblas::prologue::gemm::StorageQuantActivationKblock
kblock	kernel_jit.h	/^  int kblock;$/;"	m	struct:decompress_block_s4_f32_codegen_param
kblockgemmref_u8zp_s8_f32	ut/jit_blas_ut.h	/^static inline void kblockgemmref_u8zp_s8_f32(int m, int n, int k, int kblock, uint8_t* A, uint8_t* zpA, float* scaleA,$/;"	f	namespace:jblas::ut
ker_	kernel_jit.h	/^    ker_t ker_;$/;"	m	class:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32
ker_t	kernel_jit.h	/^    typedef void (*ker_t)(params* p);$/;"	t	class:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32
kernel	kernel_avx2.h	/^namespace kernel {$/;"	n	namespace:jblas
kernel	kernel_avx512f.h	/^namespace kernel {$/;"	n	namespace:jblas
kernel	kernel_jit.h	/^namespace kernel {$/;"	n	namespace:jblas
kernel	kernel_jit_injector.h	/^namespace kernel {$/;"	n	namespace:jblas
kernel	kernel_ref.h	/^namespace kernel {$/;"	n	namespace:jblas
kernel	kernel_wrapper.h	/^namespace kernel {$/;"	n	namespace:jblas
kernel_wrapper	ut/kernel_wrapper.cpp	/^namespace kernel_wrapper {$/;"	n	namespace:jblas::ut	file:
key_t	kernel_jit_injector.h	/^  enum key_t {$/;"	g	class:jblas::kernel::jit_injector::eltwise_injector
kmovb	xbyak/xbyak_mnemonic.h	/^void kmovb(const Address& addr, const Opmask& k) { opVex(k, 0, addr, T_L0 | T_0F | T_66 | T_W0, 0x91); }$/;"	f
kmovb	xbyak/xbyak_mnemonic.h	/^void kmovb(const Opmask& k, const Operand& op) { if (!op.isMEM() && !op.isOPMASK()) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(k, 0, op, T_L0 | T_0F | T_66 | T_W0, 0x90); }$/;"	f
kmovb	xbyak/xbyak_mnemonic.h	/^void kmovb(const Opmask& k, const Reg32& r) { opVex(k, 0, r, T_L0 | T_0F | T_66 | T_W0, 0x92); }$/;"	f
kmovb	xbyak/xbyak_mnemonic.h	/^void kmovb(const Reg32& r, const Opmask& k) { opVex(r, 0, k, T_L0 | T_0F | T_66 | T_W0, 0x93); }$/;"	f
kmovd	xbyak/xbyak_mnemonic.h	/^void kmovd(const Address& addr, const Opmask& k) { opVex(k, 0, addr, T_L0 | T_0F | T_66 | T_W1, 0x91); }$/;"	f
kmovd	xbyak/xbyak_mnemonic.h	/^void kmovd(const Opmask& k, const Operand& op) { if (!op.isMEM() && !op.isOPMASK()) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(k, 0, op, T_L0 | T_0F | T_66 | T_W1, 0x90); }$/;"	f
kmovd	xbyak/xbyak_mnemonic.h	/^void kmovd(const Opmask& k, const Reg32& r) { opVex(k, 0, r, T_L0 | T_0F | T_F2 | T_W0, 0x92); }$/;"	f
kmovd	xbyak/xbyak_mnemonic.h	/^void kmovd(const Reg32& r, const Opmask& k) { opVex(r, 0, k, T_L0 | T_0F | T_F2 | T_W0, 0x93); }$/;"	f
kmovq	xbyak/xbyak_mnemonic.h	/^void kmovq(const Address& addr, const Opmask& k) { opVex(k, 0, addr, T_L0 | T_0F | T_W1, 0x91); }$/;"	f
kmovq	xbyak/xbyak_mnemonic.h	/^void kmovq(const Opmask& k, const Operand& op) { if (!op.isMEM() && !op.isOPMASK()) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(k, 0, op, T_L0 | T_0F | T_W1, 0x90); }$/;"	f
kmovq	xbyak/xbyak_mnemonic.h	/^void kmovq(const Opmask& k, const Reg64& r) { opVex(k, 0, r, T_L0 | T_0F | T_F2 | T_W1, 0x92); }$/;"	f
kmovq	xbyak/xbyak_mnemonic.h	/^void kmovq(const Reg64& r, const Opmask& k) { opVex(r, 0, k, T_L0 | T_0F | T_F2 | T_W1, 0x93); }$/;"	f
kmovw	xbyak/xbyak_mnemonic.h	/^void kmovw(const Address& addr, const Opmask& k) { opVex(k, 0, addr, T_L0 | T_0F | T_W0, 0x91); }$/;"	f
kmovw	xbyak/xbyak_mnemonic.h	/^void kmovw(const Opmask& k, const Operand& op) { if (!op.isMEM() && !op.isOPMASK()) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(k, 0, op, T_L0 | T_0F | T_W0, 0x90); }$/;"	f
kmovw	xbyak/xbyak_mnemonic.h	/^void kmovw(const Opmask& k, const Reg32& r) { opVex(k, 0, r, T_L0 | T_0F | T_W0, 0x92); }$/;"	f
kmovw	xbyak/xbyak_mnemonic.h	/^void kmovw(const Reg32& r, const Opmask& k) { opVex(r, 0, k, T_L0 | T_0F | T_W0, 0x93); }$/;"	f
knotb	xbyak/xbyak_mnemonic.h	/^void knotb(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_66 | T_W0, 0x44); }$/;"	f
knotd	xbyak/xbyak_mnemonic.h	/^void knotd(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_66 | T_W1, 0x44); }$/;"	f
knotq	xbyak/xbyak_mnemonic.h	/^void knotq(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_W1, 0x44); }$/;"	f
knotw	xbyak/xbyak_mnemonic.h	/^void knotw(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_W0, 0x44); }$/;"	f
korb	xbyak/xbyak_mnemonic.h	/^void korb(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W0, 0x45); }$/;"	f
kord	xbyak/xbyak_mnemonic.h	/^void kord(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W1, 0x45); }$/;"	f
korq	xbyak/xbyak_mnemonic.h	/^void korq(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W1, 0x45); }$/;"	f
kortestb	xbyak/xbyak_mnemonic.h	/^void kortestb(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_66 | T_W0, 0x98); }$/;"	f
kortestd	xbyak/xbyak_mnemonic.h	/^void kortestd(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_66 | T_W1, 0x98); }$/;"	f
kortestq	xbyak/xbyak_mnemonic.h	/^void kortestq(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_W1, 0x98); }$/;"	f
kortestw	xbyak/xbyak_mnemonic.h	/^void kortestw(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_W0, 0x98); }$/;"	f
korw	xbyak/xbyak_mnemonic.h	/^void korw(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W0, 0x45); }$/;"	f
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
kpos	jit_blas_gemm.h	/^    int kpos;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
kshiftlb	xbyak/xbyak_mnemonic.h	/^void kshiftlb(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W0, 0x32, imm); }$/;"	f
kshiftld	xbyak/xbyak_mnemonic.h	/^void kshiftld(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W0, 0x33, imm); }$/;"	f
kshiftlq	xbyak/xbyak_mnemonic.h	/^void kshiftlq(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W1, 0x33, imm); }$/;"	f
kshiftlw	xbyak/xbyak_mnemonic.h	/^void kshiftlw(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W1, 0x32, imm); }$/;"	f
kshiftrb	xbyak/xbyak_mnemonic.h	/^void kshiftrb(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W0, 0x30, imm); }$/;"	f
kshiftrd	xbyak/xbyak_mnemonic.h	/^void kshiftrd(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W0, 0x31, imm); }$/;"	f
kshiftrq	xbyak/xbyak_mnemonic.h	/^void kshiftrq(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W1, 0x31, imm); }$/;"	f
kshiftrw	xbyak/xbyak_mnemonic.h	/^void kshiftrw(const Opmask& r1, const Opmask& r2, uint8_t imm) { opVex(r1, 0, r2, T_66 | T_0F3A | T_W1, 0x30, imm); }$/;"	f
ktestb	xbyak/xbyak_mnemonic.h	/^void ktestb(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_66 | T_W0, 0x99); }$/;"	f
ktestd	xbyak/xbyak_mnemonic.h	/^void ktestd(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_66 | T_W1, 0x99); }$/;"	f
ktestq	xbyak/xbyak_mnemonic.h	/^void ktestq(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_W1, 0x99); }$/;"	f
ktestw	xbyak/xbyak_mnemonic.h	/^void ktestw(const Opmask& r1, const Opmask& r2) { opVex(r1, 0, r2, T_0F | T_W0, 0x99); }$/;"	f
kunpckbw	xbyak/xbyak_mnemonic.h	/^void kunpckbw(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W0, 0x4B); }$/;"	f
kunpckdq	xbyak/xbyak_mnemonic.h	/^void kunpckdq(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W1, 0x4B); }$/;"	f
kunpckwd	xbyak/xbyak_mnemonic.h	/^void kunpckwd(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W0, 0x4B); }$/;"	f
kxnorb	xbyak/xbyak_mnemonic.h	/^void kxnorb(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W0, 0x46); }$/;"	f
kxnord	xbyak/xbyak_mnemonic.h	/^void kxnord(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W1, 0x46); }$/;"	f
kxnorq	xbyak/xbyak_mnemonic.h	/^void kxnorq(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W1, 0x46); }$/;"	f
kxnorw	xbyak/xbyak_mnemonic.h	/^void kxnorw(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W0, 0x46); }$/;"	f
kxorb	xbyak/xbyak_mnemonic.h	/^void kxorb(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W0, 0x47); }$/;"	f
kxord	xbyak/xbyak_mnemonic.h	/^void kxord(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_66 | T_W1, 0x47); }$/;"	f
kxorq	xbyak/xbyak_mnemonic.h	/^void kxorq(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W1, 0x47); }$/;"	f
kxorw	xbyak/xbyak_mnemonic.h	/^void kxorw(const Opmask& r1, const Opmask& r2, const Opmask& r3) { opVex(r1, &r2, r3, T_L1 | T_0F | T_W0, 0x47); }$/;"	f
l_table	kernel_jit_injector.h	/^  Xbyak::Label l_table;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
labelId_	xbyak/xbyak.h	/^	mutable int labelId_;$/;"	m	class:Xbyak::LabelManager
labelMgr_	xbyak/xbyak.h	/^	LabelManager labelMgr_;$/;"	m	class:Xbyak::CodeGenerator
labelPtrList_	xbyak/xbyak.h	/^	LabelPtrList labelPtrList_;$/;"	m	class:Xbyak::LabelManager
label_	xbyak/xbyak.h	/^	const Label* label_;$/;"	m	class:Xbyak::Address
label_	xbyak/xbyak.h	/^	const Label* label_;$/;"	m	struct:Xbyak::RegRip
lahf	xbyak/xbyak_mnemonic.h	/^void lahf() { db(0x9F); }$/;"	f
launch	jit_blas_prologue.h	/^  void launch(const Param& _param, int tidx, Parallel& para) {$/;"	f	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
launch	jit_blas_prologue.h	/^  void launch(const Param& _param, int tidx, Parallel& para) {$/;"	f	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
launch	jit_blas_prologue.h	/^  void launch(const Param& _param, int tidx, Parallel& para) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32AsymU8Quantize
launch	jit_blas_prologue.h	/^  void launch(const Param& _param, int tidx, Parallel& para) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32SymS8Quantize
launch	jit_blas_prologue.h	/^  void launch(const Param& _param, int tidx, const Parallel& para) {$/;"	f	class:jblas::prologue::gemm::WeightPack
launch	jit_blas_weight_compression.h	/^  void launch(const ParallelConfig& _config, const Param& _param, Eltops... ops) {$/;"	f	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
launch	jit_blas_weight_compression.h	/^  void launch(const Param& _param, int tidx, Parallel& _para) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
launch	jit_blas_wrapper.h	/^  void launch(const ParallelConfig& _config, const Param& _param) {$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
launchT	jit_blas_transformer.h	/^  void launchT(const Arguments& _param, int tidx, Parallel& _paral, size_t l2cache) {$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight
launchT	jit_blas_transformer.h	/^  void launchT(const Arguments& _param, int tidx, Parallel& _paral, size_t l2cache) {$/;"	f	class:jblas::wrapper::transformer::QKVGemmInterfacePackWeight
ld_dst	kernel_jit.h	/^  int ld_dst;$/;"	m	struct:decompress_block_s4_f32_codegen_param
ld_src	kernel_jit.h	/^  int ld_src;$/;"	m	struct:decompress_block_s4_f32_codegen_param
lda	jit_blas_prologue.h	/^    int lda;$/;"	m	struct:jblas::prologue::gemm::ActivationBase::Param
lda	jit_blas_prologue.h	/^    int lda;$/;"	m	struct:jblas::prologue::gemm::ActivationConverterFp32::Param
lda	jit_blas_prologue.h	/^    int lda;$/;"	m	struct:jblas::prologue::gemm::ActivationF32S8KBlockQuantize::Param
lda	jit_blas_prologue.h	/^    int lda;$/;"	m	struct:jblas::prologue::gemm::ActivationF32U8KBlockQuantize::Param
lda	jit_blas_prologue.h	/^    int lda;$/;"	m	struct:jblas::prologue::gemm::ActivationFp32AsymU8Quantize::Param
lda	jit_blas_prologue.h	/^    int lda;$/;"	m	struct:jblas::prologue::gemm::ActivationFp32SymS8Quantize::Param
lda	jit_blas_prologue.h	/^  int lda, lds;$/;"	m	class:jblas::prologue::gemm::StorageQuantActivation
ldb	jit_blas_prologue.h	/^    const int ldb;$/;"	m	struct:jblas::prologue::gemm::WeightPack::Param
ldc	jit_blas_epilogue.h	/^    int ldc, ldd;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessFp32::Param
ldc	jit_blas_epilogue.h	/^    int ldc;$/;"	m	struct:jblas::epilogue::gemm::AccumulatorWriteBack::Param
ldc	jit_blas_epilogue.h	/^    int ldc;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessS32U8::Param
ldc	jit_blas_epilogue.h	/^    int ldc;$/;"	m	struct:jblas::epilogue::gemm::CustomAccumulatorWriteBackWithEltop::Param
ldc	jit_blas_epilogue.h	/^    int ldc;$/;"	m	struct:jblas::epilogue::gemm::DequantInt32ToFp32::Param
ldc	jit_blas_epilogue.h	/^    int ldc;$/;"	m	struct:jblas::epilogue::gemm::ZpDequantInt32ToFp32::Param
ldd	jit_blas_epilogue.h	/^    int ldc, ldd;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessFp32::Param
lddqu	xbyak/xbyak_mnemonic.h	/^void lddqu(const Xmm& xmm, const Address& addr) { db(0xF2); opModM(addr, xmm, 0x0F, 0xF0); }$/;"	f
ldmxcsr	xbyak/xbyak_mnemonic.h	/^void ldmxcsr(const Address& addr) { opModM(addr, Reg32(2), 0x0F, 0xAE); }$/;"	f
lds	jit_blas_prologue.h	/^  int lda, lds;$/;"	m	class:jblas::prologue::gemm::StorageQuantActivation
lds	xbyak/xbyak_mnemonic.h	/^void lds(const Reg& reg, const Address& addr) { opLoadSeg(addr, reg, 0xC5, 0x100); }$/;"	f
ldsa	jit_blas_epilogue.h	/^    int ldsa;$/;"	m	struct:jblas::epilogue::gemm::DequantInt32ToFp32::Param
ldsa	jit_blas_epilogue.h	/^    int ldsa;$/;"	m	struct:jblas::epilogue::gemm::ZpDequantInt32ToFp32::Param
ldsa	jit_blas_gemm.h	/^    int ldsa, ldsb;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
ldsa	jit_blas_gemm.h	/^    int ldsa, ldsb;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
ldsb	jit_blas_gemm.h	/^    int ldsa, ldsb;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
ldsb	jit_blas_gemm.h	/^    int ldsa, ldsb;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
ldtilecfg	xbyak/xbyak_mnemonic.h	/^void ldtilecfg(const Address& addr) { opVex(tmm0, &tmm0, addr, T_0F38 | T_W0, 0x49); }$/;"	f
lea	xbyak/xbyak_mnemonic.h	/^void lea(const Reg& reg, const Address& addr) { if (!reg.isBit(16 | i32e)) XBYAK_THROW(ERR_BAD_SIZE_OF_REGISTER) opModM(addr, reg, 0x8D); }$/;"	f
leave	xbyak/xbyak_mnemonic.h	/^void leave() { db(0xC9); }$/;"	f
leaveLocal	xbyak/xbyak.h	/^	void leaveLocal()$/;"	f	class:Xbyak::LabelManager
les	xbyak/xbyak_mnemonic.h	/^void les(const Reg& reg, const Address& addr) { opLoadSeg(addr, reg, 0xC4, 0x100); }$/;"	f
lfence	xbyak/xbyak_mnemonic.h	/^void lfence() { db(0x0F); db(0xAE); db(0xE8); }$/;"	f
lfs	xbyak/xbyak_mnemonic.h	/^void lfs(const Reg& reg, const Address& addr) { opLoadSeg(addr, reg, 0x0F, 0xB4); }$/;"	f
lgs	xbyak/xbyak_mnemonic.h	/^void lgs(const Reg& reg, const Address& addr) { opLoadSeg(addr, reg, 0x0F, 0xB5); }$/;"	f
linear_compute_vector_fwd	kernel_jit_injector.h	/^  void linear_compute_vector_fwd(const Xbyak::Zmm& zmm_src, int const_p_offset) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
ln2f	kernel_jit_injector.h	/^    ln2f,                                 \/\/ 0.69314718f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
load32	jit_base.hpp	/^  void load32(const Xbyak::Reg64& reg, const Xbyak::Address& addr) {$/;"	f	class:jblas::xbyak::JitBase
load_fp16_bf16_interleave_word	kernel_avx512f.h	/^static inline std::array<__m512i, 2> load_fp16_bf16_interleave_word(const utils::fp16* a, size_t lda) {$/;"	f	namespace:jblas::kernel::avx512f
load_fp16_bf16_tr_x16_dword	kernel_avx512f.h	/^static inline std::array<__m512i, 16> load_fp16_bf16_tr_x16_dword(const utils::fp16* a, size_t lda) {$/;"	f	namespace:jblas::kernel::avx512f
load_mask	kernel_jit.h	/^    Xbyak::Opmask load_mask;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
load_maskz_fp16_bf16_interleave_word	kernel_avx512f.h	/^static inline std::array<__m512i, 2> load_maskz_fp16_bf16_interleave_word(const utils::fp16* a, size_t lda,$/;"	f	namespace:jblas::kernel::avx512f
load_maskz_fp16_bf16_tr_x16_dword	kernel_avx512f.h	/^static inline std::array<__m512i, 16> load_maskz_fp16_bf16_tr_x16_dword(const utils::fp16* a, size_t lda,$/;"	f	namespace:jblas::kernel::avx512f
load_table_addr	kernel_jit_injector.h	/^  void load_table_addr() { h->mov(p_table, l_table); }$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
loadbf16_f32	jit_base.hpp	/^  void loadbf16_f32(const Xbyak::Zmm& dst, const Xbyak::Address& addr) {$/;"	f	class:jblas::xbyak::JitAvx512f
local	xbyak/xbyak.h	/^namespace local {$/;"	n	namespace:Xbyak
local	xbyak/xbyak_util.h	/^namespace local {$/;"	n	namespace:Xbyak::util
lock	xbyak/xbyak_mnemonic.h	/^void lock() { db(0xF0); }$/;"	f
lodsb	xbyak/xbyak_mnemonic.h	/^void lodsb() { db(0xAC); }$/;"	f
lodsd	xbyak/xbyak_mnemonic.h	/^void lodsd() { db(0xAD); }$/;"	f
lodsq	xbyak/xbyak_mnemonic.h	/^void lodsq() { db(0x48); db(0xAD); }$/;"	f
lodsw	xbyak/xbyak_mnemonic.h	/^void lodsw() { db(0x66); db(0xAD); }$/;"	f
log_ratio	jit_blas_utils.h	/^  float log_ratio;$/;"	m	class:jblas::utils::timer_statistics_logger
log_timer_t	jit_blas_utils.h	/^  typedef timer<milliseconds> log_timer_t;$/;"	t	class:jblas::utils::timer_statistics_logger
logtm	jit_blas_utils.h	/^  timer<milliseconds> logtm;$/;"	m	class:jblas::utils::timer_statistics_logger
loop	xbyak/xbyak_mnemonic.h	/^void loop(const Label& label) { opJmp(label, T_SHORT, 0xE2, 0, 0); }$/;"	f
loop	xbyak/xbyak_mnemonic.h	/^void loop(const char *label) { loop(std::string(label)); }$/;"	f
loop	xbyak/xbyak_mnemonic.h	/^void loop(std::string label) { opJmp(label, T_SHORT, 0xE2, 0, 0); }$/;"	f
loope	xbyak/xbyak_mnemonic.h	/^void loope(const Label& label) { opJmp(label, T_SHORT, 0xE1, 0, 0); }$/;"	f
loope	xbyak/xbyak_mnemonic.h	/^void loope(const char *label) { loope(std::string(label)); }$/;"	f
loope	xbyak/xbyak_mnemonic.h	/^void loope(std::string label) { opJmp(label, T_SHORT, 0xE1, 0, 0); }$/;"	f
loopne	xbyak/xbyak_mnemonic.h	/^void loopne(const Label& label) { opJmp(label, T_SHORT, 0xE0, 0, 0); }$/;"	f
loopne	xbyak/xbyak_mnemonic.h	/^void loopne(const char *label) { loopne(std::string(label)); }$/;"	f
loopne	xbyak/xbyak_mnemonic.h	/^void loopne(std::string label) { opJmp(label, T_SHORT, 0xE0, 0, 0); }$/;"	f
low_precision_exp_compute_vector_fwd	kernel_jit_injector.h	/^  void low_precision_exp_compute_vector_fwd(const Xbyak::Zmm& zmm_src) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
low_precision_exp_const_v0	kernel_jit_injector.h	/^    low_precision_exp_const_v0,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
low_precision_exp_const_v1	kernel_jit_injector.h	/^    low_precision_exp_const_v1,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
low_precision_exp_const_v2	kernel_jit_injector.h	/^    low_precision_exp_const_v2,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
lss	xbyak/xbyak_mnemonic.h	/^void lss(const Reg& reg, const Address& addr) { opLoadSeg(addr, reg, 0x0F, 0xB2); }$/;"	f
lzcnt	xbyak/xbyak_mnemonic.h	/^void lzcnt(const Reg&reg, const Operand& op) { opSp1(reg, op, 0xF3, 0x0F, 0xBD); }$/;"	f
mAlignedsize	jit_blas_utils.h	/^  size_t mAlignedsize, mRawsize;$/;"	m	class:jblas::utils::aligned_vector
mBlockPerThread	jit_blas_utils.h	/^  int mBlockPerThread = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
mBlockSize	jit_blas_weight_compression.h	/^  int mBlockSize = 1;$/;"	m	class:jblas::prologue::weight_comp::PackedWeightKBlock
mBlocksPerCol	jit_blas_utils.h	/^  int mBlocksPerCol = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
mBuffer	jit_blas_prologue.h	/^  utils::aligned_vector<int8_t> mBuffer;$/;"	m	class:jblas::prologue::gemm::StorageWeight
mBuffer	jit_blas_prologue.h	/^  utils::avector<int8_t> mBuffer;$/;"	m	class:jblas::prologue::gemm::StorageQuantActivation
mCodes	jit_blas_gemm.h	/^  MicroKernel mCodes, mCodesBf16;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
mCodes	jit_blas_gemm.h	/^  MicroKernel mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
mCodes	jit_blas_gemm.h	/^  MicroKernel mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
mCodes	jit_blas_gemm.h	/^  MicroKernel mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
mCodes	jit_blas_gemm.h	/^  MicroKernel mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
mCodes	jit_blas_gemm.h	/^  MicroKernel mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
mCodes	jit_blas_gemm.h	/^  std::array<MicroKernel, MTILE> mCodes, mCodesBf16;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
mCodes	jit_blas_gemm.h	/^  std::array<MicroKernel, MTILE> mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
mCodes	jit_blas_gemm.h	/^  std::array<MicroKernel, MTILE> mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
mCodes	jit_blas_gemm.h	/^  std::array<MicroKernel, MTILE> mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
mCodes	jit_blas_gemm.h	/^  std::array<MicroKernel, MTILE> mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
mCodes	jit_blas_gemm.h	/^  std::array<MicroKernel, MTILE> mCodes;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
mCodesBf16	jit_blas_gemm.h	/^  MicroKernel mCodes, mCodesBf16;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
mCodesBf16	jit_blas_gemm.h	/^  std::array<MicroKernel, MTILE> mCodes, mCodesBf16;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
mColBlock	jit_blas_utils.h	/^  int mColBlock = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
mColThreads	jit_blas_utils.h	/^  int mColThreads = 0;           \/\/ horizontal dimension for the 2D threads grid$/;"	m	struct:jblas::utils::parallel::Parallel2D
mCols	jit_blas_utils.h	/^  int mRows = 0, mCols = 0;      \/\/ col\/row size for each non-tail thread$/;"	m	struct:jblas::utils::parallel::Parallel2D
mCoreType	jit_blas_prologue.h	/^  jblas::gemm::GemmCoreType mCoreType = jblas::gemm::GemmCoreType::Undef;$/;"	m	class:jblas::prologue::PackedWeight
mDensity	jit_blas_utils.h	/^  float mDensity = 0.f;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mDensity	jit_blas_utils.h	/^  float mDensity = 0.f;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mDensity	jit_blas_utils.h	/^  float mDensity = 0.f;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mEpilogue	jit_blas_weight_compression.h	/^  Epilogue mEpilogue;$/;"	m	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
mEpilogue	jit_blas_wrapper.h	/^  Epilogue mEpilogue;$/;"	m	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
mGemmCore	jit_blas_weight_compression.h	/^  GemmCore mGemmCore;$/;"	m	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
mGemmCore	jit_blas_wrapper.h	/^  _GemmCore_T mGemmCore;$/;"	m	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
mHasAMX_BF16	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mHasAMX_INT8	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mHasAVX	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mHasAVX2	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mHasAVX512F	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mHasAVX512_FP16	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mHasAVX512_VNNI	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mHasAVX_VNNI	jit_blas_utils.h	/^  bool mHasAVX2, mHasAVX_VNNI, mHasAVX, mHasAVX512_VNNI, mHasAMX_INT8, mHasAMX_BF16, mHasAVX512F, mHasAVX512_FP16;$/;"	m	class:jblas::utils::parallel::CpuDevice
mK	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mK	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mK	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mKPad	jit_blas_prologue.h	/^  int mNPad = 0, mKPad = 0;$/;"	m	class:jblas::prologue::PackedWeight
mKPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mKPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mKPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mKStep	jit_blas_utils.h	/^  int mKStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mKStep	jit_blas_utils.h	/^  int mKStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mKStep	jit_blas_utils.h	/^  int mKStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
mKernel	jit_blas_gemm.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
mKernel	kernel_jit.h	/^    func_t mKernel = nullptr;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
mKernel	kernel_jit.h	/^  func_t mKernel = nullptr;$/;"	m	class:jblas::kernel::jit::DecompressS4S8_AVX512F
mKernel	kernel_jit.h	/^  func_t mKernel = nullptr;$/;"	m	class:jblas::kernel::jit::JitMemcpy2DAvx512f
mL2Cache	jit_blas_utils.h	/^  size_t mL2Cache;$/;"	m	class:jblas::utils::CpuBase
mL2Size	jit_blas_utils.h	/^  size_t mL2Size = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mL2Size	jit_blas_utils.h	/^  size_t mL2Size = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mL2Size	jit_blas_utils.h	/^  size_t mL2Size = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mLauncher	jit_blas_transformer.h	/^  _Launcher_T mLauncher;$/;"	m	class:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight
mLauncher	jit_blas_transformer.h	/^  _Launcher_T mLauncher;$/;"	m	class:jblas::wrapper::transformer::QKVGemmInterfacePackWeight
mLauncher	jit_blas_weight_compression.h	/^  _Launcher_T mLauncher;$/;"	m	class:jblas::wrapper::gemm_kblock::GemmInterfaceKBlockPackWeight
mLauncher	jit_blas_weight_compression.h	/^  _Launcher_T mLauncher;$/;"	m	class:jblas::wrapper::gemm_kblock::GemmInterfaceKblockAB
mLauncher	jit_blas_wrapper.h	/^  _Launcher_T mLauncher;$/;"	m	class:jblas::wrapper::gemm_pack_weight::GemmInterfaceAB
mLauncher	jit_blas_wrapper.h	/^  _Launcher_T mLauncher;$/;"	m	class:jblas::wrapper::gemm_pack_weight::GemmInterfacePackWeight
mM	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mM	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mM	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mMPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mMPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mMPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mMStep	jit_blas_utils.h	/^  int mMStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mMStep	jit_blas_utils.h	/^  int mMStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mMStep	jit_blas_utils.h	/^  int mMStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mN	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mN	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mN	jit_blas_utils.h	/^  int mM = 0, mN = 0, mK = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mNPad	jit_blas_prologue.h	/^  int mNPad = 0, mKPad = 0;$/;"	m	class:jblas::prologue::PackedWeight
mNPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mNPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mNPadded	jit_blas_utils.h	/^  int mMPadded = 0, mNPadded = 0, mKPadded = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mNStep	jit_blas_utils.h	/^  int mNStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemm
mNStep	jit_blas_utils.h	/^  int mNStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlock
mNStep	jit_blas_utils.h	/^  int mNStep = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
mNumThreads	jit_blas_utils.h	/^  int mNumThreads;$/;"	m	class:jblas::utils::CpuBase
mPadCol	jit_blas_utils.h	/^  int mPadRow = 0, mPadCol = 0;  \/\/ pad size for each thread$/;"	m	struct:jblas::utils::parallel::Parallel2D
mPadRow	jit_blas_utils.h	/^  int mPadRow = 0, mPadCol = 0;  \/\/ pad size for each thread$/;"	m	struct:jblas::utils::parallel::Parallel2D
mProA	jit_blas_weight_compression.h	/^  PrologueA mProA;$/;"	m	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
mProA	jit_blas_wrapper.h	/^  PrologueA mProA;$/;"	m	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
mProB	jit_blas_weight_compression.h	/^  PrologueB mProB;$/;"	m	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
mProB	jit_blas_wrapper.h	/^  PrologueB mProB;$/;"	m	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
mPtr	jit_blas_utils.h	/^  _T* mPtr;$/;"	m	class:jblas::utils::aligned_vector
mRawPtr	jit_blas_prologue.h	/^  int8_t* mRawPtr;$/;"	m	class:jblas::prologue::gemm::StorageWeight
mRawSize	jit_blas_prologue.h	/^  size_t mRawSize;$/;"	m	class:jblas::prologue::gemm::StorageWeight
mRawsize	jit_blas_utils.h	/^  size_t mAlignedsize, mRawsize;$/;"	m	class:jblas::utils::aligned_vector
mRows	jit_blas_utils.h	/^  int mRows = 0, mCols = 0;      \/\/ col\/row size for each non-tail thread$/;"	m	struct:jblas::utils::parallel::Parallel2D
mSPtr	jit_blas_prologue.h	/^  ST_T* mSPtr;$/;"	m	class:jblas::prologue::gemm::StorageQuantActivation
mSPtr	jit_blas_weight_compression.h	/^  SRC_T* mSPtr = nullptr;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
mSSize	jit_blas_weight_compression.h	/^  size_t mSSize;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
mScaleType	jit_blas_gemm.h	/^    JBLAS_DTYPE mScaleType = JblasF32;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
mScaleType	jit_blas_gemm.h	/^    JBLAS_DTYPE mScaleType = JblasF32;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
mScales	jit_blas_weight_compression.h	/^  utils::aligned_vector<SRC_T> mScales;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
mSize	jit_blas_prologue.h	/^  size_t mSize = 0;$/;"	m	class:jblas::prologue::PackedWeight
mThdCol	jit_blas_utils.h	/^  int mThdRow = 0, mThdCol = 0;  \/\/ num of rows\/cols per threads$/;"	m	struct:jblas::utils::parallel::Parallel2D
mThdRow	jit_blas_utils.h	/^  int mThdRow = 0, mThdCol = 0;  \/\/ num of rows\/cols per threads$/;"	m	struct:jblas::utils::parallel::Parallel2D
mThdsPerBlock	jit_blas_utils.h	/^  int mThdsPerBlock = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
mThreadsCount	jit_blas_utils.h	/^  int mThreadsCount = 0;         \/\/ total number of threads available$/;"	m	struct:jblas::utils::parallel::Parallel2D
mTmpSize	jit_blas_utils.h	/^  size_t mTmpSize = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
mTmpStride	jit_blas_utils.h	/^  size_t mTmpStride = 0;$/;"	m	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
mType	jit_blas_prologue.h	/^  int mType = -1;$/;"	m	class:jblas::prologue::PackedWeight
mValidThreads	jit_blas_utils.h	/^  int mValidThreads = 0;         \/\/ number of threads valid$/;"	m	struct:jblas::utils::parallel::Parallel2D
mVec	jit_blas_utils.h	/^  std::vector<_T> mVec;$/;"	m	class:jblas::utils::aligned_vector
mWPtr	jit_blas_prologue.h	/^  QT_T *mWPtr, *mZPtr;$/;"	m	class:jblas::prologue::gemm::StorageQuantActivation
mWPtr	jit_blas_weight_compression.h	/^  int8_t* mWPtr = NULL;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight8Bit
mWPtr	jit_blas_weight_compression.h	/^  utils::bit4x2* mWPtr = NULL;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight4Bit
mWSize	jit_blas_weight_compression.h	/^  size_t mWSize = 0;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight4Bit
mWSize	jit_blas_weight_compression.h	/^  size_t mWSize = 0;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight8Bit
mWeights	jit_blas_weight_compression.h	/^  utils::aligned_vector<int8_t> mWeights;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight8Bit
mWeights	jit_blas_weight_compression.h	/^  utils::aligned_vector<utils::bit4x2> mWeights;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight4Bit
mZPtr	jit_blas_prologue.h	/^  QT_T *mWPtr, *mZPtr;$/;"	m	class:jblas::prologue::gemm::StorageQuantActivation
mZPtr	jit_blas_weight_compression.h	/^  DST_T* mZPtr = nullptr;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
mZeroPoints	jit_blas_weight_compression.h	/^  utils::aligned_vector<DST_T> mZeroPoints;$/;"	m	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
main	ut/jit_blas_ut.cpp	/^int main() {$/;"	f
makeEpilog_	xbyak/xbyak_util.h	/^	bool makeEpilog_;$/;"	m	class:Xbyak::util::StackFrame
makeJmp	xbyak/xbyak.h	/^	void makeJmp(uint32_t disp, LabelType type, uint8_t shortCode, uint8_t longCode, uint8_t longPref)$/;"	f	class:Xbyak::CodeGenerator
mapped_table_entry_t	kernel_jit_injector.h	/^  struct mapped_table_entry_t {$/;"	s	class:jblas::kernel::jit_injector::eltwise_injector
mask	xbyak/xbyak_util.h	/^	uint32_t mask(int n) const$/;"	f	class:Xbyak::util::Cpu
maskmovdqu	xbyak/xbyak_mnemonic.h	/^void maskmovdqu(const Xmm& reg1, const Xmm& reg2) { db(0x66);  opModR(reg1, reg2, 0x0F, 0xF7); }$/;"	f
maskmovq	xbyak/xbyak_mnemonic.h	/^void maskmovq(const Mmx& reg1, const Mmx& reg2) { if (!reg1.isMMX() || !reg2.isMMX()) XBYAK_THROW(ERR_BAD_COMBINATION) opModR(reg1, reg2, 0x0F, 0xF7); }$/;"	f
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
matA	jit_blas_gemm.h	/^    AType* matA;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
matA	jit_blas_gemm.h	/^    float *matA, *matB, *matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
matA	jit_blas_gemm.h	/^    float *matA, *matB, *matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
matA	jit_blas_gemm.h	/^    uint8_t* matA;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
matA	jit_blas_gemm.h	/^    uint8_t* matA;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
matA	ut/jit_blas_ut.h	/^  UT_vector_u8 matA, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
matA	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<float> matA, matB, matC, matD, matRef;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
matA	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<utils::fp16> matA, matB, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
matA	ut/jit_blas_ut.h	/^  utils::aligned_vector<utils::bf16> matA, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
matB	jit_blas_gemm.h	/^    BType* matB;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
matB	jit_blas_gemm.h	/^    float *matA, *matB, *matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
matB	jit_blas_gemm.h	/^    float *matA, *matB, *matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
matB	jit_blas_gemm.h	/^    int8_t* matB;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
matB	jit_blas_gemm.h	/^    int8_t* matB;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
matB	ut/jit_blas_ut.h	/^  UT_vector_s8 matB;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
matB	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<float> matA, matB, matC, matD, matRef;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
matB	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<utils::fp16> matA, matB, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
matB	ut/jit_blas_ut.h	/^  utils::aligned_vector<utils::bf16> matB;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
matC	jit_blas_gemm.h	/^    CType* matC;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
matC	jit_blas_gemm.h	/^    float *matA, *matB, *matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
matC	jit_blas_gemm.h	/^    float *matA, *matB, *matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
matC	jit_blas_gemm.h	/^    int32_t* matC;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
matC	ut/jit_blas_ut.h	/^  UT_vector_u8 matA, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
matC	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<float> matA, matB, matC, matD, matRef;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
matC	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<utils::fp16> matA, matB, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
matC	ut/jit_blas_ut.h	/^  utils::aligned_vector<utils::bf16> matA, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
matCDequan	ut/jit_blas_ut.h	/^  utils::aligned_vector<float> matCRef, matCDequan;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
matCRef	ut/jit_blas_ut.h	/^  utils::aligned_vector<float> matCRef, matCDequan;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
matD	ut/jit_blas_ut.h	/^  UT_vector_u8 matA, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_u8s8
matD	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<float> matA, matB, matC, matD, matRef;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
matD	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<utils::fp16> matA, matB, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_fp16
matD	ut/jit_blas_ut.h	/^  utils::aligned_vector<utils::bf16> matA, matC, matD;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_bf16
matRef	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<float> matA, matB, matC, matD, matRef;$/;"	m	struct:jblas::ut::UT_GEMMData_Row_f32
maxNumberCacheLevels	xbyak/xbyak_util.h	/^	static const uint32_t maxNumberCacheLevels = 10;$/;"	m	class:Xbyak::util::Cpu
maxRegNum	xbyak/xbyak_util.h	/^	static const int maxRegNum = 14; \/\/ maxRegNum = 16 - rsp - rax$/;"	m	class:Xbyak::util::StackFrame
maxSize_	xbyak/xbyak.h	/^	size_t maxSize_;$/;"	m	class:Xbyak::CodeArray
maxTblNum	xbyak/xbyak_util.h	/^	static const size_t maxTblNum = 15;$/;"	m	class:Xbyak::util::Pack
maxTopologyLevels	xbyak/xbyak_util.h	/^	static const size_t maxTopologyLevels = 2;$/;"	m	class:Xbyak::util::Cpu
max_	xbyak/xbyak_util.h	/^inline T max_(T x, T y) { return x >= y ? x : y; }$/;"	f	namespace:Xbyak::util::local
max_val	jit_blas_utils.h	/^  T min_val, max_val, avg_val;$/;"	m	class:jblas::utils::minmax_statistics
max_val	jit_blas_utils.h	/^  float min_val, max_val, avg_val;$/;"	m	class:jblas::utils::timer_statistics_logger
maxpd	xbyak/xbyak_mnemonic.h	/^void maxpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5F, 0x66, isXMM_XMMorMEM); }$/;"	f
maxps	xbyak/xbyak_mnemonic.h	/^void maxps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5F, 0x100, isXMM_XMMorMEM); }$/;"	f
maxsd	xbyak/xbyak_mnemonic.h	/^void maxsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5F, 0xF2, isXMM_XMMorMEM); }$/;"	f
maxss	xbyak/xbyak_mnemonic.h	/^void maxss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5F, 0xF3, isXMM_XMMorMEM); }$/;"	f
memcpy2d	kernel_ref.h	/^static inline JBLAS_CODE memcpy2d(void* srcptr, void* dstptr, int row, int col, int srcstride, int dststride) {$/;"	f	namespace:jblas::kernel::ref
memcpy2d_dw2highw	kernel_ref.h	/^static inline JBLAS_CODE memcpy2d_dw2highw(const void* srcptr, void* dstptr, int row, int col, int srcstride,$/;"	f	namespace:jblas::kernel::ref
mfence	xbyak/xbyak_mnemonic.h	/^void mfence() { db(0x0F); db(0xAE); db(0xF0); }$/;"	f
mgr	xbyak/xbyak.h	/^	mutable LabelManager *mgr;$/;"	m	class:Xbyak::Label
min_	xbyak/xbyak_util.h	/^inline T min_(T x, T y) { return x < y ? x : y; }$/;"	f	namespace:Xbyak::util::local
min_val	jit_blas_utils.h	/^  T min_val, max_val, avg_val;$/;"	m	class:jblas::utils::minmax_statistics
min_val	jit_blas_utils.h	/^  float min_val, max_val, avg_val;$/;"	m	class:jblas::utils::timer_statistics_logger
minmax_f32_kblock	kernel_ref.h	/^inline JBLAS_CODE minmax_f32_kblock(const float* srcptr, int row, int col, int ld_src, float* minmaxptr, int ld_minmax,$/;"	f	namespace:jblas::kernel::ref
minmax_statistics	jit_blas_utils.h	/^  minmax_statistics() { clear(); }$/;"	f	class:jblas::utils::minmax_statistics
minmax_statistics	jit_blas_utils.h	/^class minmax_statistics {$/;"	c	namespace:jblas::utils
minpd	xbyak/xbyak_mnemonic.h	/^void minpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5D, 0x66, isXMM_XMMorMEM); }$/;"	f
minps	xbyak/xbyak_mnemonic.h	/^void minps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5D, 0x100, isXMM_XMMorMEM); }$/;"	f
minsd	xbyak/xbyak_mnemonic.h	/^void minsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5D, 0xF2, isXMM_XMMorMEM); }$/;"	f
minss	xbyak/xbyak_mnemonic.h	/^void minss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5D, 0xF3, isXMM_XMMorMEM); }$/;"	f
minus_one	kernel_jit_injector.h	/^    minus_one,                            \/\/ -1.f  or  changes sign to opposite$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
minus_three	kernel_jit_injector.h	/^    minus_three,                          \/\/ -3.f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
minus_two	kernel_jit_injector.h	/^    minus_two,                            \/\/ -2.f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
mm0	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mm1	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mm2	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mm3	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mm4	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mm5	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mm6	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mm7	xbyak/xbyak.h	/^	const Mmx mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7;$/;"	m	class:Xbyak::CodeGenerator
mode	xbyak/xbyak.h	/^		inner::LabelMode mode;$/;"	m	struct:Xbyak::CodeArray::AddrInfo
mode	xbyak/xbyak.h	/^	inner::LabelMode mode;$/;"	m	struct:Xbyak::JmpLabel
mode_	xbyak/xbyak.h	/^	Mode mode_;$/;"	m	class:Xbyak::Address
mode_	xbyak/xbyak_util.h	/^	int mode_;$/;"	m	class:Xbyak::util::Profiler
model	xbyak/xbyak_util.h	/^	int model;$/;"	m	class:Xbyak::util::Cpu
monitor	xbyak/xbyak_mnemonic.h	/^void monitor() { db(0x0F); db(0x01); db(0xC8); }$/;"	f
monitorx	xbyak/xbyak_mnemonic.h	/^void monitorx() { db(0x0F); db(0x01); db(0xFA); }$/;"	f
mov	xbyak/xbyak.h	/^	void mov(const NativeReg& reg, const Label& label)$/;"	f	class:Xbyak::CodeGenerator
mov	xbyak/xbyak.h	/^	void mov(const Operand& op, const Segment& seg)$/;"	f	class:Xbyak::CodeGenerator
mov	xbyak/xbyak.h	/^	void mov(const Operand& op, uint64_t imm)$/;"	f	class:Xbyak::CodeGenerator
mov	xbyak/xbyak.h	/^	void mov(const Operand& reg1, const Operand& reg2)$/;"	f	class:Xbyak::CodeGenerator
mov	xbyak/xbyak.h	/^	void mov(const Segment& seg, const Operand& op)$/;"	f	class:Xbyak::CodeGenerator
mov	xbyak/xbyak.h	/^	void mov(const T1&, const T2 *) { T1::unexpected; }$/;"	f	class:Xbyak::CodeGenerator
mov	xbyak/xbyak.h	/^inline void CodeGenerator::mov(const NativeReg& reg, const char *label) \/\/ can't use std::string$/;"	f	class:Xbyak::CodeGenerator
mov_imm	xbyak/xbyak.h	/^	int mov_imm(const Reg& reg, uint64_t imm)$/;"	f	class:Xbyak::CodeGenerator
movapd	xbyak/xbyak_mnemonic.h	/^void movapd(const Address& addr, const Xmm& xmm) { db(0x66); opModM(addr, xmm, 0x0F, 0x29); }$/;"	f
movapd	xbyak/xbyak_mnemonic.h	/^void movapd(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x28, 0x66); }$/;"	f
movaps	xbyak/xbyak_mnemonic.h	/^void movaps(const Address& addr, const Xmm& xmm) { opModM(addr, xmm, 0x0F, 0x29); }$/;"	f
movaps	xbyak/xbyak_mnemonic.h	/^void movaps(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x28, 0x100); }$/;"	f
movbe	xbyak/xbyak_mnemonic.h	/^void movbe(const Address& addr, const Reg& reg) { opModM(addr, reg, 0x0F, 0x38, 0xF1); }$/;"	f
movbe	xbyak/xbyak_mnemonic.h	/^void movbe(const Reg& reg, const Address& addr) { opModM(addr, reg, 0x0F, 0x38, 0xF0); }$/;"	f
movd	xbyak/xbyak_mnemonic.h	/^void movd(const Address& addr, const Mmx& mmx) { if (mmx.isXMM()) db(0x66); opModM(addr, mmx, 0x0F, 0x7E); }$/;"	f
movd	xbyak/xbyak_mnemonic.h	/^void movd(const Mmx& mmx, const Address& addr) { if (mmx.isXMM()) db(0x66); opModM(addr, mmx, 0x0F, 0x6E); }$/;"	f
movd	xbyak/xbyak_mnemonic.h	/^void movd(const Mmx& mmx, const Reg32& reg) { if (mmx.isXMM()) db(0x66); opModR(mmx, reg, 0x0F, 0x6E); }$/;"	f
movd	xbyak/xbyak_mnemonic.h	/^void movd(const Reg32& reg, const Mmx& mmx) { if (mmx.isXMM()) db(0x66); opModR(mmx, reg, 0x0F, 0x7E); }$/;"	f
movddup	xbyak/xbyak_mnemonic.h	/^void movddup(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x12, 0xF2, isXMM_XMMorMEM, NONE, NONE); }$/;"	f
movdir64b	xbyak/xbyak_mnemonic.h	/^void movdir64b(const Reg& reg, const Address& addr) { db(0x66); opModM(addr, reg.cvt32(), 0x0F, 0x38, 0xF8); }$/;"	f
movdiri	xbyak/xbyak_mnemonic.h	/^void movdiri(const Address& addr, const Reg32e& reg) { opModM(addr, reg, 0x0F, 0x38, 0xF9); }$/;"	f
movdq2q	xbyak/xbyak_mnemonic.h	/^void movdq2q(const Mmx& mmx, const Xmm& xmm) { db(0xF2); opModR(mmx, xmm, 0x0F, 0xD6); }$/;"	f
movdqa	xbyak/xbyak_mnemonic.h	/^void movdqa(const Address& addr, const Xmm& xmm) { db(0x66); opModM(addr, xmm, 0x0F, 0x7F); }$/;"	f
movdqa	xbyak/xbyak_mnemonic.h	/^void movdqa(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x6F, 0x66); }$/;"	f
movdqu	xbyak/xbyak_mnemonic.h	/^void movdqu(const Address& addr, const Xmm& xmm) { db(0xF3); opModM(addr, xmm, 0x0F, 0x7F); }$/;"	f
movdqu	xbyak/xbyak_mnemonic.h	/^void movdqu(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x6F, 0xF3); }$/;"	f
movhlps	xbyak/xbyak_mnemonic.h	/^void movhlps(const Xmm& reg1, const Xmm& reg2) {  opModR(reg1, reg2, 0x0F, 0x12); }$/;"	f
movhpd	xbyak/xbyak_mnemonic.h	/^void movhpd(const Operand& op1, const Operand& op2) { opMovXMM(op1, op2, 0x16, 0x66); }$/;"	f
movhps	xbyak/xbyak_mnemonic.h	/^void movhps(const Operand& op1, const Operand& op2) { opMovXMM(op1, op2, 0x16, 0x100); }$/;"	f
movlhps	xbyak/xbyak_mnemonic.h	/^void movlhps(const Xmm& reg1, const Xmm& reg2) {  opModR(reg1, reg2, 0x0F, 0x16); }$/;"	f
movlpd	xbyak/xbyak_mnemonic.h	/^void movlpd(const Operand& op1, const Operand& op2) { opMovXMM(op1, op2, 0x12, 0x66); }$/;"	f
movlps	xbyak/xbyak_mnemonic.h	/^void movlps(const Operand& op1, const Operand& op2) { opMovXMM(op1, op2, 0x12, 0x100); }$/;"	f
movmskpd	xbyak/xbyak_mnemonic.h	/^void movmskpd(const Reg32e& reg, const Xmm& xmm) { db(0x66); movmskps(reg, xmm); }$/;"	f
movmskps	xbyak/xbyak_mnemonic.h	/^void movmskps(const Reg32e& reg, const Xmm& xmm) { opModR(reg, xmm, 0x0F, 0x50); }$/;"	f
movntdq	xbyak/xbyak_mnemonic.h	/^void movntdq(const Address& addr, const Xmm& reg) { opModM(addr, Reg16(reg.getIdx()), 0x0F, 0xE7); }$/;"	f
movntdqa	xbyak/xbyak_mnemonic.h	/^void movntdqa(const Xmm& xmm, const Address& addr) { db(0x66); opModM(addr, xmm, 0x0F, 0x38, 0x2A); }$/;"	f
movnti	xbyak/xbyak_mnemonic.h	/^void movnti(const Address& addr, const Reg32e& reg) { opModM(addr, reg, 0x0F, 0xC3); }$/;"	f
movntpd	xbyak/xbyak_mnemonic.h	/^void movntpd(const Address& addr, const Xmm& reg) { opModM(addr, Reg16(reg.getIdx()), 0x0F, 0x2B); }$/;"	f
movntps	xbyak/xbyak_mnemonic.h	/^void movntps(const Address& addr, const Xmm& xmm) { opModM(addr, Mmx(xmm.getIdx()), 0x0F, 0x2B); }$/;"	f
movntq	xbyak/xbyak_mnemonic.h	/^void movntq(const Address& addr, const Mmx& mmx) { if (!mmx.isMMX()) XBYAK_THROW(ERR_BAD_COMBINATION) opModM(addr, mmx, 0x0F, 0xE7); }$/;"	f
movq	xbyak/xbyak_mnemonic.h	/^void movq(const Address& addr, const Mmx& mmx) { if (mmx.isXMM()) db(0x66); opModM(addr, mmx, 0x0F, mmx.isXMM() ? 0xD6 : 0x7F); }$/;"	f
movq	xbyak/xbyak_mnemonic.h	/^void movq(const Mmx& mmx, const Operand& op) { if (mmx.isXMM()) db(0xF3); opModRM(mmx, op, (mmx.getKind() == op.getKind()), op.isMEM(), 0x0F, mmx.isXMM() ? 0x7E : 0x6F); }$/;"	f
movq	xbyak/xbyak_mnemonic.h	/^void movq(const Mmx& mmx, const Reg64& reg) { if (mmx.isXMM()) db(0x66); opModR(mmx, reg, 0x0F, 0x6E); }$/;"	f
movq	xbyak/xbyak_mnemonic.h	/^void movq(const Reg64& reg, const Mmx& mmx) { if (mmx.isXMM()) db(0x66); opModR(mmx, reg, 0x0F, 0x7E); }$/;"	f
movq2dq	xbyak/xbyak_mnemonic.h	/^void movq2dq(const Xmm& xmm, const Mmx& mmx) { db(0xF3); opModR(xmm, mmx, 0x0F, 0xD6); }$/;"	f
movsb	xbyak/xbyak_mnemonic.h	/^void movsb() { db(0xA4); }$/;"	f
movsd	xbyak/xbyak_mnemonic.h	/^void movsd() { db(0xA5); }$/;"	f
movsd	xbyak/xbyak_mnemonic.h	/^void movsd(const Address& addr, const Xmm& xmm) { db(0xF2); opModM(addr, xmm, 0x0F, 0x11); }$/;"	f
movsd	xbyak/xbyak_mnemonic.h	/^void movsd(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x10, 0xF2); }$/;"	f
movshdup	xbyak/xbyak_mnemonic.h	/^void movshdup(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x16, 0xF3, isXMM_XMMorMEM, NONE, NONE); }$/;"	f
movsldup	xbyak/xbyak_mnemonic.h	/^void movsldup(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x12, 0xF3, isXMM_XMMorMEM, NONE, NONE); }$/;"	f
movsq	xbyak/xbyak_mnemonic.h	/^void movsq() { db(0x48); db(0xA5); }$/;"	f
movss	xbyak/xbyak_mnemonic.h	/^void movss(const Address& addr, const Xmm& xmm) { db(0xF3); opModM(addr, xmm, 0x0F, 0x11); }$/;"	f
movss	xbyak/xbyak_mnemonic.h	/^void movss(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x10, 0xF3); }$/;"	f
movsw	xbyak/xbyak_mnemonic.h	/^void movsw() { db(0x66); db(0xA5); }$/;"	f
movsx	xbyak/xbyak_mnemonic.h	/^void movsx(const Reg& reg, const Operand& op) { opMovxx(reg, op, 0xBE); }$/;"	f
movsxd	xbyak/xbyak_mnemonic.h	/^void movsxd(const Reg64& reg, const Operand& op) { if (!op.isBit(32)) XBYAK_THROW(ERR_BAD_COMBINATION) opModRM(reg, op, op.isREG(), op.isMEM(), 0x63); }$/;"	f
movupd	xbyak/xbyak_mnemonic.h	/^void movupd(const Address& addr, const Xmm& xmm) { db(0x66); opModM(addr, xmm, 0x0F, 0x11); }$/;"	f
movupd	xbyak/xbyak_mnemonic.h	/^void movupd(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x10, 0x66); }$/;"	f
movups	xbyak/xbyak_mnemonic.h	/^void movups(const Address& addr, const Xmm& xmm) { opModM(addr, xmm, 0x0F, 0x11); }$/;"	f
movups	xbyak/xbyak_mnemonic.h	/^void movups(const Xmm& xmm, const Operand& op) { opMMX(xmm, op, 0x10, 0x100); }$/;"	f
movzx	xbyak/xbyak_mnemonic.h	/^void movzx(const Reg& reg, const Operand& op) { opMovxx(reg, op, 0xB6); }$/;"	f
mpsadbw	xbyak/xbyak_mnemonic.h	/^void mpsadbw(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x42, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
msize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
msize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
msize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
msize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
msize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
msize	jit_blas_gemm.h	/^    int k, nsize, msize;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
msk_wr	jit_blas_gemm.h	/^    Xbyak::Opmask msk_wr = k1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
mul	xbyak/xbyak_mnemonic.h	/^void mul(const Operand& op) { opR_ModM(op, 0, 4, 0xF6); }$/;"	f
mulpd	xbyak/xbyak_mnemonic.h	/^void mulpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x59, 0x66, isXMM_XMMorMEM); }$/;"	f
mulps	xbyak/xbyak_mnemonic.h	/^void mulps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x59, 0x100, isXMM_XMMorMEM); }$/;"	f
mulsd	xbyak/xbyak_mnemonic.h	/^void mulsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x59, 0xF2, isXMM_XMMorMEM); }$/;"	f
mulss	xbyak/xbyak_mnemonic.h	/^void mulss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x59, 0xF3, isXMM_XMMorMEM); }$/;"	f
mulx	xbyak/xbyak_mnemonic.h	/^void mulx(const Reg32e& r1, const Reg32e& r2, const Operand& op) { opGpr(r1, r2, op, T_F2 | T_0F38, 0xf6, true); }$/;"	f
mwait	xbyak/xbyak_mnemonic.h	/^void mwait() { db(0x0F); db(0x01); db(0xC9); }$/;"	f
mwaitx	xbyak/xbyak_mnemonic.h	/^void mwaitx() { db(0x0F); db(0x01); db(0xFB); }$/;"	f
myDataSerializedSize	jit_blas_weight_compression.h	/^  size_t myDataSerializedSize() {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
myDataSerializedSize	jit_blas_weight_compression.h	/^  size_t myDataSerializedSize() {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight4Bit
myDataSerializedSize	jit_blas_weight_compression.h	/^  size_t myDataSerializedSize() {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight8Bit
myDeserializeDataBuffer	jit_blas_weight_compression.h	/^  void myDeserializeDataBuffer(int8_t*& rptr, int memalloc) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
myDeserializeDataBuffer	jit_blas_weight_compression.h	/^  void myDeserializeDataBuffer(int8_t*& rptr, int memalloc) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight4Bit
myDeserializeDataBuffer	jit_blas_weight_compression.h	/^  void myDeserializeDataBuffer(int8_t*& rptr, int memalloc) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight8Bit
mySerializeDataToBuffer	jit_blas_weight_compression.h	/^  void mySerializeDataToBuffer(int8_t*& wptr) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
mySerializeDataToBuffer	jit_blas_weight_compression.h	/^  void mySerializeDataToBuffer(int8_t*& wptr) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight4Bit
mySerializeDataToBuffer	jit_blas_weight_compression.h	/^  void mySerializeDataToBuffer(int8_t*& wptr) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight8Bit
n_	xbyak/xbyak_util.h	/^	size_t n_;$/;"	m	class:Xbyak::util::Pack
n_mantissa_bits	kernel_jit_injector.h	/^  static constexpr int n_mantissa_bits = 23;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
name_	xbyak/xbyak.h	/^	const std::string name_; \/\/ only used with XBYAK_USE_MEMFD$/;"	m	class:Xbyak::MmapAllocator
neg	xbyak/xbyak_mnemonic.h	/^void neg(const Operand& op) { opR_ModM(op, 0, 3, 0xF6); }$/;"	f
nf4_dequant_fp32_LUT	kernel_avx512f.h	/^static float nf4_dequant_fp32_LUT[] = {0.f,$/;"	m	namespace:jblas::kernel::avx512f
nf4_dequantize	kernel_ref.h	/^inline float nf4_dequantize(int8_t val, float absmax) {$/;"	f	namespace:jblas::kernel::ref
nf4_quantize	kernel_ref.h	/^inline int8_t nf4_quantize(float x) {$/;"	f	namespace:jblas::kernel::ref
noSaveNum	xbyak/xbyak_util.h	/^	static const int noSaveNum = 6;$/;"	m	class:Xbyak::util::StackFrame
nop	xbyak/xbyak.h	/^	void nop(size_t size = 1, bool useMultiByteNop = true)$/;"	f	class:Xbyak::CodeGenerator
not	xbyak/xbyak_mnemonic.h	/^void not(const Operand& op) { not_(op); }$/;"	f
not_	xbyak/xbyak_mnemonic.h	/^void not_(const Operand& op) { opR_ModM(op, 0, 2, 0xF6); }$/;"	f
nsize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
nsize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
nsize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
nsize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
nsize	jit_blas_gemm.h	/^    int k, msize, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
nsize	jit_blas_gemm.h	/^    int k, nsize, msize;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
nsize	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::params
nsize	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::params
nsize	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::params
nsize	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::params
nsize	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::params
nsize	jit_blas_gemm.h	/^    int k, nsize;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
null_state	jit_blas_utils.h	/^  bool null_state() { return startT == stime_point_t::min(); }$/;"	f	class:jblas::utils::timer
numCores_	xbyak/xbyak_util.h	/^	uint32_t numCores_[maxTopologyLevels];$/;"	m	class:Xbyak::util::Cpu
numcores	jit_blas_utils.h	/^  int numcores;$/;"	m	class:jblas::utils::parallel::CpuDevice
numthreads	jit_blas_utils.h	/^  int numthreads;$/;"	m	class:jblas::utils::parallel::CpuDevice
off	kernel_jit_injector.h	/^    table_entry_offset_t off;$/;"	m	struct:jblas::kernel::jit_injector::eltwise_injector::mapped_table_entry_t
offset	xbyak/xbyak.h	/^		size_t offset;$/;"	m	struct:Xbyak::LabelManager::ClabelVal
offset	xbyak/xbyak.h	/^		size_t offset;$/;"	m	struct:Xbyak::LabelManager::SlabelVal
ompthreads	jit_blas_utils.h	/^  int ompthreads;$/;"	m	class:jblas::utils::parallel::CpuDevice
one	kernel_jit_injector.h	/^    one,                                  \/\/ 1.f  or  mask for exponent bits$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
opAMX	xbyak/xbyak.h	/^	void opAMX(const Tmm& t1, const Address& addr, int type, int code0)$/;"	f	class:Xbyak::CodeGenerator
opAVX_K_X_XM	xbyak/xbyak.h	/^	void opAVX_K_X_XM(const Opmask& k, const Xmm& x2, const Operand& op3, int type, int code0, int imm8 = NONE)$/;"	f	class:Xbyak::CodeGenerator
opAVX_X_XM_IMM	xbyak/xbyak.h	/^	void opAVX_X_XM_IMM(const Xmm& x, const Operand& op, int type, int code, int imm8 = NONE)$/;"	f	class:Xbyak::CodeGenerator
opAVX_X_X_XM	xbyak/xbyak.h	/^	void opAVX_X_X_XM(const Xmm& x1, const Operand& op1, const Operand& op2, int type, int code0, int imm8 = NONE)$/;"	f	class:Xbyak::CodeGenerator
opAddr	xbyak/xbyak.h	/^	void opAddr(const Address &addr, int reg, int immSize = 0, int disp8N = 0, bool permitVisb = false)$/;"	f	class:Xbyak::CodeGenerator
opCvt	xbyak/xbyak.h	/^	void opCvt(const Xmm& x, const Operand& op, int type, int code)$/;"	f	class:Xbyak::CodeGenerator
opCvt2	xbyak/xbyak.h	/^	void opCvt2(const Xmm& x, const Operand& op, int type, int code)$/;"	f	class:Xbyak::CodeGenerator
opCvt3	xbyak/xbyak.h	/^	void opCvt3(const Xmm& x1, const Xmm& x2, const Operand& op, int type, int type64, int type32, uint8_t code)$/;"	f	class:Xbyak::CodeGenerator
opCvt5	xbyak/xbyak.h	/^	void opCvt5(const Xmm& x, const Operand& op, int type, int code)$/;"	f	class:Xbyak::CodeGenerator
opEncoding	xbyak/xbyak.h	/^	void opEncoding(const Xmm& x1, const Xmm& x2, const Operand& op, int type, int code0, PreferredEncoding encoding)$/;"	f	class:Xbyak::CodeGenerator
opExt	xbyak/xbyak.h	/^	void opExt(const Operand& op, const Mmx& mmx, int code, int imm, bool hasMMX2 = false)$/;"	f	class:Xbyak::CodeGenerator
opFpu	xbyak/xbyak.h	/^	void opFpu(const Fpu& reg, uint8_t code1, uint8_t code2)$/;"	f	class:Xbyak::CodeGenerator
opFpuFpu	xbyak/xbyak.h	/^	void opFpuFpu(const Fpu& reg1, const Fpu& reg2, uint32_t code1, uint32_t code2)$/;"	f	class:Xbyak::CodeGenerator
opFpuMem	xbyak/xbyak.h	/^	void opFpuMem(const Address& addr, uint8_t m16, uint8_t m32, uint8_t m64, uint8_t ext, uint8_t m64ext)$/;"	f	class:Xbyak::CodeGenerator
opGather	xbyak/xbyak.h	/^	void opGather(const Xmm& x1, const Address& addr, const Xmm& x2, int type, uint8_t code, int mode)$/;"	f	class:Xbyak::CodeGenerator
opGather2	xbyak/xbyak.h	/^	void opGather2(const Xmm& x, const Address& addr, int type, uint8_t code, int mode)$/;"	f	class:Xbyak::CodeGenerator
opGatherFetch	xbyak/xbyak.h	/^	void opGatherFetch(const Address& addr, const Xmm& x, int type, uint8_t code, Operand::Kind kind)$/;"	f	class:Xbyak::CodeGenerator
opGen	xbyak/xbyak.h	/^	void opGen(const Operand& reg, const Operand& op, int code, int pref, bool isValid(const Operand&, const Operand&), int imm8 = NONE, int preCode = NONE)$/;"	f	class:Xbyak::CodeGenerator
opGpr	xbyak/xbyak.h	/^	void opGpr(const Reg32e& r, const Operand& op1, const Operand& op2, int type, uint8_t code, bool isR_R_RM, int imm8 = NONE)$/;"	f	class:Xbyak::CodeGenerator
opInOut	xbyak/xbyak.h	/^	void opInOut(const Reg& a, const Reg& d, uint8_t code)$/;"	f	class:Xbyak::CodeGenerator
opInOut	xbyak/xbyak.h	/^	void opInOut(const Reg& a, uint8_t code, uint8_t v)$/;"	f	class:Xbyak::CodeGenerator
opIncDec	xbyak/xbyak.h	/^	void opIncDec(const Operand& op, int code, int ext)$/;"	f	class:Xbyak::CodeGenerator
opJmp	xbyak/xbyak.h	/^	void opJmp(T& label, LabelType type, uint8_t shortCode, uint8_t longCode, uint8_t longPref)$/;"	f	class:Xbyak::CodeGenerator
opJmpAbs	xbyak/xbyak.h	/^	void opJmpAbs(const void *addr, LabelType type, uint8_t shortCode, uint8_t longCode, uint8_t longPref = 0)$/;"	f	class:Xbyak::CodeGenerator
opJmpOp	xbyak/xbyak.h	/^	void opJmpOp(const Operand& op, LabelType type, int ext)$/;"	f	class:Xbyak::CodeGenerator
opLoadSeg	xbyak/xbyak.h	/^	void opLoadSeg(const Address& addr, const Reg& reg, int code0, int code1 = NONE)$/;"	f	class:Xbyak::CodeGenerator
opMIB	xbyak/xbyak.h	/^	void opMIB(const Address& addr, const Reg& reg, int code0, int code1)$/;"	f	class:Xbyak::CodeGenerator
opMMX	xbyak/xbyak.h	/^	void opMMX(const Mmx& mmx, const Operand& op, int code, int pref = 0x66, int imm8 = NONE, int preCode = NONE)$/;"	f	class:Xbyak::CodeGenerator
opMMX_IMM	xbyak/xbyak.h	/^	void opMMX_IMM(const Mmx& mmx, int imm8, int code, int ext)$/;"	f	class:Xbyak::CodeGenerator
opModM	xbyak/xbyak.h	/^	void opModM(const Address& addr, const Reg& reg, int code0, int code1 = NONE, int code2 = NONE, int immSize = 0)$/;"	f	class:Xbyak::CodeGenerator
opModR	xbyak/xbyak.h	/^	void opModR(const Reg& reg1, const Reg& reg2, int code0, int code1 = NONE, int code2 = NONE)$/;"	f	class:Xbyak::CodeGenerator
opModRM	xbyak/xbyak.h	/^	void opModRM(const Operand& op1, const Operand& op2, bool condR, bool condM, int code0, int code1 = NONE, int code2 = NONE, int immSize = 0)$/;"	f	class:Xbyak::CodeGenerator
opMovXMM	xbyak/xbyak.h	/^	void opMovXMM(const Operand& op1, const Operand& op2, int code, int pref)$/;"	f	class:Xbyak::CodeGenerator
opMovxx	xbyak/xbyak.h	/^	void opMovxx(const Reg& reg, const Operand& op, uint8_t code)$/;"	f	class:Xbyak::CodeGenerator
opPushPop	xbyak/xbyak.h	/^	void opPushPop(const Operand& op, int code, int ext, int alt)$/;"	f	class:Xbyak::CodeGenerator
opRM_I	xbyak/xbyak.h	/^	void opRM_I(const Operand& op, uint32_t imm, int code, int ext)$/;"	f	class:Xbyak::CodeGenerator
opRM_RM	xbyak/xbyak.h	/^	void opRM_RM(const Operand& op1, const Operand& op2, int code)$/;"	f	class:Xbyak::CodeGenerator
opR_ModM	xbyak/xbyak.h	/^	void opR_ModM(const Operand& op, int bit, int ext, int code0, int code1 = NONE, int code2 = NONE, bool disableRex = false, int immSize = 0)$/;"	f	class:Xbyak::CodeGenerator
opShift	xbyak/xbyak.h	/^	void opShift(const Operand& op, const Reg8& _cl, int ext)$/;"	f	class:Xbyak::CodeGenerator
opShift	xbyak/xbyak.h	/^	void opShift(const Operand& op, int imm, int ext)$/;"	f	class:Xbyak::CodeGenerator
opShxd	xbyak/xbyak.h	/^	void opShxd(const Operand& op, const Reg& reg, uint8_t imm, int code, const Reg8 *_cl = 0)$/;"	f	class:Xbyak::CodeGenerator
opSp1	xbyak/xbyak.h	/^	void opSp1(const Reg& reg, const Operand& op, uint8_t pref, uint8_t code0, uint8_t code1)$/;"	f	class:Xbyak::CodeGenerator
opVex	xbyak/xbyak.h	/^	void opVex(const Reg& r, const Operand *p1, const Operand& op2, int type, int code, int imm8 = NONE)$/;"	f	class:Xbyak::CodeGenerator
opVmov	xbyak/xbyak.h	/^	void opVmov(const Operand& op, const Xmm& x, int type, uint8_t code, bool mode)$/;"	f	class:Xbyak::CodeGenerator
operator !=	xbyak/xbyak.h	/^	bool operator!=(const Address& rhs) const { return !operator==(rhs); }$/;"	f	class:Xbyak::Address
operator !=	xbyak/xbyak.h	/^	bool operator!=(const Operand& rhs) const { return !operator==(rhs); }$/;"	f	class:Xbyak::Operand
operator !=	xbyak/xbyak_util.h	/^		bool operator!=(const Type& rhs) const { return !operator==(rhs); }$/;"	f	class:Xbyak::util::Cpu::Type
operator &	xbyak/xbyak_util.h	/^		Type operator&(const Type& rhs) const { Type t = *this; t &= rhs; return t; }$/;"	f	class:Xbyak::util::Cpu::Type
operator &=	xbyak/xbyak_util.h	/^		Type& operator&=(const Type& rhs) { L &= rhs.L; H &= rhs.H; return *this; }$/;"	f	class:Xbyak::util::Cpu::Type
operator *	xbyak/xbyak.h	/^inline RegExp operator*(const Reg& r, int scale)$/;"	f	namespace:Xbyak
operator *	xbyak/xbyak.h	/^inline RegExp operator*(int scale, const Reg& r)$/;"	f	namespace:Xbyak
operator +	xbyak/xbyak.h	/^	friend const RegRip operator+(const RegRip& r, const Label& label) {$/;"	f	struct:Xbyak::RegRip
operator +	xbyak/xbyak.h	/^	friend const RegRip operator+(const RegRip& r, const void *addr) {$/;"	f	struct:Xbyak::RegRip
operator +	xbyak/xbyak.h	/^	friend const RegRip operator+(const RegRip& r, int disp) {$/;"	f	struct:Xbyak::RegRip
operator +	xbyak/xbyak.h	/^	friend const RegRip operator+(const RegRip& r, int64_t disp) {$/;"	f	struct:Xbyak::RegRip
operator +	xbyak/xbyak.h	/^inline RegExp operator+(const RegExp& a, const RegExp& b)$/;"	f	namespace:Xbyak
operator -	xbyak/xbyak.h	/^	friend const RegRip operator-(const RegRip& r, int disp) {$/;"	f	struct:Xbyak::RegRip
operator -	xbyak/xbyak.h	/^	friend const RegRip operator-(const RegRip& r, int64_t disp) {$/;"	f	struct:Xbyak::RegRip
operator -	xbyak/xbyak.h	/^inline RegExp operator-(const RegExp& e, size_t disp)$/;"	f	namespace:Xbyak
operator =	jit_blas_utils.h	/^  fp16& operator=(float val) {$/;"	f	struct:jblas::utils::fp16
operator =	xbyak/xbyak.h	/^inline Label& Label::operator=(const Label& rhs)$/;"	f	class:Xbyak::Label
operator =	xbyak/xbyak_util.h	/^	Pack& operator=(const Pack& rhs)$/;"	f	class:Xbyak::util::Pack
operator ==	kernel_jit.h	/^  bool operator==(const decompress_block_s4_f32_codegen_param& other) const {$/;"	f	struct:decompress_block_s4_f32_codegen_param
operator ==	xbyak/xbyak.h	/^	bool operator==(const Address& rhs) const$/;"	f	class:Xbyak::Address
operator ==	xbyak/xbyak.h	/^	bool operator==(const RegExp& rhs) const$/;"	f	class:Xbyak::RegExp
operator ==	xbyak/xbyak.h	/^inline bool Operand::operator==(const Operand& rhs) const$/;"	f	class:Xbyak::Operand
operator ==	xbyak/xbyak_util.h	/^		bool operator==(const Type& rhs) const { return H == rhs.H && L == rhs.L; }$/;"	f	class:Xbyak::util::Cpu::Type
operator []	xbyak/xbyak.h	/^	Address operator[](const RegExp& e) const$/;"	f	class:Xbyak::AddressFrame
operator []	xbyak/xbyak.h	/^	Address operator[](const RegRip& addr) const { return Address(bit_, broadcast_, addr); }$/;"	f	class:Xbyak::AddressFrame
operator []	xbyak/xbyak.h	/^	Address operator[](const void *disp) const$/;"	f	class:Xbyak::AddressFrame
operator []	xbyak/xbyak.h	/^	Address operator[](uint64_t disp) const { return Address(disp); }$/;"	f	class:Xbyak::AddressFrame
operator []	xbyak/xbyak_util.h	/^	const Xbyak::Reg64& operator[](size_t n) const$/;"	f	class:Xbyak::util::Pack
operator bf16	jit_blas_utils.h	/^  explicit operator bf16() const {$/;"	f	struct:jblas::utils::fp16
operator bool	xbyak/xbyak_util.h	/^		operator bool() const { return (H | L) != 0; }$/;"	f	class:Xbyak::util::Cpu::Type
operator float	jit_blas_utils.h	/^  explicit operator float() const {$/;"	f	struct:jblas::utils::fp16
operator float	jit_blas_utils.h	/^  operator float() const { return tofloat(); }$/;"	f	struct:jblas::utils::bf16
operator int	xbyak/xbyak.h	/^	operator int() const { return err_; }$/;"	f	class:Xbyak::Error
operator |	xbyak/xbyak.h	/^	Xmm operator|(const EvexModifierRounding& emr) const { Xmm r(*this); r.setRounding(emr.rounding); return r; }$/;"	f	struct:Xbyak::Xmm
operator |	xbyak/xbyak.h	/^	Ymm operator|(const EvexModifierRounding& emr) const { Ymm r(*this); r.setRounding(emr.rounding); return r; }$/;"	f	struct:Xbyak::Ymm
operator |	xbyak/xbyak.h	/^	Zmm operator|(const EvexModifierRounding& emr) const { Zmm r(*this); r.setRounding(emr.rounding); return r; }$/;"	f	struct:Xbyak::Zmm
operator |	xbyak/xbyak.h	/^template<class T>T operator|(const T& x, const EvexModifierRounding& emr) { T r(x); r.setRounding(emr.rounding); return r; }$/;"	f	namespace:Xbyak
operator |	xbyak/xbyak.h	/^template<class T>T operator|(const T& x, const EvexModifierZero&) { T r(x); r.setZero(); return r; }$/;"	f	namespace:Xbyak
operator |	xbyak/xbyak.h	/^template<class T>T operator|(const T& x, const Opmask& k) { T r(x); r.setOpmaskIdx(k.getIdx()); return r; }$/;"	f	namespace:Xbyak
operator |	xbyak/xbyak_util.h	/^		Type operator|(const Type& rhs) const { Type t = *this; t |= rhs; return t; }$/;"	f	class:Xbyak::util::Cpu::Type
operator |	xbyak/xbyak_util.h	/^TypeT<L1 | L2, H1 | H2> operator|(TypeT<L1, H1>, TypeT<L2, H2>) { return TypeT<L1 | L2, H1 | H2>(); }$/;"	f	namespace:Xbyak::util::local
operator |=	xbyak/xbyak_util.h	/^		Type& operator|=(const Type& rhs) { L |= rhs.L; H |= rhs.H; return *this; }$/;"	f	class:Xbyak::util::Cpu::Type
optimize	xbyak/xbyak.h	/^	RegExp optimize() const$/;"	f	class:Xbyak::RegExp
or	xbyak/xbyak_mnemonic.h	/^void or(const Operand& op, uint32_t imm) { or_(op, imm); }$/;"	f
or	xbyak/xbyak_mnemonic.h	/^void or(const Operand& op1, const Operand& op2) { or_(op1, op2); }$/;"	f
orEvexIf	xbyak/xbyak.h	/^	int orEvexIf(PreferredEncoding encoding) {$/;"	f	class:Xbyak::CodeGenerator
or_	xbyak/xbyak_mnemonic.h	/^void or_(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x08, 1); }$/;"	f
or_	xbyak/xbyak_mnemonic.h	/^void or_(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x08); }$/;"	f
orpd	xbyak/xbyak_mnemonic.h	/^void orpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x56, 0x66, isXMM_XMMorMEM); }$/;"	f
orps	xbyak/xbyak_mnemonic.h	/^void orps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x56, 0x100, isXMM_XMMorMEM); }$/;"	f
outLocalLabel	xbyak/xbyak.h	/^	void outLocalLabel() { labelMgr_.leaveLocal(); }$/;"	f	class:Xbyak::CodeGenerator
out_	xbyak/xbyak_mnemonic.h	/^void out_(const Reg& d, const Reg& a) { opInOut(a, d, 0xEE); }$/;"	f
out_	xbyak/xbyak_mnemonic.h	/^void out_(uint8_t v, const Reg& a) { opInOut(a, 0xE6, v); }$/;"	f
outsb	xbyak/xbyak_mnemonic.h	/^void outsb() { db(0x6E); }$/;"	f
outsd	xbyak/xbyak_mnemonic.h	/^void outsd() { db(0x6F); }$/;"	f
outsw	xbyak/xbyak_mnemonic.h	/^void outsw() { db(0x66); db(0x6F); }$/;"	f
p	xbyak/xbyak_util.h	/^	const Pack& p;$/;"	m	class:Xbyak::util::StackFrame
pNum_	xbyak/xbyak_util.h	/^	int pNum_;$/;"	m	class:Xbyak::util::StackFrame
pTbl_	xbyak/xbyak_util.h	/^	Xbyak::Reg64 pTbl_[4];$/;"	m	class:Xbyak::util::StackFrame
p_	xbyak/xbyak_util.h	/^	Pack p_;$/;"	m	class:Xbyak::util::StackFrame
p_table	kernel_jit_injector.h	/^  Xbyak::Reg64 p_table;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
pabsb	xbyak/xbyak_mnemonic.h	/^void pabsb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x1C, 0x66, NONE, 0x38); }$/;"	f
pabsd	xbyak/xbyak_mnemonic.h	/^void pabsd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x1E, 0x66, NONE, 0x38); }$/;"	f
pabsw	xbyak/xbyak_mnemonic.h	/^void pabsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x1D, 0x66, NONE, 0x38); }$/;"	f
packQWeight	jit_blas_weight_compression.h	/^  virtual void packQWeight(const int N, const int K, const int8_t* B, const int ldb, const float* scales,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
packTransposeWeight	jit_blas_weight_compression.h	/^  virtual void packTransposeWeight(const int N, const int K, const float* B, const int ldb, PackedWeight* stor,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
packWeight	jit_blas_prologue.h	/^  void packWeight(const int N, const int K, const Param& _param) {$/;"	f	class:jblas::prologue::gemm::WeightPack
packWeight	jit_blas_weight_compression.h	/^  virtual void packWeight(const int N, const int K, const float* B, const int ldb, PackedWeight* stor,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
packWeightTranspose	jit_blas_prologue.h	/^  void packWeightTranspose(const int N, const int K, const Param& _param) {$/;"	f	class:jblas::prologue::gemm::WeightPack
packedW	jit_blas_prologue.h	/^    StorageWeight* packedW;$/;"	m	struct:jblas::prologue::gemm::WeightPack::Param
packedW	jit_blas_weight_compression.h	/^    const prologue::PackedWeight* packedW;$/;"	m	struct:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32::Param
packssdw	xbyak/xbyak_mnemonic.h	/^void packssdw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x6B); }$/;"	f
packsswb	xbyak/xbyak_mnemonic.h	/^void packsswb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x63); }$/;"	f
packusdw	xbyak/xbyak_mnemonic.h	/^void packusdw(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x2B, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
packuswb	xbyak/xbyak_mnemonic.h	/^void packuswb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x67); }$/;"	f
pad_fp4	kernel_avx512f.h	/^constexpr void (*pad_fp4)(int8_t* dstptr, int8_t* srcptr, __m512i vmask, int) = &convert_s4_s8<S4_CLIP>;$/;"	m	namespace:jblas::kernel::avx512f
paddb	xbyak/xbyak_mnemonic.h	/^void paddb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xFC); }$/;"	f
paddd	xbyak/xbyak_mnemonic.h	/^void paddd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xFE); }$/;"	f
padding_interleave	kernel_ref.h	/^static inline JBLAS_CODE padding_interleave(const T_SRC* src_ptr, T_DST* dst_ptr, int row, int col, int rowpad,$/;"	f	namespace:jblas::kernel::ref
padding_interleave_cvt	kernel_avx512f.h	/^struct padding_interleave_cvt {$/;"	s	namespace:jblas::kernel::avx512f
padding_interleave_cvt	kernel_avx512f.h	/^struct padding_interleave_cvt<utils::fp16, utils::bf16, 2> {$/;"	s	namespace:jblas::kernel::avx512f
padding_trans_interleave	kernel_ref.h	/^static inline JBLAS_CODE padding_trans_interleave(const T_SRC* src, T_DST* dst, int row, int col, int rowpad,$/;"	f	namespace:jblas::kernel::ref
padding_trans_interleave_cvt	kernel_avx512f.h	/^struct padding_trans_interleave_cvt {$/;"	s	namespace:jblas::kernel::avx512f
padding_trans_interleave_cvt	kernel_avx512f.h	/^struct padding_trans_interleave_cvt<utils::fp16, utils::bf16, 2> {$/;"	s	namespace:jblas::kernel::avx512f
paddq	xbyak/xbyak_mnemonic.h	/^void paddq(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xD4); }$/;"	f
paddsb	xbyak/xbyak_mnemonic.h	/^void paddsb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xEC); }$/;"	f
paddsw	xbyak/xbyak_mnemonic.h	/^void paddsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xED); }$/;"	f
paddusb	xbyak/xbyak_mnemonic.h	/^void paddusb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xDC); }$/;"	f
paddusw	xbyak/xbyak_mnemonic.h	/^void paddusw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xDD); }$/;"	f
paddw	xbyak/xbyak_mnemonic.h	/^void paddw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xFD); }$/;"	f
padto	jit_blas_utils.h	/^static inline int padto(int a, int b) { return updiv(a, b) * b; }$/;"	f	namespace:jblas::utils
padto	jit_blas_utils.h	/^static inline size_t padto(size_t a, int b) { return updiv(a, b) * b; }$/;"	f	namespace:jblas::utils
padto_le	jit_blas_utils.h	/^static inline int padto_le(int src, int padding) { return src \/ padding * padding; }$/;"	f	namespace:jblas::utils
padto_le	jit_blas_utils.h	/^static inline size_t padto_le(size_t src, int padding) { return src \/ size_t(padding) * size_t(padding); }$/;"	f	namespace:jblas::utils
palignr	xbyak/xbyak_mnemonic.h	/^void palignr(const Mmx& mmx, const Operand& op, int imm) { opMMX(mmx, op, 0x0f, 0x66, static_cast<uint8_t>(imm), 0x3a); }$/;"	f
pand	xbyak/xbyak_mnemonic.h	/^void pand(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xDB); }$/;"	f
pandn	xbyak/xbyak_mnemonic.h	/^void pandn(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xDF); }$/;"	f
parallel	jit_blas_utils.h	/^namespace parallel {$/;"	n	namespace:jblas::utils
parallel	ut/jit_blas_utils.cpp	/^namespace parallel {$/;"	n	namespace:jblas::utils	file:
paramA	jit_blas_transformer.h	/^    const typename _Launcher_T::AParam paramA;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
paramA	jit_blas_transformer.h	/^    const typename _Launcher_T::AParam paramA;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
paramA	jit_blas_weight_compression.h	/^    const AParam paramA;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::Param
paramA	jit_blas_wrapper.h	/^    const AParam paramA;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::Param
paramB	jit_blas_weight_compression.h	/^    const BParam paramB;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::Param
paramB	jit_blas_wrapper.h	/^    const BParam paramB;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::Param
paramC	jit_blas_weight_compression.h	/^    const EpiParam paramC;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::Param
paramC	jit_blas_wrapper.h	/^    const EpiParam paramC;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::Param
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
parambase	jit_blas_gemm.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
parambase	kernel_jit.h	/^    Xbyak::Reg64 parambase;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
params	jit_blas_gemm.h	/^  struct params {$/;"	s	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
params	kernel_jit.h	/^    struct params {$/;"	s	class:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32
params	kernel_jit.h	/^    struct params {$/;"	s	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
params	kernel_jit.h	/^  struct params {$/;"	s	class:jblas::kernel::jit::DecompressS4S8_AVX512F
params	kernel_jit.h	/^  struct params {$/;"	s	class:jblas::kernel::jit::JitMemcpy2DAvx512f
paramsB	jit_blas_transformer.h	/^    const typename _Launcher_T::BParam* paramsB;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
paramsB	jit_blas_transformer.h	/^    const typename _Launcher_T::BParam* paramsB;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
paramsC	jit_blas_transformer.h	/^    const typename _Launcher_T::EpiParam* paramsC;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
paramsC	jit_blas_transformer.h	/^    const typename _Launcher_T::EpiParam* paramsC;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
pause	xbyak/xbyak_mnemonic.h	/^void pause() { db(0xF3); db(0x90); }$/;"	f
pavgb	xbyak/xbyak_mnemonic.h	/^void pavgb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE0); }$/;"	f
pavgw	xbyak/xbyak_mnemonic.h	/^void pavgw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE3); }$/;"	f
pblendvb	xbyak/xbyak_mnemonic.h	/^void pblendvb(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x10, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pblendw	xbyak/xbyak_mnemonic.h	/^void pblendw(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x0E, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
pclmulhqhdq	xbyak/xbyak_mnemonic.h	/^void pclmulhqhdq(const Xmm& xmm, const Operand& op) { pclmulqdq(xmm, op, 0x11); }$/;"	f
pclmulhqlqdq	xbyak/xbyak_mnemonic.h	/^void pclmulhqlqdq(const Xmm& xmm, const Operand& op) { pclmulqdq(xmm, op, 0x01); }$/;"	f
pclmullqhdq	xbyak/xbyak_mnemonic.h	/^void pclmullqhdq(const Xmm& xmm, const Operand& op) { pclmulqdq(xmm, op, 0x10); }$/;"	f
pclmullqlqdq	xbyak/xbyak_mnemonic.h	/^void pclmullqlqdq(const Xmm& xmm, const Operand& op) { pclmulqdq(xmm, op, 0x00); }$/;"	f
pclmulqdq	xbyak/xbyak_mnemonic.h	/^void pclmulqdq(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x44, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
pcmpeqb	xbyak/xbyak_mnemonic.h	/^void pcmpeqb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x74); }$/;"	f
pcmpeqd	xbyak/xbyak_mnemonic.h	/^void pcmpeqd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x76); }$/;"	f
pcmpeqq	xbyak/xbyak_mnemonic.h	/^void pcmpeqq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x29, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pcmpeqw	xbyak/xbyak_mnemonic.h	/^void pcmpeqw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x75); }$/;"	f
pcmpestri	xbyak/xbyak_mnemonic.h	/^void pcmpestri(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x61, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
pcmpestrm	xbyak/xbyak_mnemonic.h	/^void pcmpestrm(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x60, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
pcmpgtb	xbyak/xbyak_mnemonic.h	/^void pcmpgtb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x64); }$/;"	f
pcmpgtd	xbyak/xbyak_mnemonic.h	/^void pcmpgtd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x66); }$/;"	f
pcmpgtq	xbyak/xbyak_mnemonic.h	/^void pcmpgtq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x37, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pcmpgtw	xbyak/xbyak_mnemonic.h	/^void pcmpgtw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x65); }$/;"	f
pcmpistri	xbyak/xbyak_mnemonic.h	/^void pcmpistri(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x63, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
pcmpistrm	xbyak/xbyak_mnemonic.h	/^void pcmpistrm(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x62, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
pdep	xbyak/xbyak_mnemonic.h	/^void pdep(const Reg32e& r1, const Reg32e& r2, const Operand& op) { opGpr(r1, r2, op, T_F2 | T_0F38, 0xf5, true); }$/;"	f
pext	xbyak/xbyak_mnemonic.h	/^void pext(const Reg32e& r1, const Reg32e& r2, const Operand& op) { opGpr(r1, r2, op, T_F3 | T_0F38, 0xf5, true); }$/;"	f
pextrb	xbyak/xbyak_mnemonic.h	/^void pextrb(const Operand& op, const Xmm& xmm, uint8_t imm) { opExt(op, xmm, 0x14, imm); }$/;"	f
pextrd	xbyak/xbyak_mnemonic.h	/^void pextrd(const Operand& op, const Xmm& xmm, uint8_t imm) { opExt(op, xmm, 0x16, imm); }$/;"	f
pextrq	xbyak/xbyak_mnemonic.h	/^void pextrq(const Operand& op, const Xmm& xmm, uint8_t imm) { if (!op.isREG(64) && !op.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opGen(Reg64(xmm.getIdx()), op, 0x16, 0x66, 0, imm, 0x3A); }$/;"	f
pextrw	xbyak/xbyak_mnemonic.h	/^void pextrw(const Operand& op, const Mmx& xmm, uint8_t imm) { opExt(op, xmm, 0x15, imm, true); }$/;"	f
phaddd	xbyak/xbyak_mnemonic.h	/^void phaddd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x02, 0x66, NONE, 0x38); }$/;"	f
phaddsw	xbyak/xbyak_mnemonic.h	/^void phaddsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x03, 0x66, NONE, 0x38); }$/;"	f
phaddw	xbyak/xbyak_mnemonic.h	/^void phaddw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x01, 0x66, NONE, 0x38); }$/;"	f
phminposuw	xbyak/xbyak_mnemonic.h	/^void phminposuw(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x41, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
phsubd	xbyak/xbyak_mnemonic.h	/^void phsubd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x06, 0x66, NONE, 0x38); }$/;"	f
phsubsw	xbyak/xbyak_mnemonic.h	/^void phsubsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x07, 0x66, NONE, 0x38); }$/;"	f
phsubw	xbyak/xbyak_mnemonic.h	/^void phsubw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x05, 0x66, NONE, 0x38); }$/;"	f
pinsrb	xbyak/xbyak_mnemonic.h	/^void pinsrb(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x20, 0x66, isXMM_REG32orMEM, imm, 0x3A); }$/;"	f
pinsrd	xbyak/xbyak_mnemonic.h	/^void pinsrd(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x22, 0x66, isXMM_REG32orMEM, imm, 0x3A); }$/;"	f
pinsrq	xbyak/xbyak_mnemonic.h	/^void pinsrq(const Xmm& xmm, const Operand& op, uint8_t imm) { if (!op.isREG(64) && !op.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opGen(Reg64(xmm.getIdx()), op, 0x22, 0x66, 0, imm, 0x3A); }$/;"	f
pinsrw	xbyak/xbyak_mnemonic.h	/^void pinsrw(const Mmx& mmx, const Operand& op, int imm) { if (!op.isREG(32) && !op.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opGen(mmx, op, 0xC4, mmx.isXMM() ? 0x66 : NONE, 0, imm); }$/;"	f
pmaddubsw	xbyak/xbyak_mnemonic.h	/^void pmaddubsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x04, 0x66, NONE, 0x38); }$/;"	f
pmaddwd	xbyak/xbyak_mnemonic.h	/^void pmaddwd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF5); }$/;"	f
pmaxsb	xbyak/xbyak_mnemonic.h	/^void pmaxsb(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x3C, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmaxsd	xbyak/xbyak_mnemonic.h	/^void pmaxsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x3D, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmaxsw	xbyak/xbyak_mnemonic.h	/^void pmaxsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xEE); }$/;"	f
pmaxub	xbyak/xbyak_mnemonic.h	/^void pmaxub(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xDE); }$/;"	f
pmaxud	xbyak/xbyak_mnemonic.h	/^void pmaxud(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x3F, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmaxuw	xbyak/xbyak_mnemonic.h	/^void pmaxuw(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x3E, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pminsb	xbyak/xbyak_mnemonic.h	/^void pminsb(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x38, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pminsd	xbyak/xbyak_mnemonic.h	/^void pminsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x39, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pminsw	xbyak/xbyak_mnemonic.h	/^void pminsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xEA); }$/;"	f
pminub	xbyak/xbyak_mnemonic.h	/^void pminub(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xDA); }$/;"	f
pminud	xbyak/xbyak_mnemonic.h	/^void pminud(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x3B, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pminuw	xbyak/xbyak_mnemonic.h	/^void pminuw(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x3A, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovmskb	xbyak/xbyak_mnemonic.h	/^void pmovmskb(const Reg32e& reg, const Mmx& mmx) { if (mmx.isXMM()) db(0x66); opModR(reg, mmx, 0x0F, 0xD7); }$/;"	f
pmovsxbd	xbyak/xbyak_mnemonic.h	/^void pmovsxbd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x21, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovsxbq	xbyak/xbyak_mnemonic.h	/^void pmovsxbq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x22, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovsxbw	xbyak/xbyak_mnemonic.h	/^void pmovsxbw(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x20, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovsxdq	xbyak/xbyak_mnemonic.h	/^void pmovsxdq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x25, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovsxwd	xbyak/xbyak_mnemonic.h	/^void pmovsxwd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x23, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovsxwq	xbyak/xbyak_mnemonic.h	/^void pmovsxwq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x24, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovzxbd	xbyak/xbyak_mnemonic.h	/^void pmovzxbd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x31, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovzxbq	xbyak/xbyak_mnemonic.h	/^void pmovzxbq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x32, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovzxbw	xbyak/xbyak_mnemonic.h	/^void pmovzxbw(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x30, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovzxdq	xbyak/xbyak_mnemonic.h	/^void pmovzxdq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x35, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovzxwd	xbyak/xbyak_mnemonic.h	/^void pmovzxwd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x33, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmovzxwq	xbyak/xbyak_mnemonic.h	/^void pmovzxwq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x34, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmuldq	xbyak/xbyak_mnemonic.h	/^void pmuldq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x28, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmulhrsw	xbyak/xbyak_mnemonic.h	/^void pmulhrsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x0B, 0x66, NONE, 0x38); }$/;"	f
pmulhuw	xbyak/xbyak_mnemonic.h	/^void pmulhuw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE4); }$/;"	f
pmulhw	xbyak/xbyak_mnemonic.h	/^void pmulhw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE5); }$/;"	f
pmulld	xbyak/xbyak_mnemonic.h	/^void pmulld(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x40, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
pmullw	xbyak/xbyak_mnemonic.h	/^void pmullw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xD5); }$/;"	f
pmuludq	xbyak/xbyak_mnemonic.h	/^void pmuludq(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF4); }$/;"	f
pop	xbyak/xbyak.h	/^	void pop(const Operand& op) { opPushPop(op, 0x8F, 0, 0x58); }$/;"	f	class:Xbyak::CodeGenerator
pop	xbyak/xbyak.h	/^	void pop(const Segment& seg)$/;"	f	class:Xbyak::CodeGenerator
popa	xbyak/xbyak_mnemonic.h	/^void popa() { db(0x61); }$/;"	f
popad	xbyak/xbyak_mnemonic.h	/^void popad() { db(0x61); }$/;"	f
popcnt	xbyak/xbyak_mnemonic.h	/^void popcnt(const Reg&reg, const Operand& op) { opSp1(reg, op, 0xF3, 0x0F, 0xB8); }$/;"	f
popf	xbyak/xbyak_mnemonic.h	/^void popf() { db(0x9D); }$/;"	f
popfd	xbyak/xbyak_mnemonic.h	/^void popfd() { db(0x9D); }$/;"	f
popfq	xbyak/xbyak_mnemonic.h	/^void popfq() { db(0x9D); }$/;"	f
por	xbyak/xbyak_mnemonic.h	/^void por(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xEB); }$/;"	f
positive_mask	kernel_jit_injector.h	/^    positive_mask,                        \/\/ changes sign to positive$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
prefetchit0	xbyak/xbyak_mnemonic.h	/^void prefetchit0(const Address& addr) { opModM(addr, Reg32(7), 0x0F, 0x18); }$/;"	f
prefetchit1	xbyak/xbyak_mnemonic.h	/^void prefetchit1(const Address& addr) { opModM(addr, Reg32(6), 0x0F, 0x18); }$/;"	f
prefetchnta	xbyak/xbyak_mnemonic.h	/^void prefetchnta(const Address& addr) { opModM(addr, Reg32(0), 0x0F, 0x18); }$/;"	f
prefetcht0	xbyak/xbyak_mnemonic.h	/^void prefetcht0(const Address& addr) { opModM(addr, Reg32(1), 0x0F, 0x18); }$/;"	f
prefetcht1	xbyak/xbyak_mnemonic.h	/^void prefetcht1(const Address& addr) { opModM(addr, Reg32(2), 0x0F, 0x18); }$/;"	f
prefetcht2	xbyak/xbyak_mnemonic.h	/^void prefetcht2(const Address& addr) { opModM(addr, Reg32(3), 0x0F, 0x18); }$/;"	f
prefetchw	xbyak/xbyak_mnemonic.h	/^void prefetchw(const Address& addr) { opModM(addr, Reg32(1), 0x0F, 0x0D); }$/;"	f
prefetchwt1	xbyak/xbyak_mnemonic.h	/^void prefetchwt1(const Address& addr) { opModM(addr, Reg32(2), 0x0F, 0x0D); }$/;"	f
prepare_table	kernel_jit_injector.h	/^  void prepare_table() {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
print	jit_blas_utils.h	/^  void print() {$/;"	f	class:jblas::utils::parallel::CpuDevice
print	jit_blas_utils.h	/^  void print() {$/;"	f	struct:jblas::utils::parallel::Parallel2D
print	jit_blas_utils.h	/^  void print() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
print	jit_blas_utils.h	/^  void print() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
print	jit_blas_utils.h	/^  void print() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
print	jit_blas_utils.h	/^  void print() {$/;"	f	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
prologue	jit_blas_prologue.h	/^namespace prologue {$/;"	n	namespace:jblas
prologue	jit_blas_weight_compression.h	/^namespace prologue {$/;"	n	namespace:jblas
protect	xbyak/xbyak.h	/^	static inline bool protect(const void *addr, size_t size, int protectMode)$/;"	f	class:Xbyak::CodeArray
psadbw	xbyak/xbyak_mnemonic.h	/^void psadbw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF6); }$/;"	f
pshufb	xbyak/xbyak_mnemonic.h	/^void pshufb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x00, 0x66, NONE, 0x38); }$/;"	f
pshufd	xbyak/xbyak_mnemonic.h	/^void pshufd(const Mmx& mmx, const Operand& op, uint8_t imm8) { opMMX(mmx, op, 0x70, 0x66, imm8); }$/;"	f
pshufhw	xbyak/xbyak_mnemonic.h	/^void pshufhw(const Mmx& mmx, const Operand& op, uint8_t imm8) { opMMX(mmx, op, 0x70, 0xF3, imm8); }$/;"	f
pshuflw	xbyak/xbyak_mnemonic.h	/^void pshuflw(const Mmx& mmx, const Operand& op, uint8_t imm8) { opMMX(mmx, op, 0x70, 0xF2, imm8); }$/;"	f
pshufw	xbyak/xbyak_mnemonic.h	/^void pshufw(const Mmx& mmx, const Operand& op, uint8_t imm8) { opMMX(mmx, op, 0x70, 0x00, imm8); }$/;"	f
psignb	xbyak/xbyak_mnemonic.h	/^void psignb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x08, 0x66, NONE, 0x38); }$/;"	f
psignd	xbyak/xbyak_mnemonic.h	/^void psignd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x0A, 0x66, NONE, 0x38); }$/;"	f
psignw	xbyak/xbyak_mnemonic.h	/^void psignw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x09, 0x66, NONE, 0x38); }$/;"	f
pslld	xbyak/xbyak_mnemonic.h	/^void pslld(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF2); }$/;"	f
pslld	xbyak/xbyak_mnemonic.h	/^void pslld(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x72, 6); }$/;"	f
pslldq	xbyak/xbyak_mnemonic.h	/^void pslldq(const Xmm& xmm, int imm8) { opMMX_IMM(xmm, imm8, 0x73, 7); }$/;"	f
psllq	xbyak/xbyak_mnemonic.h	/^void psllq(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF3); }$/;"	f
psllq	xbyak/xbyak_mnemonic.h	/^void psllq(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x73, 6); }$/;"	f
psllw	xbyak/xbyak_mnemonic.h	/^void psllw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF1); }$/;"	f
psllw	xbyak/xbyak_mnemonic.h	/^void psllw(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x71, 6); }$/;"	f
psrad	xbyak/xbyak_mnemonic.h	/^void psrad(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE2); }$/;"	f
psrad	xbyak/xbyak_mnemonic.h	/^void psrad(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x72, 4); }$/;"	f
psraw	xbyak/xbyak_mnemonic.h	/^void psraw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE1); }$/;"	f
psraw	xbyak/xbyak_mnemonic.h	/^void psraw(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x71, 4); }$/;"	f
psrld	xbyak/xbyak_mnemonic.h	/^void psrld(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xD2); }$/;"	f
psrld	xbyak/xbyak_mnemonic.h	/^void psrld(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x72, 2); }$/;"	f
psrldq	xbyak/xbyak_mnemonic.h	/^void psrldq(const Xmm& xmm, int imm8) { opMMX_IMM(xmm, imm8, 0x73, 3); }$/;"	f
psrlq	xbyak/xbyak_mnemonic.h	/^void psrlq(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xD3); }$/;"	f
psrlq	xbyak/xbyak_mnemonic.h	/^void psrlq(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x73, 2); }$/;"	f
psrlw	xbyak/xbyak_mnemonic.h	/^void psrlw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xD1); }$/;"	f
psrlw	xbyak/xbyak_mnemonic.h	/^void psrlw(const Mmx& mmx, int imm8) { opMMX_IMM(mmx, imm8, 0x71, 2); }$/;"	f
psubb	xbyak/xbyak_mnemonic.h	/^void psubb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF8); }$/;"	f
psubd	xbyak/xbyak_mnemonic.h	/^void psubd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xFA); }$/;"	f
psubq	xbyak/xbyak_mnemonic.h	/^void psubq(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xFB); }$/;"	f
psubsb	xbyak/xbyak_mnemonic.h	/^void psubsb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE8); }$/;"	f
psubsw	xbyak/xbyak_mnemonic.h	/^void psubsw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xE9); }$/;"	f
psubusb	xbyak/xbyak_mnemonic.h	/^void psubusb(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xD8); }$/;"	f
psubusw	xbyak/xbyak_mnemonic.h	/^void psubusw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xD9); }$/;"	f
psubw	xbyak/xbyak_mnemonic.h	/^void psubw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xF9); }$/;"	f
ptest	xbyak/xbyak_mnemonic.h	/^void ptest(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x17, 0x66, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
ptr	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
ptr_b	xbyak/xbyak.h	/^	const AddressFrame ptr_b, xword_b, yword_b, zword_b; \/\/ broadcast such as {1to2}, {1to4}, {1to8}, {1to16}, {b}$/;"	m	class:Xbyak::CodeGenerator
punpckhbw	xbyak/xbyak_mnemonic.h	/^void punpckhbw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x68); }$/;"	f
punpckhdq	xbyak/xbyak_mnemonic.h	/^void punpckhdq(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x6A); }$/;"	f
punpckhqdq	xbyak/xbyak_mnemonic.h	/^void punpckhqdq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x6D, 0x66, isXMM_XMMorMEM); }$/;"	f
punpckhwd	xbyak/xbyak_mnemonic.h	/^void punpckhwd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x69); }$/;"	f
punpcklbw	xbyak/xbyak_mnemonic.h	/^void punpcklbw(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x60); }$/;"	f
punpckldq	xbyak/xbyak_mnemonic.h	/^void punpckldq(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x62); }$/;"	f
punpcklqdq	xbyak/xbyak_mnemonic.h	/^void punpcklqdq(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x6C, 0x66, isXMM_XMMorMEM); }$/;"	f
punpcklwd	xbyak/xbyak_mnemonic.h	/^void punpcklwd(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0x61); }$/;"	f
push	xbyak/xbyak.h	/^	void push(const AddressFrame& af, uint32_t imm)$/;"	f	class:Xbyak::CodeGenerator
push	xbyak/xbyak.h	/^	void push(const Operand& op) { opPushPop(op, 0xFF, 6, 0x50); }$/;"	f	class:Xbyak::CodeGenerator
push	xbyak/xbyak.h	/^	void push(const Segment& seg)$/;"	f	class:Xbyak::CodeGenerator
push	xbyak/xbyak.h	/^	void push(uint32_t imm)$/;"	f	class:Xbyak::CodeGenerator
pusha	xbyak/xbyak_mnemonic.h	/^void pusha() { db(0x60); }$/;"	f
pushad	xbyak/xbyak_mnemonic.h	/^void pushad() { db(0x60); }$/;"	f
pushf	xbyak/xbyak_mnemonic.h	/^void pushf() { db(0x9C); }$/;"	f
pushfd	xbyak/xbyak_mnemonic.h	/^void pushfd() { db(0x9C); }$/;"	f
pushfq	xbyak/xbyak_mnemonic.h	/^void pushfq() { db(0x9C); }$/;"	f
put	xbyak/xbyak_util.h	/^	void put() const$/;"	f	class:Xbyak::util::Pack
putFamily	xbyak/xbyak_util.h	/^	void putFamily() const$/;"	f	class:Xbyak::util::Cpu
putL	xbyak/xbyak.h	/^	void putL(const Label& label) { putL_inner(label); }$/;"	f	class:Xbyak::CodeGenerator
putL	xbyak/xbyak.h	/^	void putL(std::string label) { putL_inner(label); }$/;"	f	class:Xbyak::CodeGenerator
putL_inner	xbyak/xbyak.h	/^	void putL_inner(T& label, bool relative = false, size_t disp = 0)$/;"	f	class:Xbyak::CodeGenerator
putSeg	xbyak/xbyak.h	/^	void putSeg(const Segment& seg)$/;"	f	class:Xbyak::CodeGenerator
pxor	xbyak/xbyak_mnemonic.h	/^void pxor(const Mmx& mmx, const Operand& op) { opMMX(mmx, op, 0xEF); }$/;"	f
quan	jit_blas_prologue.h	/^    QParam* quan;$/;"	m	struct:jblas::prologue::gemm::ActivationF32S8KBlockQuantize::Param
quan	jit_blas_prologue.h	/^    QParam* quan;$/;"	m	struct:jblas::prologue::gemm::ActivationF32U8KBlockQuantize::Param
quanout_s32_u32	kernel_avx512f.h	/^static inline JBLAS_CODE quanout_s32_u32(const float alpha, const int32_t* srcptr, const int srcstep, uint8_t* dstptr,$/;"	f	namespace:jblas::kernel::avx512f
quanout_s32_u32	kernel_ref.h	/^static inline JBLAS_CODE quanout_s32_u32(const float alpha, const int32_t* srcptr, const int srcstep, uint8_t* dstptr,$/;"	f	namespace:jblas::kernel::ref
quantRowBlock	jit_blas_weight_compression.h	/^  virtual void quantRowBlock(const float* srcptr, int8_t* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS4ScaleFp32
quantRowBlock	jit_blas_weight_compression.h	/^  virtual void quantRowBlock(const float* srcptr, int8_t* dstptr, int row, int col, int ld_src, int ld_dst,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
quantize	jit_blas_prologue.h	/^  JBLAS_CODE quantize(const Param& _param, int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32AsymU8Quantize
quantize	jit_blas_prologue.h	/^  JBLAS_CODE quantize(const Param& _param, int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationFp32SymS8Quantize
quantize	jit_blas_prologue.h	/^  void quantize(const Param& _param, int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationF32S8KBlockQuantize
quantize	jit_blas_prologue.h	/^  void quantize(const Param& _param, int m, int k) {$/;"	f	class:jblas::prologue::gemm::ActivationF32U8KBlockQuantize
quantizeWeight	jit_blas_weight_compression.h	/^  void quantizeWeight(const int N, const int K, const float* B, const int ldb, int blocksize, int8_t* qB, float* scales,$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
quantize_f32_f4_rowblock	kernel_ref.h	/^inline JBLAS_CODE quantize_f32_f4_rowblock(const float* srcptr, int8_t* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
quantize_f32_s8_colblock	kernel_avx512f.h	/^static inline JBLAS_CODE quantize_f32_s8_colblock(int row, int col, const float* srcptr, int ld_src, int8_t* dstptr,$/;"	f	namespace:jblas::kernel::avx512f
quantize_f32_s8_colblock	kernel_ref.h	/^inline JBLAS_CODE quantize_f32_s8_colblock(int row, int col, const float* srcptr, int ld_src, int8_t* dstptr,$/;"	f	namespace:jblas::kernel::ref
quantize_f32_sign_int_rowblock	kernel_avx512f.h	/^static inline JBLAS_CODE quantize_f32_sign_int_rowblock(const float* srcptr, int8_t* dstptr, int row, int col,$/;"	f	namespace:jblas::kernel::avx512f
quantize_f32_sign_int_rowblock	kernel_ref.h	/^inline JBLAS_CODE quantize_f32_sign_int_rowblock(const float* srcptr, int8_t* dstptr, int row, int col, int ld_src,$/;"	f	namespace:jblas::kernel::ref
quantize_f32_sign_int_rowblock_asym	kernel_avx512f.h	/^static inline JBLAS_CODE quantize_f32_sign_int_rowblock_asym(const float* srcptr, int8_t* dstptr, int row, int col,$/;"	f	namespace:jblas::kernel::avx512f
quantize_f32_sign_int_rowblock_sym	kernel_avx512f.h	/^static inline JBLAS_CODE quantize_f32_sign_int_rowblock_sym(const float* srcptr, int8_t* dstptr, int row, int col,$/;"	f	namespace:jblas::kernel::avx512f
quantize_f32_u8_colblock	kernel_avx512f.h	/^static inline JBLAS_CODE quantize_f32_u8_colblock(int row, int col, const float* srcptr, int ld_src, uint8_t* dstptr,$/;"	f	namespace:jblas::kernel::avx512f
quantize_f32_u8_colblock	kernel_ref.h	/^inline JBLAS_CODE quantize_f32_u8_colblock(int row, int col, const float* srcptr, int ld_src, uint8_t* dstptr,$/;"	f	namespace:jblas::kernel::ref
qword	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
r10	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r10b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r10d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r10w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
r11	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r11b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r11d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r11w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
r12	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r12b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r12d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r12w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
r13	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r13b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r13d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r13w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
r14	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r14b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r14d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r14w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
r15	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r15b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r15d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r15w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
r8	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r8b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r8d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r8w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
r9	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
r9b	xbyak/xbyak.h	/^	const Reg8 r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b;$/;"	m	class:Xbyak::CodeGenerator
r9d	xbyak/xbyak.h	/^	const Reg32 r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d;$/;"	m	class:Xbyak::CodeGenerator
r9w	xbyak/xbyak.h	/^	const Reg16 r8w, r9w, r10w, r11w, r12w, r13w, r14w, r15w;$/;"	m	class:Xbyak::CodeGenerator
rand_scale	ut/jit_blas_ut.h	/^  void rand_scale(size_t n, float minval, float maxval) {$/;"	f	struct:jblas::ut::UT_vector_s8
rand_scale	ut/jit_blas_ut.h	/^  void rand_scale(size_t n, float minval, float maxval) {$/;"	f	struct:jblas::ut::UT_vector_u8
randn	ut/jit_blas_ut.h	/^inline _T randn(_T minval, _T maxval) {$/;"	f	namespace:jblas::ut
randn	ut/jit_blas_ut.h	/^inline utils::bf16 randn(utils::bf16 minval, utils::bf16 maxval) {$/;"	f	namespace:jblas::ut
randn	ut/jit_blas_ut.h	/^inline utils::fp16 randn(utils::fp16 minval, utils::fp16 maxval) {$/;"	f	namespace:jblas::ut
rax	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rbp	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rbx	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rcl	xbyak/xbyak_mnemonic.h	/^void rcl(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 2); }$/;"	f
rcl	xbyak/xbyak_mnemonic.h	/^void rcl(const Operand& op, int imm) { opShift(op, imm, 2); }$/;"	f
rcpps	xbyak/xbyak_mnemonic.h	/^void rcpps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x53, 0x100, isXMM_XMMorMEM); }$/;"	f
rcpss	xbyak/xbyak_mnemonic.h	/^void rcpss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x53, 0xF3, isXMM_XMMorMEM); }$/;"	f
rcr	xbyak/xbyak_mnemonic.h	/^void rcr(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 3); }$/;"	f
rcr	xbyak/xbyak_mnemonic.h	/^void rcr(const Operand& op, int imm) { opShift(op, imm, 3); }$/;"	f
rcx	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rcxPos	xbyak/xbyak_util.h	/^	static const int rcxPos = 0;$/;"	m	class:Xbyak::util::StackFrame
rdi	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rdmsr	xbyak/xbyak_mnemonic.h	/^void rdmsr() { db(0x0F); db(0x32); }$/;"	f
rdpmc	xbyak/xbyak_mnemonic.h	/^void rdpmc() { db(0x0F); db(0x33); }$/;"	f
rdrand	xbyak/xbyak_mnemonic.h	/^void rdrand(const Reg& r) { if (r.isBit(8)) XBYAK_THROW(ERR_BAD_SIZE_OF_REGISTER) opModR(Reg(6, Operand::REG, r.getBit()), r, 0x0F, 0xC7); }$/;"	f
rdseed	xbyak/xbyak_mnemonic.h	/^void rdseed(const Reg& r) { if (r.isBit(8)) XBYAK_THROW(ERR_BAD_SIZE_OF_REGISTER) opModR(Reg(7, Operand::REG, r.getBit()), r, 0x0F, 0xC7); }$/;"	f
rdtsc	xbyak/xbyak_mnemonic.h	/^void rdtsc() { db(0x0F); db(0x31); }$/;"	f
rdtscp	xbyak/xbyak_mnemonic.h	/^void rdtscp() { db(0x0F); db(0x01); db(0xF9); }$/;"	f
rdx	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rdxPos	xbyak/xbyak_util.h	/^	static const int rdxPos = 1;$/;"	m	class:Xbyak::util::StackFrame
readFile2Buffer	ut/jit_blas_ut.h	/^jblas::utils::aligned_vector<_T> readFile2Buffer(const char* filepath) {$/;"	f	namespace:jblas::ut
ready	xbyak/xbyak.h	/^	void ready(ProtectMode mode = PROTECT_RWE)$/;"	f	class:Xbyak::CodeGenerator
readyRE	xbyak/xbyak.h	/^	void readyRE() { return ready(PROTECT_RE); }$/;"	f	class:Xbyak::CodeGenerator
record	jit_blas_utils.h	/^  void record() {$/;"	f	class:jblas::utils::timer_statistics_logger
reduceB	jit_blas_epilogue.h	/^    float* reduceB;$/;"	m	struct:jblas::epilogue::gemm::ZpDequantInt32ToFp32::Param
ref	kernel_ref.h	/^namespace ref {$/;"	n	namespace:jblas::kernel
refCount	xbyak/xbyak.h	/^		int refCount;$/;"	m	struct:Xbyak::LabelManager::ClabelVal
ref_NN_f32	ut/jit_blas_ut.h	/^  static void ref_NN_f32(float* matA, float* matB, float* matC, float* matD, int m, int n, int k, int lda, int ldb,$/;"	f	struct:jblas::ut::UT_GEMMData_Row_f32
reference	jit_blas_gemm.h	/^  void reference(AType* matA, BType* matB, CType* matC, AType* zpA, float* scaleA, int _ldsa, float* scaleB, int _ldsb,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
reference	jit_blas_gemm.h	/^  void reference(AType* matA, BType* matB, CType* matC, AType* zpA, float* scaleA, int _ldsa, utils::bf16* scaleB,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK
reference	jit_blas_gemm.h	/^  void reference(AType* matA, BType* matB, CType* matC, float* scaleA, int _ldsa, float* scaleB, int _ldsb, int _m,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
reference	jit_blas_gemm.h	/^  void reference(AType* matA, BType* matB, CType* matC, float* scaleA, int _ldsa, utils::bf16* scaleB, int _ldsb,$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK
reference	jit_blas_gemm.h	/^  void reference(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k, int _astride, int _bstride,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI
reference	ut/jit_blas_gemm.cpp	/^void gemm::GemmCore_Row_NN_16x48_AMX_BF16::reference(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16
reference	ut/jit_blas_gemm.cpp	/^void gemm::GemmCore_Row_NN_16x48_AMX_INT8::reference(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8
reference	ut/jit_blas_gemm.cpp	/^void gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::reference(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss
reference	ut/jit_blas_gemm.cpp	/^void gemm::GemmCore_Row_NN_16x64_AMX_BF16::reference(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16
reference	ut/jit_blas_gemm.cpp	/^void gemm::GemmCore_Row_NN_16x64_AMX_INT8::reference(AType* matA, BType* matB, CType* matC, int _m, int _n, int _k,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_astep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_astep;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_colsize	kernel_jit.h	/^    Xbyak::Reg64 reg_colsize;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_cstep	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_cstep;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_dstptr	kernel_jit.h	/^    Xbyak::Reg64 reg_dstptr;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_dststride	kernel_jit.h	/^    Xbyak::Reg64 reg_dststride;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_itercol	kernel_jit.h	/^    Xbyak::Reg64 reg_itercol;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_iterk	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_iterk;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_itern	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_itern;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_iterrow	kernel_jit.h	/^    Xbyak::Reg64 reg_iterrow;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_kblock	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_kblock;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_kblock	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_kblock;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_ksize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ksize;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_matAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matAptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_matBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matBptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_matCptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_matCptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_nsize	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_nsize;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_ret	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_ret = rax;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_ret	kernel_jit.h	/^    Xbyak::Reg64 reg_ret;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_rowsize	kernel_jit.h	/^    Xbyak::Reg64 reg_rowsize;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_rt_const_p	kernel_jit_injector.h	/^  Xbyak::Reg64 reg_rt_const_p;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
reg_scaleAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_scaleAptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_scaleAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_scaleAptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_scaleBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_scaleBptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_scaleBptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_scaleBptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_scaleptr	kernel_jit.h	/^    Xbyak::Reg64 reg_scaleptr;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_srcptr	kernel_jit.h	/^    Xbyak::Reg64 reg_srcptr;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_srcstride	kernel_jit.h	/^    Xbyak::Reg64 reg_srcstride;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_tmp	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_tmp	kernel_jit.h	/^    Xbyak::Reg64 reg_tmp;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_tmp1	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_tmp1	kernel_jit.h	/^    Xbyak::Reg64 reg_tmp1;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_tmp2	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp2;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reg_tmp3	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_tmp3;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::MicroKernel
reg_tmpdst	kernel_jit.h	/^    Xbyak::Reg64 reg_tmpdst;$/;"	m	class:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F
reg_zpAptr	jit_blas_gemm.h	/^    Xbyak::Reg64 reg_zpAptr;$/;"	m	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
reigster_table_entries	kernel_jit_injector.h	/^  void reigster_table_entries() {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
relu_compute_vector_fwd	kernel_jit_injector.h	/^  void relu_compute_vector_fwd(const Xbyak::Zmm& zmm_src, int const_p_offset) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
remainsize	jit_blas_utils.h	/^static inline int remainsize(int pos, int size, int N) { return pos + N <= size ? N : size - pos; }$/;"	f	namespace:jblas::utils
remove_bf16_err	ut/jit_blas_ut.h	/^inline float remove_bf16_err(float raw) {$/;"	f	namespace:jblas::ut
remove_zeropoint_bias	kernel_avx512f.h	/^static inline JBLAS_CODE remove_zeropoint_bias(float* accptr, int ldacc, int row, int col, uint8_t* zps, float* scales,$/;"	f	namespace:jblas::kernel::avx512f
remove_zeropoint_bias	kernel_ref.h	/^static inline JBLAS_CODE remove_zeropoint_bias(float* accptr, int ldacc, int row, int col, uint8_t* zps, float* scales,$/;"	f	namespace:jblas::kernel::ref
reorderWeight	jit_blas_weight_compression.h	/^  void reorderWeight(const int N, const int K, const int8_t* B, const int ldb, int8_t* dstptr) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
reorder_ut	ut/jit_blas_weight_compression.cpp	/^  void reorder_ut(int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXBF16_NN_F4_BLOCK
reorder_ut	ut/jit_blas_weight_compression.cpp	/^  void reorder_ut(int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXBF16_NN_INT4_BLOCK
rep	xbyak/xbyak_mnemonic.h	/^void rep() { db(0xF3); }$/;"	f
repe	xbyak/xbyak_mnemonic.h	/^void repe() { db(0xF3); }$/;"	f
repne	xbyak/xbyak_mnemonic.h	/^void repne() { db(0xF2); }$/;"	f
repnz	xbyak/xbyak_mnemonic.h	/^void repnz() { db(0xF2); }$/;"	f
repz	xbyak/xbyak_mnemonic.h	/^void repz() { db(0xF3); }$/;"	f
request_perm_xtile_data	jit_blas_utils.h	/^static void request_perm_xtile_data() {$/;"	f	namespace:jblas::utils
request_perm_xtile_data	jit_blas_utils.h	/^static void request_perm_xtile_data() {}$/;"	f	namespace:jblas::utils
reset	xbyak/xbyak.h	/^	void reset()$/;"	f	class:Xbyak::CodeGenerator
reset	xbyak/xbyak.h	/^	void reset()$/;"	f	class:Xbyak::LabelManager
resetLabelPtrList	xbyak/xbyak.h	/^	void resetLabelPtrList()$/;"	f	class:Xbyak::LabelManager
resetSize	xbyak/xbyak.h	/^	void resetSize()$/;"	f	class:Xbyak::CodeArray
resize	jit_blas_prologue.h	/^  void resize(int NPad, int KPad) {$/;"	f	class:jblas::prologue::PackedWeight
resize	jit_blas_prologue.h	/^  void resize(int NPad, int KPad, int8_t* ptr) {$/;"	f	class:jblas::prologue::gemm::StorageWeight
resize	jit_blas_prologue.h	/^  void resize(int m, int k, int _kblock, int8_t* ptr) {$/;"	f	class:jblas::prologue::gemm::StorageQuantActivationKblock
resize	jit_blas_prologue.h	/^  void resize(int m, int lda, int lds, int8_t* ptr) {$/;"	f	class:jblas::prologue::gemm::StorageQuantActivation
resize	jit_blas_utils.h	/^  void resize(size_t size) {$/;"	f	class:jblas::utils::aligned_vector
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KBlks, bool _is_sym = true) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KPad) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight4Bit
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KPad) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeight8Bit
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KPad, int Block) {$/;"	f	class:jblas::prologue::weight_comp::PackedWeightKBlock
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KPad, int Block) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS4ScaleBf16
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KPad, int Block) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS4ScaleFp32
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KPad, int Block) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS8ScaleFp32
resize	jit_blas_weight_compression.h	/^  void resize(int NPad, int KPad, int K) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageWeightS8ScaleFp32PerChannelN
resize	ut/jit_blas_ut.h	/^  void resize(size_t _size) { data_.resize(_size); }$/;"	f	struct:jblas::ut::UT_vector_s8
resize	ut/jit_blas_ut.h	/^  void resize(size_t _size) { data_.resize(_size); }$/;"	f	struct:jblas::ut::UT_vector_u8
ret	xbyak/xbyak_mnemonic.h	/^void ret(int imm = 0) { if (imm) { db(0xC2); dw(imm); } else { db(0xC3); } }$/;"	f
retf	xbyak/xbyak_mnemonic.h	/^void retf(int imm = 0) { if (imm) { db(0xCA); dw(imm); } else { db(0xCB); } }$/;"	f
revert_padding_interleave	kernel_ref.h	/^static inline JBLAS_CODE revert_padding_interleave(const T_SRC* src_ptr, T_DST* dst_ptr, int row, int col, int rowpad,$/;"	f	namespace:jblas::kernel::ref
rewrite	xbyak/xbyak.h	/^	void rewrite(size_t offset, uint64_t disp, size_t size)$/;"	f	class:Xbyak::CodeArray
rex	xbyak/xbyak.h	/^	void rex(const Operand& op1, const Operand& op2 = Operand())$/;"	f	class:Xbyak::CodeGenerator
rip	xbyak/xbyak.h	/^	const RegRip rip;$/;"	m	class:Xbyak::CodeGenerator
rip	xbyak/xbyak.h	/^static const XBYAK_CONSTEXPR RegRip rip;$/;"	m	namespace:Xbyak::util
rol	xbyak/xbyak_mnemonic.h	/^void rol(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 0); }$/;"	f
rol	xbyak/xbyak_mnemonic.h	/^void rol(const Operand& op, int imm) { opShift(op, imm, 0); }$/;"	f
ror	xbyak/xbyak_mnemonic.h	/^void ror(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 1); }$/;"	f
ror	xbyak/xbyak_mnemonic.h	/^void ror(const Operand& op, int imm) { opShift(op, imm, 1); }$/;"	f
rorx	xbyak/xbyak_mnemonic.h	/^void rorx(const Reg32e& r, const Operand& op, uint8_t imm) { opGpr(r, op, Reg32e(0, r.getBit()), T_0F3A | T_F2, 0xF0, false, imm); }$/;"	f
rounding	xbyak/xbyak.h	/^	int rounding;$/;"	m	struct:Xbyak::EvexModifierRounding
roundpd	xbyak/xbyak_mnemonic.h	/^void roundpd(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x09, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
roundps	xbyak/xbyak_mnemonic.h	/^void roundps(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0x08, 0x66, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
roundsd	xbyak/xbyak_mnemonic.h	/^void roundsd(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x0B, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
roundss	xbyak/xbyak_mnemonic.h	/^void roundss(const Xmm& xmm, const Operand& op, int imm) { opGen(xmm, op, 0x0A, 0x66, isXMM_XMMorMEM, static_cast<uint8_t>(imm), 0x3A); }$/;"	f
row	kernel_jit.h	/^      int row, col;$/;"	m	struct:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F::params
row	kernel_jit.h	/^    int row, col;$/;"	m	struct:jblas::kernel::jit::JitMemcpy2DAvx512f::params
row	kernel_jit.h	/^  int row;$/;"	m	struct:decompress_block_s4_f32_codegen_param
rowidx	jit_blas_weight_compression.h	/^    const int rowidx, colidx;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
rowidx	jit_blas_wrapper.h	/^    const int rowidx, colidx;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
rowsize	jit_blas_weight_compression.h	/^    const int rowsize, colsize;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::ParallelConfig
rowsize	jit_blas_wrapper.h	/^    const int rowsize, colsize;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::ParallelConfig
rsi	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rsp	xbyak/xbyak.h	/^	const Reg64 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15;$/;"	m	class:Xbyak::CodeGenerator
rsqrtps	xbyak/xbyak_mnemonic.h	/^void rsqrtps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x52, 0x100, isXMM_XMMorMEM); }$/;"	f
rsqrtss	xbyak/xbyak_mnemonic.h	/^void rsqrtss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x52, 0xF3, isXMM_XMMorMEM); }$/;"	f
run_block	jit_blas_weight_compression.h	/^  void run_block(const ParallelConfig& _config, const Param& _param,$/;"	f	class:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight
run_block	jit_blas_wrapper.h	/^  void run_block(const ParallelConfig& _config, const Param& _param, int blk_m, int blk_n, int blk_msize, int blk_nsize,$/;"	f	class:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight
s4	kernel_jit.h	/^      void* s4;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32::params
s8	kernel_jit.h	/^      void* s8;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32::params
sUT_AMXBF16_NN_F4_BLOCK	ut/jit_blas_weight_compression.cpp	/^static UT_AMXBF16_NN_F4_BLOCK sUT_AMXBF16_NN_F4_BLOCK;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AMXBF16_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^static UT_AMXBF16_NN_INT4_BLOCK sUT_AMXBF16_NN_INT4_BLOCK;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AMXINT8_48_NN	ut/jit_blas_wrapper.cpp	/^static UT_AMXINT8_48_NN sUT_AMXINT8_48_NN;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AMXINT8_NN	ut/jit_blas_wrapper.cpp	/^static UT_AMXINT8_NN sUT_AMXINT8_NN;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AMXINT8_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^static UT_AMXINT8_NN_INT4_BLOCK sUT_AMXINT8_NN_INT4_BLOCK;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AMX_BF16_NN_PackWeight	ut/jit_blas_wrapper.cpp	/^static UT_AMX_BF16_NN_PackWeight sUT_AMX_BF16_NN_PackWeight;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AMX_INT8_NN_INT8_PerChannel	ut/jit_blas_weight_compression.cpp	/^static UT_AMX_INT8_NN_INT8_PerChannel sUT_AMX_INT8_NN_INT8_PerChannel;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AMX_INT8_NN_QKV_INT4_BLOCK	ut/jit_blas_transformer.cpp	/^static UT_AMX_INT8_NN_QKV_INT4_BLOCK sUT_AMX_INT8_NN_QKV_INT4_BLOCK;$/;"	m	namespace:jblas::wrapper::transformer	file:
sUT_AMX_INT8ss_NN_DynamicQuant	ut/jit_blas_wrapper.cpp	/^static UT_AMX_INT8ss_NN_DynamicQuant sUT_AMX_INT8ss_NN_DynamicQuant;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512F_NN	ut/jit_blas_wrapper.cpp	/^static UT_AVX512F_NN sUT_AVX512F_NN;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512F_NN_F4_BLOCK	ut/jit_blas_weight_compression.cpp	/^static UT_AVX512F_NN_F4_BLOCK sUT_AVX512F_NN_F4_BLOCK;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512F_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^static UT_AVX512F_NN_INT4_BLOCK sUT_AVX512F_NN_INT4_BLOCK;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512F_NN_INT8_BLOCK	ut/jit_blas_weight_compression.cpp	/^static UT_AVX512F_NN_INT8_BLOCK sUT_AVX512F_NN_INT8_BLOCK;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512VNNI_NN	ut/jit_blas_wrapper.cpp	/^static UT_AVX512VNNI_NN sUT_AVX512VNNI_NN;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512VNNI_NN_DynamicQuantNew	ut/jit_blas_wrapper.cpp	/^static UT_AVX512VNNI_NN_DynamicQuantNew sUT_AVX512VNNI_NN_DynamicQuantNew;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512VNNI_NN_INT4_BLOCK	ut/jit_blas_weight_compression.cpp	/^static UT_AVX512VNNI_NN_INT4_BLOCK sUT_AVX512VNNI_NN_INT4_BLOCK;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512VNNI_NN_QKV_INT4_BLOCK	ut/jit_blas_transformer.cpp	/^static UT_AVX512VNNI_NN_QKV_INT4_BLOCK sUT_AVX512VNNI_NN_QKV_INT4_BLOCK;$/;"	m	namespace:jblas::wrapper::transformer	file:
sUT_AVX512_FP16_NN	ut/jit_blas_wrapper.cpp	/^static UT_AVX512_FP16_NN sUT_AVX512_FP16_NN;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AVX512_VNNI_NN_INT8_PerChannel	ut/jit_blas_weight_compression.cpp	/^static UT_AVX512_VNNI_NN_INT8_PerChannel sUT_AVX512_VNNI_NN_INT8_PerChannel;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_AccumulatorWriteBack	ut/jit_blas_epilogue.cpp	/^static UT_AccumulatorWriteBack sUT_AccumulatorWriteBack;$/;"	m	namespace:jblas::ut	file:
sUT_ActivationBase	ut/jit_blas_prologue.cpp	/^static UT_ActivationBase sUT_ActivationBase;$/;"	m	namespace:jblas::ut	file:
sUT_ActivationConverter	ut/jit_blas_prologue.cpp	/^static UT_ActivationConverter sUT_ActivationConverter;$/;"	m	namespace:jblas::ut	file:
sUT_ActivationS8KBlockQuantize	ut/jit_blas_prologue.cpp	/^static UT_ActivationS8KBlockQuantize sUT_ActivationS8KBlockQuantize;$/;"	m	namespace:jblas::ut	file:
sUT_ActivationU8KBlockQuantize	ut/jit_blas_prologue.cpp	/^static UT_ActivationU8KBlockQuantize sUT_ActivationU8KBlockQuantize;$/;"	m	namespace:jblas::ut	file:
sUT_ActivationU8PerChannelNQuantize	ut/jit_blas_prologue.cpp	/^static UT_ActivationU8PerChannelNQuantize sUT_ActivationU8PerChannelNQuantize;$/;"	m	namespace:jblas::ut	file:
sUT_AlphaBetaProcessFp32	ut/jit_blas_epilogue.cpp	/^static UT_AlphaBetaProcessFp32 sUT_AlphaBetaProcessFp32;$/;"	m	namespace:jblas::ut	file:
sUT_BlockQunatize_INT8	ut/jit_blas_weight_compression.cpp	/^static UT_BlockQunatize_INT8 sUT_BlockQunatize_INT8;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_DeQuant	ut/kernel_jit.cpp	/^static UT_DeQuant sUT_DeQuant;$/;"	m	namespace:jblas::ut	file:
sUT_DecompressKBlockS4FP	ut/kernel_wrapper.cpp	/^static UT_DecompressKBlockS4FP sUT_DecompressKBlockS4FP;$/;"	m	namespace:jblas::ut::kernel_wrapper	file:
sUT_DecompressS4S8	ut/kernel_jit.cpp	/^static UT_DecompressS4S8 sUT_DecompressS4S8;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_16x48_AMX_INT8	ut/jit_blas_gemm.cpp	/^static UT_GEMM_16x48_AMX_INT8 sUT_GEMM_16x48_AMX_INT8;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_16x48_AMX_INT8_ss	ut/jit_blas_gemm.cpp	/^static UT_GEMM_16x48_AMX_INT8_ss sUT_GEMM_16x48_AMX_INT8_ss;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_16x64_AMX_INT8	ut/jit_blas_gemm.cpp	/^static UT_GEMM_16x64_AMX_INT8 sUT_GEMM_16x64_AMX_INT8;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_AMXINT8_48_KBLOCK	ut/jit_blas_gemm.cpp	/^static UT_GEMM_AMXINT8_48_KBLOCK sUT_GEMM_AMXINT8_48_KBLOCK;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_AMX_BF16	ut/jit_blas_gemm.cpp	/^static UT_GEMM_AMX_BF16 sUT_GEMM_AMX_BF16;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_AVX2	ut/jit_blas_gemm.cpp	/^static UT_GEMM_AVX2 sUT_GEMM_AVX2;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_AVX512F	ut/jit_blas_gemm.cpp	/^static UT_GEMM_AVX512F sUT_GEMM_AVX512F;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_VNNI	ut/jit_blas_gemm.cpp	/^static UT_GEMM_VNNI sUT_GEMM_VNNI;$/;"	m	namespace:jblas::ut	file:
sUT_GEMM_VNNI_KBLOCK	ut/jit_blas_gemm.cpp	/^static UT_GEMM_VNNI_KBLOCK sUT_GEMM_VNNI_KBLOCK;$/;"	m	namespace:jblas::ut	file:
sUT_GemmCore_Row_NN_AVX512_FP16	ut/jit_blas_gemm.cpp	/^static UT_GemmCore_Row_NN_AVX512_FP16 sUT_GemmCore_Row_NN_AVX512_FP16;$/;"	m	namespace:jblas::ut	file:
sUT_GemmParallel	ut/jit_blas_utils.cpp	/^static UT_GemmParallel sUT_GemmParallel;$/;"	m	namespace:jblas::utils::parallel	file:
sUT_GemmParallelKBlock	ut/jit_blas_utils.cpp	/^static UT_GemmParallelKBlock sUT_GemmParallelKBlock;$/;"	m	namespace:jblas::utils::parallel	file:
sUT_Memcpy2D_AVX512F	ut/kernel_jit.cpp	/^static UT_Memcpy2D_AVX512F sUT_Memcpy2D_AVX512F;$/;"	m	namespace:jblas::ut::jit::copy	file:
sUT_PaddingInterleaveMN	ut/kernel_wrapper.cpp	/^static UT_PaddingInterleaveMN sUT_PaddingInterleaveMN;$/;"	m	namespace:jblas::ut::kernel_wrapper	file:
sUT_PaddingTransInterleaveMN	ut/kernel_wrapper.cpp	/^static UT_PaddingTransInterleaveMN sUT_PaddingTransInterleaveMN;$/;"	m	namespace:jblas::ut::kernel_wrapper	file:
sUT_QKVGemmInterfacePackWeight	ut/jit_blas_transformer.cpp	/^static UT_QKVGemmInterfacePackWeight sUT_QKVGemmInterfacePackWeight;$/;"	m	namespace:jblas::wrapper::transformer	file:
sUT_RevertPaddingInterleaveMN	ut/kernel_wrapper.cpp	/^static UT_RevertPaddingInterleaveMN sUT_RevertPaddingInterleaveMN;$/;"	m	namespace:jblas::ut::kernel_wrapper	file:
sUT_RowmajorParallelKBlock	ut/jit_blas_utils.cpp	/^static UT_RowmajorParallelKBlock sUT_RowmajorParallelKBlock;$/;"	m	namespace:jblas::utils::parallel	file:
sUT_SerDes_INT4	ut/jit_blas_weight_compression.cpp	/^static UT_SerDes_INT4 sUT_SerDes_INT4;$/;"	m	namespace:jblas::wrapper::gemm	file:
sUT_TransposeBlockQuantize_F4	ut/jit_blas_weight_compression.cpp	/^static UT_TransposeBlockQuantize_F4 sUT_TransposeBlockQuantize_F4;$/;"	m	namespace:jblas::wrapper::gemm	file:
sahf	xbyak/xbyak_mnemonic.h	/^void sahf() { db(0x9E); }$/;"	f
sal	xbyak/xbyak_mnemonic.h	/^void sal(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 4); }$/;"	f
sal	xbyak/xbyak_mnemonic.h	/^void sal(const Operand& op, int imm) { opShift(op, imm, 4); }$/;"	f
sameProblem	jit_blas_utils.h	/^  inline bool sameProblem(int m, int n, int k, int numthd) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
sameProblem	jit_blas_utils.h	/^  inline bool sameProblem(int m, int n, int k, int numthd) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
sameProblem	jit_blas_utils.h	/^  inline bool sameProblem(int m, int n, int k, int numthd) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
sar	xbyak/xbyak_mnemonic.h	/^void sar(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 7); }$/;"	f
sar	xbyak/xbyak_mnemonic.h	/^void sar(const Operand& op, int imm) { opShift(op, imm, 7); }$/;"	f
sarx	xbyak/xbyak_mnemonic.h	/^void sarx(const Reg32e& r1, const Operand& op, const Reg32e& r2) { opGpr(r1, op, r2, T_F3 | T_0F38, 0xf7, false); }$/;"	f
save	xbyak/xbyak.h	/^	void save(size_t offset, size_t val, int size, inner::LabelMode mode)$/;"	f	class:Xbyak::CodeArray
saveNum_	xbyak/xbyak_util.h	/^	int saveNum_;$/;"	m	class:Xbyak::util::StackFrame
sbb	xbyak/xbyak_mnemonic.h	/^void sbb(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x18, 3); }$/;"	f
sbb	xbyak/xbyak_mnemonic.h	/^void sbb(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x18); }$/;"	f
scaleA	jit_blas_gemm.h	/^    float* scaleA;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
scaleA	jit_blas_gemm.h	/^    float* scaleA;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
scaleAcc	jit_blas_epilogue.h	/^    float scaleAcc, scaleC;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessS32U8::Param
scaleB	jit_blas_gemm.h	/^    void* scaleB;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
scaleB	jit_blas_gemm.h	/^    void* scaleB;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
scaleC	jit_blas_epilogue.h	/^    float scaleAcc, scaleC;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessS32U8::Param
scale_	xbyak/xbyak.h	/^	int scale_;$/;"	m	class:Xbyak::RegExp
scale_addr	kernel_jit.h	/^      float* scale_addr;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::decompress_block_s4_f32::params
scales	kernel_jit.h	/^      float* scales;$/;"	m	struct:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F::params
scales	ut/jit_blas_ut.h	/^  jblas::utils::aligned_vector<float> scales;$/;"	m	struct:jblas::ut::UT_vector_s8
scales	ut/jit_blas_ut.h	/^  utils::aligned_vector<float> scales;$/;"	m	struct:jblas::ut::UT_vector_u8
scalesA	jit_blas_epilogue.h	/^    float* scalesA;$/;"	m	struct:jblas::epilogue::gemm::DequantInt32ToFp32::Param
scalesA	jit_blas_epilogue.h	/^    float* scalesA;$/;"	m	struct:jblas::epilogue::gemm::ZpDequantInt32ToFp32::Param
scalesB	jit_blas_epilogue.h	/^    float* scalesB;$/;"	m	struct:jblas::epilogue::gemm::DequantInt32ToFp32::Param
scalesB	jit_blas_epilogue.h	/^    float* scalesB;$/;"	m	struct:jblas::epilogue::gemm::ZpDequantInt32ToFp32::Param
scasb	xbyak/xbyak_mnemonic.h	/^void scasb() { db(0xAE); }$/;"	f
scasd	xbyak/xbyak_mnemonic.h	/^void scasd() { db(0xAF); }$/;"	f
scasq	xbyak/xbyak_mnemonic.h	/^void scasq() { db(0x48); db(0xAF); }$/;"	f
scasw	xbyak/xbyak_mnemonic.h	/^void scasw() { db(0x66); db(0xAF); }$/;"	f
senduipi	xbyak/xbyak_mnemonic.h	/^void senduipi(const Reg64& r) { db(0xF3); opModR(Reg32(6), r.cvt32(), 0x0F, 0xC7); }$/;"	f
serialize	jit_blas_utils.h	/^void serialize(int8_t*& buf, _T _val) {$/;"	f	namespace:jblas::utils
serialize	xbyak/xbyak_mnemonic.h	/^void serialize() { db(0x0F); db(0x01); db(0xE8); }$/;"	f
serializeToBuffer	jit_blas_prologue.h	/^  virtual void serializeToBuffer(void* buf) {$/;"	f	class:jblas::prologue::PackedWeight
set	xbyak/xbyak.h	/^	void set(CodeArray *base) { base_ = base; }$/;"	f	class:Xbyak::LabelManager
set	xbyak/xbyak_util.h	/^	void set(const char *funcName, const void *endAddr)$/;"	f	class:Xbyak::util::Profiler
set	xbyak/xbyak_util.h	/^	void set(const char *funcName, const void *startAddr, size_t funcSize) const$/;"	f	class:Xbyak::util::Profiler
setBit	xbyak/xbyak.h	/^inline void Operand::setBit(int bit)$/;"	f	class:Xbyak::Operand
setCacheHierarchy	xbyak/xbyak_util.h	/^	void setCacheHierarchy()$/;"	f	class:Xbyak::util::Cpu
setDefaultEncoding	xbyak/xbyak.h	/^	void setDefaultEncoding(PreferredEncoding encoding) { defaultEncoding_ = encoding; }$/;"	f	class:Xbyak::CodeGenerator
setDefaultJmpNEAR	xbyak/xbyak.h	/^	void setDefaultJmpNEAR(bool isNear) { isDefaultJmpNEAR_ = isNear; }$/;"	f	class:Xbyak::CodeGenerator
setFamily	xbyak/xbyak_util.h	/^	void setFamily()$/;"	f	class:Xbyak::util::Cpu
setIdx	xbyak/xbyak.h	/^	void setIdx(int idx) { idx_ = idx; }$/;"	f	class:Xbyak::Operand
setKind	xbyak/xbyak.h	/^	void setKind(Kind kind)$/;"	f	class:Xbyak::Operand
setModRM	xbyak/xbyak.h	/^	void setModRM(int mod, int r1, int r2)$/;"	f	class:Xbyak::CodeGenerator
setNameSuffix	xbyak/xbyak_util.h	/^	void setNameSuffix(const char *suffix)$/;"	f	class:Xbyak::util::Profiler
setNumCores	xbyak/xbyak_util.h	/^	void setNumCores()$/;"	f	class:Xbyak::util::Cpu
setOpmaskIdx	xbyak/xbyak.h	/^	void setOpmaskIdx(int idx, bool \/*ignore_idx0*\/ = true)$/;"	f	class:Xbyak::Operand
setProtectMode	xbyak/xbyak.h	/^	bool setProtectMode(ProtectMode mode, bool throwException = true)$/;"	f	class:Xbyak::CodeArray
setProtectModeRE	xbyak/xbyak.h	/^	bool setProtectModeRE(bool throwException = true) { return setProtectMode(PROTECT_RE, throwException); }$/;"	f	class:Xbyak::CodeArray
setProtectModeRW	xbyak/xbyak.h	/^	bool setProtectModeRW(bool throwException = true) { return setProtectMode(PROTECT_RW, throwException); }$/;"	f	class:Xbyak::CodeArray
setPtr	jit_blas_prologue.h	/^  void setPtr(int m, int _lda, int _lds, int8_t* ptr) {$/;"	f	class:jblas::prologue::gemm::StorageQuantActivation
setPtr	jit_blas_prologue.h	/^  void setPtr(int m, int k, int _kblock, int8_t* ptr) {$/;"	f	class:jblas::prologue::gemm::StorageQuantActivationKblock
setRounding	xbyak/xbyak.h	/^	void setRounding(int idx)$/;"	f	class:Xbyak::Operand
setSIB	xbyak/xbyak.h	/^	void setSIB(const RegExp& e, int reg, int disp8N = 0)$/;"	f	class:Xbyak::CodeGenerator
setSize	xbyak/xbyak.h	/^	void setSize(size_t size)$/;"	f	class:Xbyak::CodeArray
setStartAddr	xbyak/xbyak_util.h	/^	void setStartAddr(const void *startAddr)$/;"	f	class:Xbyak::util::Profiler
setThreads	jit_blas_utils.h	/^  inline void setThreads(int _nth) {$/;"	f	class:jblas::utils::parallel::CpuDevice
setZero	xbyak/xbyak.h	/^	void setZero() { zero_ = true; }$/;"	f	class:Xbyak::Operand
set_envvar	ut/jit_blas.cpp	/^static void set_envvar() {}$/;"	f	file:
set_num_threads	ut/jit_blas_ut.cpp	/^void set_num_threads(int num) {$/;"	f
seta	xbyak/xbyak_mnemonic.h	/^void seta(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 7); }\/\/-V524$/;"	f
setae	xbyak/xbyak_mnemonic.h	/^void setae(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 3); }\/\/-V524$/;"	f
setb	xbyak/xbyak_mnemonic.h	/^void setb(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 2); }\/\/-V524$/;"	f
setbe	xbyak/xbyak_mnemonic.h	/^void setbe(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 6); }\/\/-V524$/;"	f
setc	xbyak/xbyak_mnemonic.h	/^void setc(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 2); }\/\/-V524$/;"	f
sete	xbyak/xbyak_mnemonic.h	/^void sete(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 4); }\/\/-V524$/;"	f
setg	xbyak/xbyak_mnemonic.h	/^void setg(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 15); }\/\/-V524$/;"	f
setge	xbyak/xbyak_mnemonic.h	/^void setge(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 13); }\/\/-V524$/;"	f
setl	xbyak/xbyak_mnemonic.h	/^void setl(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 12); }\/\/-V524$/;"	f
setle	xbyak/xbyak_mnemonic.h	/^void setle(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 14); }\/\/-V524$/;"	f
setna	xbyak/xbyak_mnemonic.h	/^void setna(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 6); }\/\/-V524$/;"	f
setnae	xbyak/xbyak_mnemonic.h	/^void setnae(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 2); }\/\/-V524$/;"	f
setnb	xbyak/xbyak_mnemonic.h	/^void setnb(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 3); }\/\/-V524$/;"	f
setnbe	xbyak/xbyak_mnemonic.h	/^void setnbe(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 7); }\/\/-V524$/;"	f
setnc	xbyak/xbyak_mnemonic.h	/^void setnc(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 3); }\/\/-V524$/;"	f
setne	xbyak/xbyak_mnemonic.h	/^void setne(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 5); }\/\/-V524$/;"	f
setng	xbyak/xbyak_mnemonic.h	/^void setng(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 14); }\/\/-V524$/;"	f
setnge	xbyak/xbyak_mnemonic.h	/^void setnge(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 12); }\/\/-V524$/;"	f
setnl	xbyak/xbyak_mnemonic.h	/^void setnl(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 13); }\/\/-V524$/;"	f
setnle	xbyak/xbyak_mnemonic.h	/^void setnle(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 15); }\/\/-V524$/;"	f
setno	xbyak/xbyak_mnemonic.h	/^void setno(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 1); }\/\/-V524$/;"	f
setnp	xbyak/xbyak_mnemonic.h	/^void setnp(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 11); }\/\/-V524$/;"	f
setns	xbyak/xbyak_mnemonic.h	/^void setns(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 9); }\/\/-V524$/;"	f
setnz	xbyak/xbyak_mnemonic.h	/^void setnz(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 5); }\/\/-V524$/;"	f
seto	xbyak/xbyak_mnemonic.h	/^void seto(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 0); }\/\/-V524$/;"	f
setp	xbyak/xbyak_mnemonic.h	/^void setp(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 10); }\/\/-V524$/;"	f
setpe	xbyak/xbyak_mnemonic.h	/^void setpe(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 10); }\/\/-V524$/;"	f
setpo	xbyak/xbyak_mnemonic.h	/^void setpo(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 11); }\/\/-V524$/;"	f
sets	xbyak/xbyak_mnemonic.h	/^void sets(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 8); }\/\/-V524$/;"	f
setz	xbyak/xbyak_mnemonic.h	/^void setz(const Operand& op) { opR_ModM(op, 8, 0, 0x0F, 0x90 | 4); }\/\/-V524$/;"	f
sfence	xbyak/xbyak_mnemonic.h	/^void sfence() { db(0x0F); db(0xAE); db(0xF8); }$/;"	f
sha1msg1	xbyak/xbyak_mnemonic.h	/^void sha1msg1(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xC9, NONE, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
sha1msg2	xbyak/xbyak_mnemonic.h	/^void sha1msg2(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xCA, NONE, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
sha1nexte	xbyak/xbyak_mnemonic.h	/^void sha1nexte(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xC8, NONE, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
sha1rnds4	xbyak/xbyak_mnemonic.h	/^void sha1rnds4(const Xmm& xmm, const Operand& op, uint8_t imm) { opGen(xmm, op, 0xCC, NONE, isXMM_XMMorMEM, imm, 0x3A); }$/;"	f
sha256msg1	xbyak/xbyak_mnemonic.h	/^void sha256msg1(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xCC, NONE, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
sha256msg2	xbyak/xbyak_mnemonic.h	/^void sha256msg2(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xCD, NONE, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
sha256rnds2	xbyak/xbyak_mnemonic.h	/^void sha256rnds2(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0xCB, NONE, isXMM_XMMorMEM, NONE, 0x38); }$/;"	f
shl	xbyak/xbyak_mnemonic.h	/^void shl(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 4); }$/;"	f
shl	xbyak/xbyak_mnemonic.h	/^void shl(const Operand& op, int imm) { opShift(op, imm, 4); }$/;"	f
shld	xbyak/xbyak_mnemonic.h	/^void shld(const Operand& op, const Reg& reg, const Reg8& _cl) { opShxd(op, reg, 0, 0xA4, &_cl); }$/;"	f
shld	xbyak/xbyak_mnemonic.h	/^void shld(const Operand& op, const Reg& reg, uint8_t imm) { opShxd(op, reg, imm, 0xA4); }$/;"	f
shlx	xbyak/xbyak_mnemonic.h	/^void shlx(const Reg32e& r1, const Operand& op, const Reg32e& r2) { opGpr(r1, op, r2, T_66 | T_0F38, 0xf7, false); }$/;"	f
shr	xbyak/xbyak_mnemonic.h	/^void shr(const Operand& op, const Reg8& _cl) { opShift(op, _cl, 5); }$/;"	f
shr	xbyak/xbyak_mnemonic.h	/^void shr(const Operand& op, int imm) { opShift(op, imm, 5); }$/;"	f
shrd	xbyak/xbyak_mnemonic.h	/^void shrd(const Operand& op, const Reg& reg, const Reg8& _cl) { opShxd(op, reg, 0, 0xAC, &_cl); }$/;"	f
shrd	xbyak/xbyak_mnemonic.h	/^void shrd(const Operand& op, const Reg& reg, uint8_t imm) { opShxd(op, reg, imm, 0xAC); }$/;"	f
shrx	xbyak/xbyak_mnemonic.h	/^void shrx(const Reg32e& r1, const Operand& op, const Reg32e& r2) { opGpr(r1, op, r2, T_F2 | T_0F38, 0xf7, false); }$/;"	f
shufpd	xbyak/xbyak_mnemonic.h	/^void shufpd(const Xmm& xmm, const Operand& op, uint8_t imm8) { opGen(xmm, op, 0xC6, 0x66, isXMM_XMMorMEM, imm8); }$/;"	f
shufps	xbyak/xbyak_mnemonic.h	/^void shufps(const Xmm& xmm, const Operand& op, uint8_t imm8) { opGen(xmm, op, 0xC6, 0x100, isXMM_XMMorMEM, imm8); }$/;"	f
si	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
sign_mask	kernel_jit_injector.h	/^    sign_mask,                            \/\/ gets sign value$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
sil	xbyak/xbyak.h	/^	const Reg8 spl, bpl, sil, dil;$/;"	m	class:Xbyak::CodeGenerator
sint64	xbyak/xbyak.h	/^typedef int64_t sint64;$/;"	t	namespace:Xbyak
six	kernel_jit_injector.h	/^    six,                                  \/\/ 6.f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
size	jit_blas_utils.h	/^  size_t size() { return mRawsize; }$/;"	f	class:jblas::utils::aligned_vector
size	jit_blas_weight_compression.h	/^  inline size_t size() { return mScales.size() + mZeroPoints.size(); }$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::StorageSimpleCorrection
size	kernel_jit.h	/^    size_t size;$/;"	m	struct:jblas::kernel::jit::DecompressS4S8_AVX512F::params
size	ut/jit_blas_ut.h	/^  size_t size() { return data_.size(); }$/;"	f	struct:jblas::ut::UT_vector_s8
size	ut/jit_blas_ut.h	/^  size_t size() { return data_.size(); }$/;"	f	struct:jblas::ut::UT_vector_u8
size	xbyak/xbyak.h	/^		size_t size;$/;"	m	struct:Xbyak::MmapAllocator::Allocation
size	xbyak/xbyak_util.h	/^	size_t size() const { return n_; }$/;"	f	class:Xbyak::util::Pack
size_	xbyak/xbyak.h	/^	size_t size_;$/;"	m	class:Xbyak::CodeArray
sp	xbyak/xbyak.h	/^	const Reg16 ax, cx, dx, bx, sp, bp, si, di;$/;"	m	class:Xbyak::CodeGenerator
spl	xbyak/xbyak.h	/^	const Reg8 spl, bpl, sil, dil;$/;"	m	class:Xbyak::CodeGenerator
sqrtpd	xbyak/xbyak_mnemonic.h	/^void sqrtpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x51, 0x66, isXMM_XMMorMEM); }$/;"	f
sqrtps	xbyak/xbyak_mnemonic.h	/^void sqrtps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x51, 0x100, isXMM_XMMorMEM); }$/;"	f
sqrtsd	xbyak/xbyak_mnemonic.h	/^void sqrtsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x51, 0xF2, isXMM_XMMorMEM); }$/;"	f
sqrtss	xbyak/xbyak_mnemonic.h	/^void sqrtss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x51, 0xF3, isXMM_XMMorMEM); }$/;"	f
src_addr	kernel_jit.h	/^    Xbyak::RegExp src_addr;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
srcptr	kernel_jit.h	/^      void *srcptr, *dstptr;$/;"	m	struct:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F::params
srcptr	kernel_jit.h	/^    void *srcptr, *dstptr, *elt_const_v;$/;"	m	struct:jblas::kernel::jit::JitMemcpy2DAvx512f::params
srcptr	kernel_jit.h	/^    void *srcptr, *dstptr;$/;"	m	struct:jblas::kernel::jit::DecompressS4S8_AVX512F::params
srcstride	kernel_jit.h	/^      int srcstride, dststride;$/;"	m	struct:jblas::kernel::jit::DequanS8F32::MicroKernelAVX512F::params
srcstride	kernel_jit.h	/^    int srcstride, dststride;$/;"	m	struct:jblas::kernel::jit::JitMemcpy2DAvx512f::params
ss	xbyak/xbyak.h	/^		es, cs, ss, ds, fs, gs$/;"	e	enum:Xbyak::Segment::__anon6
ss	xbyak/xbyak.h	/^	const Segment es, cs, ss, ds, fs, gs;$/;"	m	class:Xbyak::CodeGenerator
st0	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
st1	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
st2	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
st3	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
st4	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
st5	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
st6	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
st7	xbyak/xbyak.h	/^	const Fpu st0, st1, st2, st3, st4, st5, st6, st7;$/;"	m	class:Xbyak::CodeGenerator
stac	xbyak/xbyak_mnemonic.h	/^void stac() { db(0x0F); db(0x01); db(0xCB); }$/;"	f
start	jit_blas_utils.h	/^  void start() { startT = sclock_t::now(); }$/;"	f	class:jblas::utils::timer
start	jit_blas_utils.h	/^  void start() {$/;"	f	class:jblas::utils::timer_statistics_logger
startAddr_	xbyak/xbyak_util.h	/^	const void *startAddr_;$/;"	m	class:Xbyak::util::Profiler
startT	jit_blas_utils.h	/^  stime_point_t startT;$/;"	m	class:jblas::utils::timer
stateList_	xbyak/xbyak.h	/^	StateList stateList_;$/;"	m	class:Xbyak::LabelManager
statis	jit_blas_utils.h	/^  minmax_statistics<float> statis;$/;"	m	class:jblas::utils::timer_statistics_logger
stc	xbyak/xbyak_mnemonic.h	/^void stc() { db(0xF9); }$/;"	f
std	xbyak/xbyak_mnemonic.h	/^void std() { db(0xFD); }$/;"	f
stepping	xbyak/xbyak_util.h	/^	int stepping;$/;"	m	class:Xbyak::util::Cpu
sti	xbyak/xbyak_mnemonic.h	/^void sti() { db(0xFB); }$/;"	f
stmxcsr	xbyak/xbyak_mnemonic.h	/^void stmxcsr(const Address& addr) { opModM(addr, Reg32(3), 0x0F, 0xAE); }$/;"	f
stop	jit_blas_utils.h	/^  bool stop() {$/;"	f	class:jblas::utils::timer_statistics_logger
stop	jit_blas_utils.h	/^  float stop() { return static_cast<float>(std::chrono::duration_cast<_DUR>(sclock_t::now() - startT).count()); }$/;"	f	class:jblas::utils::timer
store_fp32_bf16	jit_base.hpp	/^  void store_fp32_bf16(const Xbyak::Zmm& _fp32, const Xbyak::Address& _add) {$/;"	f	class:jblas::xbyak::JitAvx512f
store_mask	kernel_jit.h	/^    Xbyak::Opmask store_mask;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
stosb	xbyak/xbyak_mnemonic.h	/^void stosb() { db(0xAA); }$/;"	f
stosd	xbyak/xbyak_mnemonic.h	/^void stosd() { db(0xAB); }$/;"	f
stosq	xbyak/xbyak_mnemonic.h	/^void stosq() { db(0x48); db(0xAB); }$/;"	f
stosw	xbyak/xbyak_mnemonic.h	/^void stosw() { db(0x66); db(0xAB); }$/;"	f
str	jit_blas_utils.h	/^  char str[256];$/;"	m	class:jblas::utils::timer_statistics_logger
sttilecfg	xbyak/xbyak_mnemonic.h	/^void sttilecfg(const Address& addr) { opVex(tmm0, &tmm0, addr, T_66 | T_0F38 | T_W0, 0x49); }$/;"	f
stui	xbyak/xbyak_mnemonic.h	/^void stui() { db(0xF3); db(0x0F); db(0x01); db(0xEF); }$/;"	f
sub	xbyak/xbyak_mnemonic.h	/^void sub(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x28, 5); }$/;"	f
sub	xbyak/xbyak_mnemonic.h	/^void sub(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x28); }$/;"	f
sub	xbyak/xbyak_util.h	/^	Pack sub(size_t pos, size_t num = size_t(-1)) const$/;"	f	class:Xbyak::util::Pack
subpd	xbyak/xbyak_mnemonic.h	/^void subpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5C, 0x66, isXMM_XMMorMEM); }$/;"	f
subps	xbyak/xbyak_mnemonic.h	/^void subps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5C, 0x100, isXMM_XMMorMEM); }$/;"	f
subsd	xbyak/xbyak_mnemonic.h	/^void subsd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5C, 0xF2, isXMM_XMMorMEM); }$/;"	f
subss	xbyak/xbyak_mnemonic.h	/^void subss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x5C, 0xF3, isXMM_XMMorMEM); }$/;"	f
suffix_	xbyak/xbyak_util.h	/^	const char *suffix_;$/;"	m	class:Xbyak::util::Profiler
swish_compute_vector_fwd	kernel_jit_injector.h	/^  void swish_compute_vector_fwd(const Xbyak::Zmm& zmm_src, int const_p_offset) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
syscall	xbyak/xbyak_mnemonic.h	/^void syscall() { db(0x0F); db(0x05); }$/;"	f
sysenter	xbyak/xbyak_mnemonic.h	/^void sysenter() { db(0x0F); db(0x34); }$/;"	f
sysexit	xbyak/xbyak_mnemonic.h	/^void sysexit() { db(0x0F); db(0x35); }$/;"	f
sysret	xbyak/xbyak_mnemonic.h	/^void sysret() { db(0x0F); db(0x07); }$/;"	f
t	xbyak/xbyak_util.h	/^	const Pack& t;$/;"	m	class:Xbyak::util::StackFrame
tNum_	xbyak/xbyak_util.h	/^	int tNum_;$/;"	m	class:Xbyak::util::StackFrame
tTbl_	xbyak/xbyak_util.h	/^	Xbyak::Reg64 tTbl_[maxRegNum];$/;"	m	class:Xbyak::util::StackFrame
t_	xbyak/xbyak_util.h	/^	Pack t_;$/;"	m	class:Xbyak::util::StackFrame
table_entry_t	kernel_jit_injector.h	/^  struct table_entry_t {$/;"	s	class:jblas::kernel::jit_injector::eltwise_injector
table_off	kernel_jit_injector.h	/^  size_t table_off(key_t key, size_t key_off_val_shift = 0) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
table_val	kernel_jit_injector.h	/^  Xbyak::Address table_val(key_t key, size_t key_off_val_shift = 0) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
tanh_compute_vector_fwd	kernel_jit_injector.h	/^  void tanh_compute_vector_fwd(const Xbyak::Zmm& zmm_src) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
tanh_idx_bias	kernel_jit_injector.h	/^    tanh_idx_bias,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
tanh_idx_mask	kernel_jit_injector.h	/^    tanh_idx_mask,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
tanh_linear_ubound	kernel_jit_injector.h	/^    tanh_linear_ubound,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
tanh_pol_table	kernel_jit_injector.h	/^    tanh_pol_table,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
tanh_saturation_lbound	kernel_jit_injector.h	/^    tanh_saturation_lbound,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
tbl_	xbyak/xbyak_util.h	/^	Xbyak::Reg64 tbl_[maxTblNum];$/;"	m	class:Xbyak::util::Pack
tdpbf16ps	xbyak/xbyak_mnemonic.h	/^void tdpbf16ps(const Tmm& x1, const Tmm& x2, const Tmm& x3) { opVex(x1, &x3, x2, T_F3 | T_0F38 | T_W0, 0x5c); }$/;"	f
tdpbssd	xbyak/xbyak_mnemonic.h	/^void tdpbssd(const Tmm& x1, const Tmm& x2, const Tmm& x3) { opVex(x1, &x3, x2, T_F2 | T_0F38 | T_W0, 0x5e); }$/;"	f
tdpbsud	xbyak/xbyak_mnemonic.h	/^void tdpbsud(const Tmm& x1, const Tmm& x2, const Tmm& x3) { opVex(x1, &x3, x2, T_F3 | T_0F38 | T_W0, 0x5e); }$/;"	f
tdpbusd	xbyak/xbyak_mnemonic.h	/^void tdpbusd(const Tmm& x1, const Tmm& x2, const Tmm& x3) { opVex(x1, &x3, x2, T_66 | T_0F38 | T_W0, 0x5e); }$/;"	f
tdpbuud	xbyak/xbyak_mnemonic.h	/^void tdpbuud(const Tmm& x1, const Tmm& x2, const Tmm& x3) { opVex(x1, &x3, x2, T_0F38 | T_W0, 0x5e); }$/;"	f
tdpfp16ps	xbyak/xbyak_mnemonic.h	/^void tdpfp16ps(const Tmm &x1, const Tmm &x2, const Tmm &x3) { opVex(x1, &x3, x2, T_F2 | T_0F38 | T_W0, 0x5c); }$/;"	f
test	xbyak/xbyak.h	/^	void test(const Operand& op, const Reg& reg)$/;"	f	class:Xbyak::CodeGenerator
test	xbyak/xbyak.h	/^	void test(const Operand& op, uint32_t imm)$/;"	f	class:Xbyak::CodeGenerator
testui	xbyak/xbyak_mnemonic.h	/^void testui() { db(0xF3); db(0x0F); db(0x01); db(0xED); }$/;"	f
three	kernel_jit_injector.h	/^    three,                                \/\/ 3.f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
tileloadd	xbyak/xbyak_mnemonic.h	/^void tileloadd(const Tmm& tm, const Address& addr) { opAMX(tm, addr, T_F2 | T_0F38 | T_W0, 0x4b); }$/;"	f
tileloaddt1	xbyak/xbyak_mnemonic.h	/^void tileloaddt1(const Tmm& tm, const Address& addr) { opAMX(tm, addr, T_66 | T_0F38 | T_W0, 0x4b); }$/;"	f
tilerelease	xbyak/xbyak_mnemonic.h	/^void tilerelease() { db(0xc4); db(0xe2); db(0x78); db(0x49); db(0xc0); }$/;"	f
tilestored	xbyak/xbyak_mnemonic.h	/^void tilestored(const Address& addr, const Tmm& tm) { opVex(tm, &tmm0, addr, T_F3 | T_0F38 | T_W0, 0x4b); }$/;"	f
tilezero	xbyak/xbyak_mnemonic.h	/^void tilezero(const Tmm& Tmm) { opVex(Tmm, &tmm0, tmm0, T_F2 | T_0F38 | T_W0, 0x49); }$/;"	f
timer	jit_blas_utils.h	/^  timer() { clear(); }$/;"	f	class:jblas::utils::timer
timer	jit_blas_utils.h	/^class timer {$/;"	c	namespace:jblas::utils
timer_statistics_logger	jit_blas_utils.h	/^  timer_statistics_logger() {$/;"	f	class:jblas::utils::timer_statistics_logger
timer_statistics_logger	jit_blas_utils.h	/^class timer_statistics_logger {$/;"	c	namespace:jblas::utils
tm	jit_blas_utils.h	/^  timer<_PRECISION> tm;$/;"	m	class:jblas::utils::timer_statistics_logger
tmm0	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
tmm1	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
tmm2	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
tmm3	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
tmm4	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
tmm5	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
tmm6	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
tmm7	xbyak/xbyak.h	/^	const Tmm tmm0, tmm1, tmm2, tmm3, tmm4, tmm5, tmm6, tmm7;$/;"	m	class:Xbyak::CodeGenerator
toStr	xbyak/xbyak.h	/^	static inline std::string toStr(int num)$/;"	f	class:Xbyak::Label
toString	xbyak/xbyak.h	/^	const char *toString() const$/;"	f	class:Xbyak::Operand
toString	xbyak/xbyak.h	/^	const char *toString() const$/;"	f	class:Xbyak::Segment
tofloat	jit_blas_utils.h	/^  float tofloat() const { return static_cast<float>(bit_cast<__bf16>(this->x)); }$/;"	f	struct:jblas::utils::bf16
tofloat	jit_blas_utils.h	/^  float tofloat() const {$/;"	f	struct:jblas::utils::bf16
top_	xbyak/xbyak.h	/^	uint8_t *top_;$/;"	m	class:Xbyak::CodeArray
tpause	xbyak/xbyak_mnemonic.h	/^void tpause(const Reg32& r) { int idx = r.getIdx(); if (idx > 7) XBYAK_THROW(ERR_BAD_PARAMETER) db(0x66); db(0x0F); db(0xAE); setModRM(3, 6, idx); }$/;"	f
tr_x16_dword	kernel_avx512f.h	/^static inline void tr_x16_dword(std::array<__m512i, 16>& dst) {  \/\/ NOLINT [runtime\/references]$/;"	f	namespace:jblas::kernel::avx512f
transformer	jit_blas_transformer.h	/^namespace transformer {$/;"	n	namespace:jblas::wrapper
transformer	ut/jit_blas_transformer.cpp	/^namespace transformer {$/;"	n	namespace:jblas::wrapper	file:
transformer_default	jit_blas_transformer.h	/^namespace transformer_default {$/;"	n	namespace:jblas::wrapper
transpose16x16_4B	jit_base.hpp	/^  void transpose16x16_4B(Xbyak::Zmm* src, Xbyak::Zmm* tmp, const int N = 16) {$/;"	f	class:jblas::xbyak::JitAvx512f
transpose2d	kernel_ref.h	/^static inline JBLAS_CODE transpose2d(const _T* srcptr, _T* dstptr, int row, int col, int ld_src, int ld_dst) {$/;"	f	namespace:jblas::kernel::ref
transposeWeight	jit_blas_prologue.h	/^  static void transposeWeight(const int Row, const int Col, const T* src, const int ld_src, T* dst, const int ld_dst) {$/;"	f	class:jblas::prologue::gemm::WeightBase
two	kernel_jit_injector.h	/^    two,                                  \/\/ 2.f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
type_	xbyak/xbyak.h	/^	const Type type_;$/;"	m	class:Xbyak::CodeArray
type_	xbyak/xbyak_util.h	/^	Type type_;$/;"	m	class:Xbyak::util::Cpu
tzcnt	xbyak/xbyak_mnemonic.h	/^void tzcnt(const Reg&reg, const Operand& op) { opSp1(reg, op, 0xF3, 0x0F, 0xBC); }$/;"	f
u	jit_blas_utils.h	/^    unsigned int u;$/;"	m	union:jblas::utils::bf16::bf16f32
ucomisd	xbyak/xbyak_mnemonic.h	/^void ucomisd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x2E, 0x66, isXMM_XMMorMEM); }$/;"	f
ucomiss	xbyak/xbyak_mnemonic.h	/^void ucomiss(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x2E, 0x100, isXMM_XMMorMEM); }$/;"	f
ud2	xbyak/xbyak_mnemonic.h	/^void ud2() { db(0x0F); db(0x0B); }$/;"	f
uint16	xbyak/xbyak.h	/^typedef uint16_t uint16;$/;"	t	namespace:Xbyak
uint32	xbyak/xbyak.h	/^typedef uint32_t uint32;$/;"	t	namespace:Xbyak
uint64	xbyak/xbyak.h	/^typedef uint64_t uint64;$/;"	t	namespace:Xbyak
uint8	xbyak/xbyak.h	/^typedef uint8_t uint8;$/;"	t	namespace:Xbyak
uiret	xbyak/xbyak_mnemonic.h	/^void uiret() { db(0xF3); db(0x0F); db(0x01); db(0xEC); }$/;"	f
umonitor	xbyak/xbyak_mnemonic.h	/^void umonitor(const Reg& r) { int idx = r.getIdx(); if (idx > 7) XBYAK_THROW(ERR_BAD_PARAMETER) int bit = r.getBit(); if (BIT != bit) { if ((BIT == 32 && bit == 16) || (BIT == 64 && bit == 32)) { db(0x67); } else { XBYAK_THROW(ERR_BAD_SIZE_OF_REGISTER) } } db(0xF3); db(0x0F); db(0xAE); setModRM(3, 6, idx); }$/;"	f
umwait	xbyak/xbyak_mnemonic.h	/^void umwait(const Reg32& r) { int idx = r.getIdx(); if (idx > 7) XBYAK_THROW(ERR_BAD_PARAMETER) db(0xF2); db(0x0F); db(0xAE); setModRM(3, 6, idx); }$/;"	f
undefList	xbyak/xbyak.h	/^		SlabelUndefList undefList;$/;"	m	struct:Xbyak::LabelManager::SlabelState
undef_key	kernel_jit_injector.h	/^    undef_key,$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
unpackTransposeWeight	jit_blas_weight_compression.h	/^  virtual void unpackTransposeWeight(const int N, const int K, PackedWeight* stor, float* B, const int ldb) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
unpackWeight	jit_blas_weight_compression.h	/^  virtual void unpackWeight(const int N, const int K, PackedWeight* stor, float* B, const int ldb) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
unpackWeight	jit_blas_weight_compression.h	/^  virtual void unpackWeight(const int N, const int K, PackedWeight* stor, int8_t* B, const int ldb) {$/;"	f	class:jblas::prologue::weight_comp::gemm_kblcok::WeightS8ScaleFp32
unpack_4bit	kernel_jit.h	/^static inline Xbyak::Zmm unpack_4bit(Xbyak::CodeGenerator* jit, Xbyak::Ymm v4bits, Xbyak::Zmm zmm, Xbyak::Zmm zmm1,$/;"	f	namespace:jblas::kernel::jit
unpack_4bit_2regs	kernel_jit.h	/^static inline Xbyak::Zmm unpack_4bit_2regs(Xbyak::CodeGenerator* jit, Xbyak::Ymm v4bits, Xbyak::Zmm tmp,$/;"	f	namespace:jblas::kernel::jit
unpack_4bits	kernel_avx512f.h	/^static inline __m512i unpack_4bits(__m256i v4bits, __m512i vmask) {$/;"	f	namespace:jblas::kernel::avx512f
unpack_4bits_avx2	kernel_avx2.h	/^static inline __m256i unpack_4bits_avx2(__m128i v4bits, __m256i vmask) {$/;"	f	namespace:jblas::kernel::avx2
unpack_mask	kernel_jit.h	/^    Xbyak::Opmask unpack_mask;$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
unpckhpd	xbyak/xbyak_mnemonic.h	/^void unpckhpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x15, 0x66, isXMM_XMMorMEM); }$/;"	f
unpckhps	xbyak/xbyak_mnemonic.h	/^void unpckhps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x15, 0x100, isXMM_XMMorMEM); }$/;"	f
unpcklpd	xbyak/xbyak_mnemonic.h	/^void unpcklpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x14, 0x66, isXMM_XMMorMEM); }$/;"	f
unpcklps	xbyak/xbyak_mnemonic.h	/^void unpcklps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x14, 0x100, isXMM_XMMorMEM); }$/;"	f
update	jit_blas_utils.h	/^  bool update(int M, int N, int K, int KBlock, int threads) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
update	jit_blas_utils.h	/^  bool update(int M, int N, int K, int KBlock, int threads) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
update	jit_blas_utils.h	/^  bool update(int M, int N, int K, int threads) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
update	jit_blas_utils.h	/^  void update(int row, int col, int minrow, int mincol, int colblock, int ncores) {$/;"	f	struct:jblas::utils::parallel::Parallel2DRowMajorColBlock
update	jit_blas_utils.h	/^  void update(int row, int col, int minrow, int mincol, int ncores) {$/;"	f	struct:jblas::utils::parallel::Parallel2DRowMajor
update_cache_blocking	jit_blas_utils.h	/^  void update_cache_blocking() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
update_cache_blocking	jit_blas_utils.h	/^  void update_cache_blocking(int kblock) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
update_cache_blocking	jit_blas_utils.h	/^  void update_cache_blocking(int kblock) {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
update_env_var	ut/jit_blas_ut.cpp	/^void update_env_var() {$/;"	f
update_kstep	jit_blas_utils.h	/^  void update_kstep() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemm
update_kstep	jit_blas_utils.h	/^  void update_kstep() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlock
update_kstep	jit_blas_utils.h	/^  void update_kstep() {$/;"	f	struct:jblas::utils::parallel::Parallel2DGemmKBlockFixed
updiv	jit_blas_utils.h	/^static inline int updiv(int a, int b) { return (a + b - 1) \/ b; }$/;"	f	namespace:jblas::utils
updiv	jit_blas_utils.h	/^static inline size_t updiv(size_t a, int b) { return (a + b - 1) \/ b; }$/;"	f	namespace:jblas::utils
useProtect	xbyak/xbyak.h	/^	bool useProtect() const { return alloc_->useProtect(); }$/;"	f	class:Xbyak::CodeArray
useProtect	xbyak/xbyak.h	/^	virtual bool useProtect() const { return true; }$/;"	f	struct:Xbyak::Allocator
useRcx_	xbyak/xbyak_util.h	/^	bool useRcx_;$/;"	m	class:Xbyak::util::StackFrame
useRdx_	xbyak/xbyak_util.h	/^	bool useRdx_;$/;"	m	class:Xbyak::util::StackFrame
used_zmm_idx	kernel_jit.h	/^  std::set<int> used_zmm_idx;$/;"	m	class:jblas::kernel::jit::JitMemcpy2DAvx512f
ut	ut/jit_blas_epilogue.cpp	/^  void ut(int _N, int _M, int _srcstep, int _src1step, int _dststep, float alpha, float beta) {$/;"	f	class:jblas::ut::UT_AlphaBetaProcessFp32
ut	ut/jit_blas_epilogue.cpp	/^namespace ut {$/;"	n	namespace:jblas	file:
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_16x48_AMX_INT8
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_16x48_AMX_INT8_ss
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_16x64_AMX_INT8
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_AMX_BF16
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_AVX2
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_AVX512F
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_VNNI
ut	ut/jit_blas_gemm.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GemmCore_Row_NN_AVX512_FP16
ut	ut/jit_blas_gemm.cpp	/^namespace ut {$/;"	n	namespace:jblas	file:
ut	ut/jit_blas_prologue.cpp	/^  void ut(int m, int k) {$/;"	f	class:jblas::ut::UT_ActivationU8PerChannelNQuantize
ut	ut/jit_blas_prologue.cpp	/^  void ut(int m, int k, int kblock) {$/;"	f	class:jblas::ut::UT_ActivationS8KBlockQuantize
ut	ut/jit_blas_prologue.cpp	/^  void ut(int m, int k, int lda) {$/;"	f	class:jblas::ut::UT_ActivationBase
ut	ut/jit_blas_prologue.cpp	/^  void ut(int m, int k, int lda, int kblock) {$/;"	f	class:jblas::ut::UT_ActivationU8KBlockQuantize
ut	ut/jit_blas_prologue.cpp	/^namespace ut {$/;"	n	namespace:jblas	file:
ut	ut/jit_blas_transformer.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::transformer::UT_AMX_INT8_NN_QKV_INT4_BLOCK
ut	ut/jit_blas_transformer.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::transformer::UT_AVX512VNNI_NN_QKV_INT4_BLOCK
ut	ut/jit_blas_ut.h	/^namespace ut {$/;"	n	namespace:jblas
ut	ut/jit_blas_utils.cpp	/^  void ut(int m, int n, int k, int blocksize, int threads) {$/;"	f	class:jblas::utils::parallel::UT_GemmParallelKBlock
ut	ut/jit_blas_utils.cpp	/^  void ut(int m, int n, int k, int threads) {$/;"	f	class:jblas::utils::parallel::UT_GemmParallel
ut	ut/jit_blas_utils.cpp	/^  void ut(int row, int col, int minrow, int mincol, int blocksize, int threads) {$/;"	f	class:jblas::utils::parallel::UT_RowmajorParallelKBlock
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXINT8_NN_INT4_BLOCK
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_INT8_NN_INT8_PerChannel
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512_VNNI_NN_INT8_PerChannel
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXBF16_NN_F4_BLOCK
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXBF16_NN_INT4_BLOCK
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_F4_BLOCK
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_INT4_BLOCK
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_INT8_BLOCK
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN_INT4_BLOCK
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_BlockQunatize_INT8
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_SerDes_INT4
ut	ut/jit_blas_weight_compression.cpp	/^  void ut(int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_TransposeBlockQuantize_F4
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_INT8ss_NN_DynamicQuant
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN_DynamicQuantNew
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXINT8_48_NN
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXINT8_NN
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_BF16_NN_PackWeight
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN
ut	ut/jit_blas_wrapper.cpp	/^  void ut(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512_FP16_NN
ut	ut/kernel_intrin.cpp	/^namespace ut {$/;"	n	namespace:jblas	file:
ut	ut/kernel_jit.cpp	/^  void ut(int row, int col) {$/;"	f	class:jblas::ut::UT_DeQuant
ut	ut/kernel_jit.cpp	/^  void ut(int row, int col) {$/;"	f	class:jblas::ut::UT_DecompressS4S8
ut	ut/kernel_jit.cpp	/^  void ut(int row, int col, int srcstride, int dststride) {$/;"	f	class:jblas::ut::jit::copy::UT_Memcpy2D_AVX512F
ut	ut/kernel_jit.cpp	/^namespace ut {$/;"	n	namespace:jblas	file:
ut	ut/kernel_wrapper.cpp	/^  void ut(int row, int col, int col_tile) {$/;"	f	class:jblas::ut::kernel_wrapper::UT_PaddingTransInterleaveMN
ut	ut/kernel_wrapper.cpp	/^  void ut(int row, int col, int row_tile) {$/;"	f	class:jblas::ut::kernel_wrapper::UT_PaddingInterleaveMN
ut	ut/kernel_wrapper.cpp	/^  void ut(int row, int col, int rowtile) {$/;"	f	class:jblas::ut::kernel_wrapper::UT_RevertPaddingInterleaveMN
ut	ut/kernel_wrapper.cpp	/^namespace ut {$/;"	n	namespace:jblas	file:
ut_48	ut/jit_blas_gemm.cpp	/^  void ut_48(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GEMM_AMX_BF16
ut_48	ut/jit_blas_wrapper.cpp	/^  void ut_48(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_BF16_NN_PackWeight
ut_96	ut/jit_blas_gemm.cpp	/^  void ut_96(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::ut::UT_GemmCore_Row_NN_AVX512_FP16
ut_96	ut/jit_blas_wrapper.cpp	/^  void ut_96(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512_FP16_NN
ut_ab	ut/jit_blas_wrapper.cpp	/^  void ut_ab(int m, int n, int k, int lda, int ldb, int ldc) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN_DynamicQuantNew
ut_bf16	ut/jit_blas_weight_compression.cpp	/^  void ut_bf16(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_F4_BLOCK
ut_bf16	ut/jit_blas_weight_compression.cpp	/^  void ut_bf16(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_INT4_BLOCK
ut_bf16	ut/jit_blas_weight_compression.cpp	/^  void ut_bf16(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512VNNI_NN_INT4_BLOCK
ut_c	ut/jit_blas_weight_compression.cpp	/^  void ut_c(int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_SerDes_INT4
ut_dynamicA	ut/jit_blas_weight_compression.cpp	/^  void ut_dynamicA(int m, int n, int k) {$/;"	f	class:jblas::wrapper::gemm::UT_AMX_INT8_NN_INT8_PerChannel
ut_dynamicA	ut/jit_blas_weight_compression.cpp	/^  void ut_dynamicA(int m, int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512_VNNI_NN_INT8_PerChannel
ut_f32_bf16	ut/jit_blas_gemm.cpp	/^  void ut_f32_bf16(int m, int n, int k, int kblock) {$/;"	f	class:jblas::ut::UT_GEMM_VNNI_KBLOCK
ut_f32_f32	ut/jit_blas_gemm.cpp	/^  void ut_f32_f32(int m, int n, int k, int kblock) {$/;"	f	class:jblas::ut::UT_GEMM_AMXINT8_48_KBLOCK
ut_f32_f32	ut/jit_blas_gemm.cpp	/^  void ut_f32_f32(int m, int n, int k, int kblock) {$/;"	f	class:jblas::ut::UT_GEMM_VNNI_KBLOCK
ut_s_bf16	ut/jit_blas_weight_compression.cpp	/^  void ut_s_bf16(int m, int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AMXINT8_NN_INT4_BLOCK
ut_transpose	ut/jit_blas_weight_compression.cpp	/^  void ut_transpose(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_INT4_BLOCK
ut_transpose	ut/jit_blas_weight_compression.cpp	/^  void ut_transpose(int m, int n, int k, int lda, int ldb, int ldc, int ldd, float alpha, float beta, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_AVX512F_NN_INT8_BLOCK
ut_transpose	ut/jit_blas_weight_compression.cpp	/^  void ut_transpose(int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::gemm::UT_BlockQunatize_INT8
ut_ws	ut/jit_blas_prologue.cpp	/^  void ut_ws(int m, int k) {$/;"	f	class:jblas::ut::UT_ActivationU8PerChannelNQuantize
utbf16	ut/jit_blas_transformer.cpp	/^  void utbf16(int m, int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::transformer::UT_QKVGemmInterfacePackWeight
utfp32	ut/jit_blas_transformer.cpp	/^  void utfp32(int m, int n, int k, int blocksize) {$/;"	f	class:jblas::wrapper::transformer::UT_QKVGemmInterfacePackWeight
util	xbyak/xbyak.h	/^namespace util {$/;"	n	namespace:Xbyak
util	xbyak/xbyak_util.h	/^namespace Xbyak { namespace util {$/;"	n	namespace:Xbyak
utils	jit_blas_utils.h	/^namespace utils {$/;"	n	namespace:jblas
utils	ut/jit_blas_utils.cpp	/^namespace utils {$/;"	n	namespace:jblas	file:
v4fmaddps	xbyak/xbyak_mnemonic.h	/^void v4fmaddps(const Zmm& z1, const Zmm& z2, const Address& addr) { opAVX_X_X_XM(z1, z2, addr, T_0F38 | T_F2 | T_EW0 | T_YMM | T_MUST_EVEX | T_N16, 0x9A); }$/;"	f
v4fmaddss	xbyak/xbyak_mnemonic.h	/^void v4fmaddss(const Xmm& x1, const Xmm& x2, const Address& addr) { opAVX_X_X_XM(x1, x2, addr, T_0F38 | T_F2 | T_EW0 | T_MUST_EVEX | T_N16, 0x9B); }$/;"	f
v4fnmaddps	xbyak/xbyak_mnemonic.h	/^void v4fnmaddps(const Zmm& z1, const Zmm& z2, const Address& addr) { opAVX_X_X_XM(z1, z2, addr, T_0F38 | T_F2 | T_EW0 | T_YMM | T_MUST_EVEX | T_N16, 0xAA); }$/;"	f
v4fnmaddss	xbyak/xbyak_mnemonic.h	/^void v4fnmaddss(const Xmm& x1, const Xmm& x2, const Address& addr) { opAVX_X_X_XM(x1, x2, addr, T_0F38 | T_F2 | T_EW0 | T_MUST_EVEX | T_N16, 0xAB); }$/;"	f
vaddpd	xbyak/xbyak_mnemonic.h	/^void vaddpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x58); }$/;"	f
vaddph	xbyak/xbyak_mnemonic.h	/^void vaddph(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_EW0 | T_YMM | T_MUST_EVEX | T_ER_Z | T_B16, 0x58); }$/;"	f
vaddps	xbyak/xbyak_mnemonic.h	/^void vaddps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x58); }$/;"	f
vaddsd	xbyak/xbyak_mnemonic.h	/^void vaddsd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F2 | T_EW1 | T_EVEX | T_ER_X | T_N8, 0x58); }$/;"	f
vaddsh	xbyak/xbyak_mnemonic.h	/^void vaddsh(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_F3 | T_EW0 | T_MUST_EVEX | T_ER_X | T_N2, 0x58); }$/;"	f
vaddss	xbyak/xbyak_mnemonic.h	/^void vaddss(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F3 | T_EW0 | T_EVEX | T_ER_X | T_N4, 0x58); }$/;"	f
vaddsubpd	xbyak/xbyak_mnemonic.h	/^void vaddsubpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_66 | T_0F | T_YMM, 0xD0); }$/;"	f
vaddsubps	xbyak/xbyak_mnemonic.h	/^void vaddsubps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_F2 | T_0F | T_YMM, 0xD0); }$/;"	f
vaesdec	xbyak/xbyak_mnemonic.h	/^void vaesdec(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_66 | T_0F38 | T_YMM | T_EVEX, 0xDE); }$/;"	f
vaesdeclast	xbyak/xbyak_mnemonic.h	/^void vaesdeclast(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_66 | T_0F38 | T_YMM | T_EVEX, 0xDF); }$/;"	f
vaesenc	xbyak/xbyak_mnemonic.h	/^void vaesenc(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_66 | T_0F38 | T_YMM | T_EVEX, 0xDC); }$/;"	f
vaesenclast	xbyak/xbyak_mnemonic.h	/^void vaesenclast(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_66 | T_0F38 | T_YMM | T_EVEX, 0xDD); }$/;"	f
vaesimc	xbyak/xbyak_mnemonic.h	/^void vaesimc(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38 | T_W0, 0xDB); }$/;"	f
vaeskeygenassist	xbyak/xbyak_mnemonic.h	/^void vaeskeygenassist(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A, 0xDF, imm); }$/;"	f
val	kernel_jit_injector.h	/^    table_entry_val_t val;$/;"	m	struct:jblas::kernel::jit_injector::eltwise_injector::mapped_table_entry_t
val	kernel_jit_injector.h	/^    table_entry_val_t val;$/;"	m	struct:jblas::kernel::jit_injector::eltwise_injector::table_entry_t
valignd	xbyak/xbyak_mnemonic.h	/^void valignd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x03, imm); }$/;"	f
valignq	xbyak/xbyak_mnemonic.h	/^void valignq(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x03, imm); }$/;"	f
vandnpd	xbyak/xbyak_mnemonic.h	/^void vandnpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x55); }$/;"	f
vandnps	xbyak/xbyak_mnemonic.h	/^void vandnps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x55); }$/;"	f
vandpd	xbyak/xbyak_mnemonic.h	/^void vandpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x54); }$/;"	f
vandps	xbyak/xbyak_mnemonic.h	/^void vandps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x54); }$/;"	f
vbcstnebf162ps	xbyak/xbyak_mnemonic.h	/^void vbcstnebf162ps(const Xmm& x, const Address& addr) { opVex(x, 0, addr, T_F3 | T_0F38 | T_W0 | T_YMM | T_B16, 0xB1); }$/;"	f
vbcstnesh2ps	xbyak/xbyak_mnemonic.h	/^void vbcstnesh2ps(const Xmm& x, const Address& addr) { opVex(x, 0, addr, T_66 | T_0F38 | T_W0 | T_YMM | T_B16, 0xB1); }$/;"	f
vblendmpd	xbyak/xbyak_mnemonic.h	/^void vblendmpd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x65); }$/;"	f
vblendmps	xbyak/xbyak_mnemonic.h	/^void vblendmps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x65); }$/;"	f
vblendpd	xbyak/xbyak_mnemonic.h	/^void vblendpd(const Xmm& x, const Operand& op, uint8_t imm) { vblendpd(x, x, op, imm); }$/;"	f
vblendpd	xbyak/xbyak_mnemonic.h	/^void vblendpd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0 | T_YMM, 0x0D, imm); }$/;"	f
vblendps	xbyak/xbyak_mnemonic.h	/^void vblendps(const Xmm& x, const Operand& op, uint8_t imm) { vblendps(x, x, op, imm); }$/;"	f
vblendps	xbyak/xbyak_mnemonic.h	/^void vblendps(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0 | T_YMM, 0x0C, imm); }$/;"	f
vblendvpd	xbyak/xbyak_mnemonic.h	/^void vblendvpd(const Xmm& x1, const Operand& op, const Xmm& x4) { vblendvpd(x1, x1, op, x4); }$/;"	f
vblendvpd	xbyak/xbyak_mnemonic.h	/^void vblendvpd(const Xmm& x1, const Xmm& x2, const Operand& op, const Xmm& x4) { opAVX_X_X_XM(x1, x2, op, T_0F3A | T_66 | T_YMM, 0x4B, x4.getIdx() << 4); }$/;"	f
vblendvps	xbyak/xbyak_mnemonic.h	/^void vblendvps(const Xmm& x1, const Operand& op, const Xmm& x4) { vblendvps(x1, x1, op, x4); }$/;"	f
vblendvps	xbyak/xbyak_mnemonic.h	/^void vblendvps(const Xmm& x1, const Xmm& x2, const Operand& op, const Xmm& x4) { opAVX_X_X_XM(x1, x2, op, T_0F3A | T_66 | T_YMM, 0x4A, x4.getIdx() << 4); }$/;"	f
vbroadcastf128	xbyak/xbyak_mnemonic.h	/^void vbroadcastf128(const Ymm& y, const Address& addr) { opAVX_X_XM_IMM(y, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x1A); }$/;"	f
vbroadcastf32x2	xbyak/xbyak_mnemonic.h	/^void vbroadcastf32x2(const Ymm& y, const Operand& op) { opAVX_X_XM_IMM(y, op, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW0 | T_N8, 0x19); }$/;"	f
vbroadcastf32x4	xbyak/xbyak_mnemonic.h	/^void vbroadcastf32x4(const Ymm& y, const Address& addr) { opAVX_X_XM_IMM(y, addr, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW0 | T_N16, 0x1A); }$/;"	f
vbroadcastf32x8	xbyak/xbyak_mnemonic.h	/^void vbroadcastf32x8(const Zmm& y, const Address& addr) { opAVX_X_XM_IMM(y, addr, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW0 | T_N32, 0x1B); }$/;"	f
vbroadcastf64x2	xbyak/xbyak_mnemonic.h	/^void vbroadcastf64x2(const Ymm& y, const Address& addr) { opAVX_X_XM_IMM(y, addr, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW1 | T_N16, 0x1A); }$/;"	f
vbroadcastf64x4	xbyak/xbyak_mnemonic.h	/^void vbroadcastf64x4(const Zmm& y, const Address& addr) { opAVX_X_XM_IMM(y, addr, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW1 | T_N32, 0x1B); }$/;"	f
vbroadcasti128	xbyak/xbyak_mnemonic.h	/^void vbroadcasti128(const Ymm& y, const Address& addr) { opAVX_X_XM_IMM(y, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x5A); }$/;"	f
vbroadcasti32x2	xbyak/xbyak_mnemonic.h	/^void vbroadcasti32x2(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW0 | T_N8, 0x59); }$/;"	f
vbroadcasti32x4	xbyak/xbyak_mnemonic.h	/^void vbroadcasti32x4(const Ymm& y, const Operand& op) { opAVX_X_XM_IMM(y, op, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW0 | T_N16, 0x5A); }$/;"	f
vbroadcasti32x8	xbyak/xbyak_mnemonic.h	/^void vbroadcasti32x8(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW0 | T_N32, 0x5B); }$/;"	f
vbroadcasti64x2	xbyak/xbyak_mnemonic.h	/^void vbroadcasti64x2(const Ymm& y, const Operand& op) { opAVX_X_XM_IMM(y, op, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW1 | T_N16, 0x5A); }$/;"	f
vbroadcasti64x4	xbyak/xbyak_mnemonic.h	/^void vbroadcasti64x4(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW1 | T_N32, 0x5B); }$/;"	f
vbroadcastsd	xbyak/xbyak_mnemonic.h	/^void vbroadcastsd(const Ymm& y, const Operand& op) { if (!op.isMEM() && !(y.isYMM() && op.isXMM()) && !(y.isZMM() && op.isXMM())) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_XM_IMM(y, op, T_0F38 | T_66 | T_W0 | T_YMM | T_EVEX | T_EW1 | T_N8, 0x19); }$/;"	f
vbroadcastss	xbyak/xbyak_mnemonic.h	/^void vbroadcastss(const Xmm& x, const Operand& op) { if (!(op.isXMM() || op.isMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_XM_IMM(x, op, T_N4 | T_66 | T_0F38 | T_W0 | T_YMM | T_EVEX, 0x18); }$/;"	f
vcmpeq_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ospd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 16); }$/;"	f
vcmpeq_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ospd(const Xmm& x, const Operand& op) { vcmpeq_ospd(x, x, op); }$/;"	f
vcmpeq_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ospd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 16); }$/;"	f
vcmpeq_osps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_osps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 16); }$/;"	f
vcmpeq_osps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_osps(const Xmm& x, const Operand& op) { vcmpeq_osps(x, x, op); }$/;"	f
vcmpeq_osps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_osps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 16); }$/;"	f
vcmpeq_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ossd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 16); }$/;"	f
vcmpeq_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ossd(const Xmm& x, const Operand& op) { vcmpeq_ossd(x, x, op); }$/;"	f
vcmpeq_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ossd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 16); }$/;"	f
vcmpeq_osss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_osss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 16); }$/;"	f
vcmpeq_osss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_osss(const Xmm& x, const Operand& op) { vcmpeq_osss(x, x, op); }$/;"	f
vcmpeq_osss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_osss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 16); }$/;"	f
vcmpeq_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 8); }$/;"	f
vcmpeq_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqpd(const Xmm& x, const Operand& op) { vcmpeq_uqpd(x, x, op); }$/;"	f
vcmpeq_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 8); }$/;"	f
vcmpeq_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 8); }$/;"	f
vcmpeq_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqps(const Xmm& x, const Operand& op) { vcmpeq_uqps(x, x, op); }$/;"	f
vcmpeq_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 8); }$/;"	f
vcmpeq_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 8); }$/;"	f
vcmpeq_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqsd(const Xmm& x, const Operand& op) { vcmpeq_uqsd(x, x, op); }$/;"	f
vcmpeq_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 8); }$/;"	f
vcmpeq_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 8); }$/;"	f
vcmpeq_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqss(const Xmm& x, const Operand& op) { vcmpeq_uqss(x, x, op); }$/;"	f
vcmpeq_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 8); }$/;"	f
vcmpeq_uspd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uspd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 24); }$/;"	f
vcmpeq_uspd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uspd(const Xmm& x, const Operand& op) { vcmpeq_uspd(x, x, op); }$/;"	f
vcmpeq_uspd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_uspd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 24); }$/;"	f
vcmpeq_usps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_usps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 24); }$/;"	f
vcmpeq_usps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_usps(const Xmm& x, const Operand& op) { vcmpeq_usps(x, x, op); }$/;"	f
vcmpeq_usps	xbyak/xbyak_mnemonic.h	/^void vcmpeq_usps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 24); }$/;"	f
vcmpeq_ussd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ussd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 24); }$/;"	f
vcmpeq_ussd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ussd(const Xmm& x, const Operand& op) { vcmpeq_ussd(x, x, op); }$/;"	f
vcmpeq_ussd	xbyak/xbyak_mnemonic.h	/^void vcmpeq_ussd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 24); }$/;"	f
vcmpeq_usss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_usss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 24); }$/;"	f
vcmpeq_usss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_usss(const Xmm& x, const Operand& op) { vcmpeq_usss(x, x, op); }$/;"	f
vcmpeq_usss	xbyak/xbyak_mnemonic.h	/^void vcmpeq_usss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 24); }$/;"	f
vcmpeqpd	xbyak/xbyak_mnemonic.h	/^void vcmpeqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 0); }$/;"	f
vcmpeqpd	xbyak/xbyak_mnemonic.h	/^void vcmpeqpd(const Xmm& x, const Operand& op) { vcmpeqpd(x, x, op); }$/;"	f
vcmpeqpd	xbyak/xbyak_mnemonic.h	/^void vcmpeqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 0); }$/;"	f
vcmpeqps	xbyak/xbyak_mnemonic.h	/^void vcmpeqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 0); }$/;"	f
vcmpeqps	xbyak/xbyak_mnemonic.h	/^void vcmpeqps(const Xmm& x, const Operand& op) { vcmpeqps(x, x, op); }$/;"	f
vcmpeqps	xbyak/xbyak_mnemonic.h	/^void vcmpeqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 0); }$/;"	f
vcmpeqsd	xbyak/xbyak_mnemonic.h	/^void vcmpeqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 0); }$/;"	f
vcmpeqsd	xbyak/xbyak_mnemonic.h	/^void vcmpeqsd(const Xmm& x, const Operand& op) { vcmpeqsd(x, x, op); }$/;"	f
vcmpeqsd	xbyak/xbyak_mnemonic.h	/^void vcmpeqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 0); }$/;"	f
vcmpeqss	xbyak/xbyak_mnemonic.h	/^void vcmpeqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 0); }$/;"	f
vcmpeqss	xbyak/xbyak_mnemonic.h	/^void vcmpeqss(const Xmm& x, const Operand& op) { vcmpeqss(x, x, op); }$/;"	f
vcmpeqss	xbyak/xbyak_mnemonic.h	/^void vcmpeqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 0); }$/;"	f
vcmpfalse_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_ospd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 27); }$/;"	f
vcmpfalse_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_ospd(const Xmm& x, const Operand& op) { vcmpfalse_ospd(x, x, op); }$/;"	f
vcmpfalse_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_ospd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 27); }$/;"	f
vcmpfalse_osps	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_osps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 27); }$/;"	f
vcmpfalse_osps	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_osps(const Xmm& x, const Operand& op) { vcmpfalse_osps(x, x, op); }$/;"	f
vcmpfalse_osps	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_osps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 27); }$/;"	f
vcmpfalse_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_ossd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 27); }$/;"	f
vcmpfalse_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_ossd(const Xmm& x, const Operand& op) { vcmpfalse_ossd(x, x, op); }$/;"	f
vcmpfalse_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_ossd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 27); }$/;"	f
vcmpfalse_osss	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_osss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 27); }$/;"	f
vcmpfalse_osss	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_osss(const Xmm& x, const Operand& op) { vcmpfalse_osss(x, x, op); }$/;"	f
vcmpfalse_osss	xbyak/xbyak_mnemonic.h	/^void vcmpfalse_osss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 27); }$/;"	f
vcmpfalsepd	xbyak/xbyak_mnemonic.h	/^void vcmpfalsepd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 11); }$/;"	f
vcmpfalsepd	xbyak/xbyak_mnemonic.h	/^void vcmpfalsepd(const Xmm& x, const Operand& op) { vcmpfalsepd(x, x, op); }$/;"	f
vcmpfalsepd	xbyak/xbyak_mnemonic.h	/^void vcmpfalsepd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 11); }$/;"	f
vcmpfalseps	xbyak/xbyak_mnemonic.h	/^void vcmpfalseps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 11); }$/;"	f
vcmpfalseps	xbyak/xbyak_mnemonic.h	/^void vcmpfalseps(const Xmm& x, const Operand& op) { vcmpfalseps(x, x, op); }$/;"	f
vcmpfalseps	xbyak/xbyak_mnemonic.h	/^void vcmpfalseps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 11); }$/;"	f
vcmpfalsesd	xbyak/xbyak_mnemonic.h	/^void vcmpfalsesd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 11); }$/;"	f
vcmpfalsesd	xbyak/xbyak_mnemonic.h	/^void vcmpfalsesd(const Xmm& x, const Operand& op) { vcmpfalsesd(x, x, op); }$/;"	f
vcmpfalsesd	xbyak/xbyak_mnemonic.h	/^void vcmpfalsesd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 11); }$/;"	f
vcmpfalsess	xbyak/xbyak_mnemonic.h	/^void vcmpfalsess(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 11); }$/;"	f
vcmpfalsess	xbyak/xbyak_mnemonic.h	/^void vcmpfalsess(const Xmm& x, const Operand& op) { vcmpfalsess(x, x, op); }$/;"	f
vcmpfalsess	xbyak/xbyak_mnemonic.h	/^void vcmpfalsess(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 11); }$/;"	f
vcmpge_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 29); }$/;"	f
vcmpge_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqpd(const Xmm& x, const Operand& op) { vcmpge_oqpd(x, x, op); }$/;"	f
vcmpge_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 29); }$/;"	f
vcmpge_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 29); }$/;"	f
vcmpge_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqps(const Xmm& x, const Operand& op) { vcmpge_oqps(x, x, op); }$/;"	f
vcmpge_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 29); }$/;"	f
vcmpge_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 29); }$/;"	f
vcmpge_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqsd(const Xmm& x, const Operand& op) { vcmpge_oqsd(x, x, op); }$/;"	f
vcmpge_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 29); }$/;"	f
vcmpge_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 29); }$/;"	f
vcmpge_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqss(const Xmm& x, const Operand& op) { vcmpge_oqss(x, x, op); }$/;"	f
vcmpge_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpge_oqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 29); }$/;"	f
vcmpgepd	xbyak/xbyak_mnemonic.h	/^void vcmpgepd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 13); }$/;"	f
vcmpgepd	xbyak/xbyak_mnemonic.h	/^void vcmpgepd(const Xmm& x, const Operand& op) { vcmpgepd(x, x, op); }$/;"	f
vcmpgepd	xbyak/xbyak_mnemonic.h	/^void vcmpgepd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 13); }$/;"	f
vcmpgeps	xbyak/xbyak_mnemonic.h	/^void vcmpgeps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 13); }$/;"	f
vcmpgeps	xbyak/xbyak_mnemonic.h	/^void vcmpgeps(const Xmm& x, const Operand& op) { vcmpgeps(x, x, op); }$/;"	f
vcmpgeps	xbyak/xbyak_mnemonic.h	/^void vcmpgeps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 13); }$/;"	f
vcmpgesd	xbyak/xbyak_mnemonic.h	/^void vcmpgesd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 13); }$/;"	f
vcmpgesd	xbyak/xbyak_mnemonic.h	/^void vcmpgesd(const Xmm& x, const Operand& op) { vcmpgesd(x, x, op); }$/;"	f
vcmpgesd	xbyak/xbyak_mnemonic.h	/^void vcmpgesd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 13); }$/;"	f
vcmpgess	xbyak/xbyak_mnemonic.h	/^void vcmpgess(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 13); }$/;"	f
vcmpgess	xbyak/xbyak_mnemonic.h	/^void vcmpgess(const Xmm& x, const Operand& op) { vcmpgess(x, x, op); }$/;"	f
vcmpgess	xbyak/xbyak_mnemonic.h	/^void vcmpgess(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 13); }$/;"	f
vcmpgt_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 30); }$/;"	f
vcmpgt_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqpd(const Xmm& x, const Operand& op) { vcmpgt_oqpd(x, x, op); }$/;"	f
vcmpgt_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 30); }$/;"	f
vcmpgt_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 30); }$/;"	f
vcmpgt_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqps(const Xmm& x, const Operand& op) { vcmpgt_oqps(x, x, op); }$/;"	f
vcmpgt_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 30); }$/;"	f
vcmpgt_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 30); }$/;"	f
vcmpgt_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqsd(const Xmm& x, const Operand& op) { vcmpgt_oqsd(x, x, op); }$/;"	f
vcmpgt_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 30); }$/;"	f
vcmpgt_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 30); }$/;"	f
vcmpgt_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqss(const Xmm& x, const Operand& op) { vcmpgt_oqss(x, x, op); }$/;"	f
vcmpgt_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpgt_oqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 30); }$/;"	f
vcmpgtpd	xbyak/xbyak_mnemonic.h	/^void vcmpgtpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 14); }$/;"	f
vcmpgtpd	xbyak/xbyak_mnemonic.h	/^void vcmpgtpd(const Xmm& x, const Operand& op) { vcmpgtpd(x, x, op); }$/;"	f
vcmpgtpd	xbyak/xbyak_mnemonic.h	/^void vcmpgtpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 14); }$/;"	f
vcmpgtps	xbyak/xbyak_mnemonic.h	/^void vcmpgtps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 14); }$/;"	f
vcmpgtps	xbyak/xbyak_mnemonic.h	/^void vcmpgtps(const Xmm& x, const Operand& op) { vcmpgtps(x, x, op); }$/;"	f
vcmpgtps	xbyak/xbyak_mnemonic.h	/^void vcmpgtps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 14); }$/;"	f
vcmpgtsd	xbyak/xbyak_mnemonic.h	/^void vcmpgtsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 14); }$/;"	f
vcmpgtsd	xbyak/xbyak_mnemonic.h	/^void vcmpgtsd(const Xmm& x, const Operand& op) { vcmpgtsd(x, x, op); }$/;"	f
vcmpgtsd	xbyak/xbyak_mnemonic.h	/^void vcmpgtsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 14); }$/;"	f
vcmpgtss	xbyak/xbyak_mnemonic.h	/^void vcmpgtss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 14); }$/;"	f
vcmpgtss	xbyak/xbyak_mnemonic.h	/^void vcmpgtss(const Xmm& x, const Operand& op) { vcmpgtss(x, x, op); }$/;"	f
vcmpgtss	xbyak/xbyak_mnemonic.h	/^void vcmpgtss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 14); }$/;"	f
vcmple_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmple_oqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 18); }$/;"	f
vcmple_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmple_oqpd(const Xmm& x, const Operand& op) { vcmple_oqpd(x, x, op); }$/;"	f
vcmple_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmple_oqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 18); }$/;"	f
vcmple_oqps	xbyak/xbyak_mnemonic.h	/^void vcmple_oqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 18); }$/;"	f
vcmple_oqps	xbyak/xbyak_mnemonic.h	/^void vcmple_oqps(const Xmm& x, const Operand& op) { vcmple_oqps(x, x, op); }$/;"	f
vcmple_oqps	xbyak/xbyak_mnemonic.h	/^void vcmple_oqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 18); }$/;"	f
vcmple_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmple_oqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 18); }$/;"	f
vcmple_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmple_oqsd(const Xmm& x, const Operand& op) { vcmple_oqsd(x, x, op); }$/;"	f
vcmple_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmple_oqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 18); }$/;"	f
vcmple_oqss	xbyak/xbyak_mnemonic.h	/^void vcmple_oqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 18); }$/;"	f
vcmple_oqss	xbyak/xbyak_mnemonic.h	/^void vcmple_oqss(const Xmm& x, const Operand& op) { vcmple_oqss(x, x, op); }$/;"	f
vcmple_oqss	xbyak/xbyak_mnemonic.h	/^void vcmple_oqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 18); }$/;"	f
vcmplepd	xbyak/xbyak_mnemonic.h	/^void vcmplepd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 2); }$/;"	f
vcmplepd	xbyak/xbyak_mnemonic.h	/^void vcmplepd(const Xmm& x, const Operand& op) { vcmplepd(x, x, op); }$/;"	f
vcmplepd	xbyak/xbyak_mnemonic.h	/^void vcmplepd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 2); }$/;"	f
vcmpleps	xbyak/xbyak_mnemonic.h	/^void vcmpleps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 2); }$/;"	f
vcmpleps	xbyak/xbyak_mnemonic.h	/^void vcmpleps(const Xmm& x, const Operand& op) { vcmpleps(x, x, op); }$/;"	f
vcmpleps	xbyak/xbyak_mnemonic.h	/^void vcmpleps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 2); }$/;"	f
vcmplesd	xbyak/xbyak_mnemonic.h	/^void vcmplesd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 2); }$/;"	f
vcmplesd	xbyak/xbyak_mnemonic.h	/^void vcmplesd(const Xmm& x, const Operand& op) { vcmplesd(x, x, op); }$/;"	f
vcmplesd	xbyak/xbyak_mnemonic.h	/^void vcmplesd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 2); }$/;"	f
vcmpless	xbyak/xbyak_mnemonic.h	/^void vcmpless(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 2); }$/;"	f
vcmpless	xbyak/xbyak_mnemonic.h	/^void vcmpless(const Xmm& x, const Operand& op) { vcmpless(x, x, op); }$/;"	f
vcmpless	xbyak/xbyak_mnemonic.h	/^void vcmpless(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 2); }$/;"	f
vcmplt_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 17); }$/;"	f
vcmplt_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqpd(const Xmm& x, const Operand& op) { vcmplt_oqpd(x, x, op); }$/;"	f
vcmplt_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 17); }$/;"	f
vcmplt_oqps	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 17); }$/;"	f
vcmplt_oqps	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqps(const Xmm& x, const Operand& op) { vcmplt_oqps(x, x, op); }$/;"	f
vcmplt_oqps	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 17); }$/;"	f
vcmplt_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 17); }$/;"	f
vcmplt_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqsd(const Xmm& x, const Operand& op) { vcmplt_oqsd(x, x, op); }$/;"	f
vcmplt_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 17); }$/;"	f
vcmplt_oqss	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 17); }$/;"	f
vcmplt_oqss	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqss(const Xmm& x, const Operand& op) { vcmplt_oqss(x, x, op); }$/;"	f
vcmplt_oqss	xbyak/xbyak_mnemonic.h	/^void vcmplt_oqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 17); }$/;"	f
vcmpltpd	xbyak/xbyak_mnemonic.h	/^void vcmpltpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 1); }$/;"	f
vcmpltpd	xbyak/xbyak_mnemonic.h	/^void vcmpltpd(const Xmm& x, const Operand& op) { vcmpltpd(x, x, op); }$/;"	f
vcmpltpd	xbyak/xbyak_mnemonic.h	/^void vcmpltpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 1); }$/;"	f
vcmpltps	xbyak/xbyak_mnemonic.h	/^void vcmpltps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 1); }$/;"	f
vcmpltps	xbyak/xbyak_mnemonic.h	/^void vcmpltps(const Xmm& x, const Operand& op) { vcmpltps(x, x, op); }$/;"	f
vcmpltps	xbyak/xbyak_mnemonic.h	/^void vcmpltps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 1); }$/;"	f
vcmpltsd	xbyak/xbyak_mnemonic.h	/^void vcmpltsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 1); }$/;"	f
vcmpltsd	xbyak/xbyak_mnemonic.h	/^void vcmpltsd(const Xmm& x, const Operand& op) { vcmpltsd(x, x, op); }$/;"	f
vcmpltsd	xbyak/xbyak_mnemonic.h	/^void vcmpltsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 1); }$/;"	f
vcmpltss	xbyak/xbyak_mnemonic.h	/^void vcmpltss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 1); }$/;"	f
vcmpltss	xbyak/xbyak_mnemonic.h	/^void vcmpltss(const Xmm& x, const Operand& op) { vcmpltss(x, x, op); }$/;"	f
vcmpltss	xbyak/xbyak_mnemonic.h	/^void vcmpltss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 1); }$/;"	f
vcmpneq_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 12); }$/;"	f
vcmpneq_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqpd(const Xmm& x, const Operand& op) { vcmpneq_oqpd(x, x, op); }$/;"	f
vcmpneq_oqpd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 12); }$/;"	f
vcmpneq_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 12); }$/;"	f
vcmpneq_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqps(const Xmm& x, const Operand& op) { vcmpneq_oqps(x, x, op); }$/;"	f
vcmpneq_oqps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 12); }$/;"	f
vcmpneq_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 12); }$/;"	f
vcmpneq_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqsd(const Xmm& x, const Operand& op) { vcmpneq_oqsd(x, x, op); }$/;"	f
vcmpneq_oqsd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 12); }$/;"	f
vcmpneq_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 12); }$/;"	f
vcmpneq_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqss(const Xmm& x, const Operand& op) { vcmpneq_oqss(x, x, op); }$/;"	f
vcmpneq_oqss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_oqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 12); }$/;"	f
vcmpneq_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ospd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 28); }$/;"	f
vcmpneq_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ospd(const Xmm& x, const Operand& op) { vcmpneq_ospd(x, x, op); }$/;"	f
vcmpneq_ospd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ospd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 28); }$/;"	f
vcmpneq_osps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_osps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 28); }$/;"	f
vcmpneq_osps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_osps(const Xmm& x, const Operand& op) { vcmpneq_osps(x, x, op); }$/;"	f
vcmpneq_osps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_osps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 28); }$/;"	f
vcmpneq_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ossd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 28); }$/;"	f
vcmpneq_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ossd(const Xmm& x, const Operand& op) { vcmpneq_ossd(x, x, op); }$/;"	f
vcmpneq_ossd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ossd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 28); }$/;"	f
vcmpneq_osss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_osss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 28); }$/;"	f
vcmpneq_osss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_osss(const Xmm& x, const Operand& op) { vcmpneq_osss(x, x, op); }$/;"	f
vcmpneq_osss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_osss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 28); }$/;"	f
vcmpneq_uspd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_uspd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 20); }$/;"	f
vcmpneq_uspd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_uspd(const Xmm& x, const Operand& op) { vcmpneq_uspd(x, x, op); }$/;"	f
vcmpneq_uspd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_uspd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 20); }$/;"	f
vcmpneq_usps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_usps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 20); }$/;"	f
vcmpneq_usps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_usps(const Xmm& x, const Operand& op) { vcmpneq_usps(x, x, op); }$/;"	f
vcmpneq_usps	xbyak/xbyak_mnemonic.h	/^void vcmpneq_usps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 20); }$/;"	f
vcmpneq_ussd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ussd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 20); }$/;"	f
vcmpneq_ussd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ussd(const Xmm& x, const Operand& op) { vcmpneq_ussd(x, x, op); }$/;"	f
vcmpneq_ussd	xbyak/xbyak_mnemonic.h	/^void vcmpneq_ussd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 20); }$/;"	f
vcmpneq_usss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_usss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 20); }$/;"	f
vcmpneq_usss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_usss(const Xmm& x, const Operand& op) { vcmpneq_usss(x, x, op); }$/;"	f
vcmpneq_usss	xbyak/xbyak_mnemonic.h	/^void vcmpneq_usss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 20); }$/;"	f
vcmpneqpd	xbyak/xbyak_mnemonic.h	/^void vcmpneqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 4); }$/;"	f
vcmpneqpd	xbyak/xbyak_mnemonic.h	/^void vcmpneqpd(const Xmm& x, const Operand& op) { vcmpneqpd(x, x, op); }$/;"	f
vcmpneqpd	xbyak/xbyak_mnemonic.h	/^void vcmpneqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 4); }$/;"	f
vcmpneqps	xbyak/xbyak_mnemonic.h	/^void vcmpneqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 4); }$/;"	f
vcmpneqps	xbyak/xbyak_mnemonic.h	/^void vcmpneqps(const Xmm& x, const Operand& op) { vcmpneqps(x, x, op); }$/;"	f
vcmpneqps	xbyak/xbyak_mnemonic.h	/^void vcmpneqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 4); }$/;"	f
vcmpneqsd	xbyak/xbyak_mnemonic.h	/^void vcmpneqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 4); }$/;"	f
vcmpneqsd	xbyak/xbyak_mnemonic.h	/^void vcmpneqsd(const Xmm& x, const Operand& op) { vcmpneqsd(x, x, op); }$/;"	f
vcmpneqsd	xbyak/xbyak_mnemonic.h	/^void vcmpneqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 4); }$/;"	f
vcmpneqss	xbyak/xbyak_mnemonic.h	/^void vcmpneqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 4); }$/;"	f
vcmpneqss	xbyak/xbyak_mnemonic.h	/^void vcmpneqss(const Xmm& x, const Operand& op) { vcmpneqss(x, x, op); }$/;"	f
vcmpneqss	xbyak/xbyak_mnemonic.h	/^void vcmpneqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 4); }$/;"	f
vcmpnge_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 25); }$/;"	f
vcmpnge_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqpd(const Xmm& x, const Operand& op) { vcmpnge_uqpd(x, x, op); }$/;"	f
vcmpnge_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 25); }$/;"	f
vcmpnge_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 25); }$/;"	f
vcmpnge_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqps(const Xmm& x, const Operand& op) { vcmpnge_uqps(x, x, op); }$/;"	f
vcmpnge_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 25); }$/;"	f
vcmpnge_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 25); }$/;"	f
vcmpnge_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqsd(const Xmm& x, const Operand& op) { vcmpnge_uqsd(x, x, op); }$/;"	f
vcmpnge_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 25); }$/;"	f
vcmpnge_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 25); }$/;"	f
vcmpnge_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqss(const Xmm& x, const Operand& op) { vcmpnge_uqss(x, x, op); }$/;"	f
vcmpnge_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnge_uqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 25); }$/;"	f
vcmpngepd	xbyak/xbyak_mnemonic.h	/^void vcmpngepd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 9); }$/;"	f
vcmpngepd	xbyak/xbyak_mnemonic.h	/^void vcmpngepd(const Xmm& x, const Operand& op) { vcmpngepd(x, x, op); }$/;"	f
vcmpngepd	xbyak/xbyak_mnemonic.h	/^void vcmpngepd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 9); }$/;"	f
vcmpngeps	xbyak/xbyak_mnemonic.h	/^void vcmpngeps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 9); }$/;"	f
vcmpngeps	xbyak/xbyak_mnemonic.h	/^void vcmpngeps(const Xmm& x, const Operand& op) { vcmpngeps(x, x, op); }$/;"	f
vcmpngeps	xbyak/xbyak_mnemonic.h	/^void vcmpngeps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 9); }$/;"	f
vcmpngesd	xbyak/xbyak_mnemonic.h	/^void vcmpngesd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 9); }$/;"	f
vcmpngesd	xbyak/xbyak_mnemonic.h	/^void vcmpngesd(const Xmm& x, const Operand& op) { vcmpngesd(x, x, op); }$/;"	f
vcmpngesd	xbyak/xbyak_mnemonic.h	/^void vcmpngesd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 9); }$/;"	f
vcmpngess	xbyak/xbyak_mnemonic.h	/^void vcmpngess(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 9); }$/;"	f
vcmpngess	xbyak/xbyak_mnemonic.h	/^void vcmpngess(const Xmm& x, const Operand& op) { vcmpngess(x, x, op); }$/;"	f
vcmpngess	xbyak/xbyak_mnemonic.h	/^void vcmpngess(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 9); }$/;"	f
vcmpngt_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 26); }$/;"	f
vcmpngt_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqpd(const Xmm& x, const Operand& op) { vcmpngt_uqpd(x, x, op); }$/;"	f
vcmpngt_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 26); }$/;"	f
vcmpngt_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 26); }$/;"	f
vcmpngt_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqps(const Xmm& x, const Operand& op) { vcmpngt_uqps(x, x, op); }$/;"	f
vcmpngt_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 26); }$/;"	f
vcmpngt_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 26); }$/;"	f
vcmpngt_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqsd(const Xmm& x, const Operand& op) { vcmpngt_uqsd(x, x, op); }$/;"	f
vcmpngt_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 26); }$/;"	f
vcmpngt_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 26); }$/;"	f
vcmpngt_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqss(const Xmm& x, const Operand& op) { vcmpngt_uqss(x, x, op); }$/;"	f
vcmpngt_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpngt_uqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 26); }$/;"	f
vcmpngtpd	xbyak/xbyak_mnemonic.h	/^void vcmpngtpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 10); }$/;"	f
vcmpngtpd	xbyak/xbyak_mnemonic.h	/^void vcmpngtpd(const Xmm& x, const Operand& op) { vcmpngtpd(x, x, op); }$/;"	f
vcmpngtpd	xbyak/xbyak_mnemonic.h	/^void vcmpngtpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 10); }$/;"	f
vcmpngtps	xbyak/xbyak_mnemonic.h	/^void vcmpngtps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 10); }$/;"	f
vcmpngtps	xbyak/xbyak_mnemonic.h	/^void vcmpngtps(const Xmm& x, const Operand& op) { vcmpngtps(x, x, op); }$/;"	f
vcmpngtps	xbyak/xbyak_mnemonic.h	/^void vcmpngtps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 10); }$/;"	f
vcmpngtsd	xbyak/xbyak_mnemonic.h	/^void vcmpngtsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 10); }$/;"	f
vcmpngtsd	xbyak/xbyak_mnemonic.h	/^void vcmpngtsd(const Xmm& x, const Operand& op) { vcmpngtsd(x, x, op); }$/;"	f
vcmpngtsd	xbyak/xbyak_mnemonic.h	/^void vcmpngtsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 10); }$/;"	f
vcmpngtss	xbyak/xbyak_mnemonic.h	/^void vcmpngtss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 10); }$/;"	f
vcmpngtss	xbyak/xbyak_mnemonic.h	/^void vcmpngtss(const Xmm& x, const Operand& op) { vcmpngtss(x, x, op); }$/;"	f
vcmpngtss	xbyak/xbyak_mnemonic.h	/^void vcmpngtss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 10); }$/;"	f
vcmpnle_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 22); }$/;"	f
vcmpnle_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqpd(const Xmm& x, const Operand& op) { vcmpnle_uqpd(x, x, op); }$/;"	f
vcmpnle_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 22); }$/;"	f
vcmpnle_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 22); }$/;"	f
vcmpnle_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqps(const Xmm& x, const Operand& op) { vcmpnle_uqps(x, x, op); }$/;"	f
vcmpnle_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 22); }$/;"	f
vcmpnle_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 22); }$/;"	f
vcmpnle_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqsd(const Xmm& x, const Operand& op) { vcmpnle_uqsd(x, x, op); }$/;"	f
vcmpnle_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 22); }$/;"	f
vcmpnle_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 22); }$/;"	f
vcmpnle_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqss(const Xmm& x, const Operand& op) { vcmpnle_uqss(x, x, op); }$/;"	f
vcmpnle_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnle_uqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 22); }$/;"	f
vcmpnlepd	xbyak/xbyak_mnemonic.h	/^void vcmpnlepd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 6); }$/;"	f
vcmpnlepd	xbyak/xbyak_mnemonic.h	/^void vcmpnlepd(const Xmm& x, const Operand& op) { vcmpnlepd(x, x, op); }$/;"	f
vcmpnlepd	xbyak/xbyak_mnemonic.h	/^void vcmpnlepd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 6); }$/;"	f
vcmpnleps	xbyak/xbyak_mnemonic.h	/^void vcmpnleps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 6); }$/;"	f
vcmpnleps	xbyak/xbyak_mnemonic.h	/^void vcmpnleps(const Xmm& x, const Operand& op) { vcmpnleps(x, x, op); }$/;"	f
vcmpnleps	xbyak/xbyak_mnemonic.h	/^void vcmpnleps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 6); }$/;"	f
vcmpnlesd	xbyak/xbyak_mnemonic.h	/^void vcmpnlesd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 6); }$/;"	f
vcmpnlesd	xbyak/xbyak_mnemonic.h	/^void vcmpnlesd(const Xmm& x, const Operand& op) { vcmpnlesd(x, x, op); }$/;"	f
vcmpnlesd	xbyak/xbyak_mnemonic.h	/^void vcmpnlesd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 6); }$/;"	f
vcmpnless	xbyak/xbyak_mnemonic.h	/^void vcmpnless(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 6); }$/;"	f
vcmpnless	xbyak/xbyak_mnemonic.h	/^void vcmpnless(const Xmm& x, const Operand& op) { vcmpnless(x, x, op); }$/;"	f
vcmpnless	xbyak/xbyak_mnemonic.h	/^void vcmpnless(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 6); }$/;"	f
vcmpnlt_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 21); }$/;"	f
vcmpnlt_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqpd(const Xmm& x, const Operand& op) { vcmpnlt_uqpd(x, x, op); }$/;"	f
vcmpnlt_uqpd	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 21); }$/;"	f
vcmpnlt_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 21); }$/;"	f
vcmpnlt_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqps(const Xmm& x, const Operand& op) { vcmpnlt_uqps(x, x, op); }$/;"	f
vcmpnlt_uqps	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 21); }$/;"	f
vcmpnlt_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 21); }$/;"	f
vcmpnlt_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqsd(const Xmm& x, const Operand& op) { vcmpnlt_uqsd(x, x, op); }$/;"	f
vcmpnlt_uqsd	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 21); }$/;"	f
vcmpnlt_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 21); }$/;"	f
vcmpnlt_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqss(const Xmm& x, const Operand& op) { vcmpnlt_uqss(x, x, op); }$/;"	f
vcmpnlt_uqss	xbyak/xbyak_mnemonic.h	/^void vcmpnlt_uqss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 21); }$/;"	f
vcmpnltpd	xbyak/xbyak_mnemonic.h	/^void vcmpnltpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 5); }$/;"	f
vcmpnltpd	xbyak/xbyak_mnemonic.h	/^void vcmpnltpd(const Xmm& x, const Operand& op) { vcmpnltpd(x, x, op); }$/;"	f
vcmpnltpd	xbyak/xbyak_mnemonic.h	/^void vcmpnltpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 5); }$/;"	f
vcmpnltps	xbyak/xbyak_mnemonic.h	/^void vcmpnltps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 5); }$/;"	f
vcmpnltps	xbyak/xbyak_mnemonic.h	/^void vcmpnltps(const Xmm& x, const Operand& op) { vcmpnltps(x, x, op); }$/;"	f
vcmpnltps	xbyak/xbyak_mnemonic.h	/^void vcmpnltps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 5); }$/;"	f
vcmpnltsd	xbyak/xbyak_mnemonic.h	/^void vcmpnltsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 5); }$/;"	f
vcmpnltsd	xbyak/xbyak_mnemonic.h	/^void vcmpnltsd(const Xmm& x, const Operand& op) { vcmpnltsd(x, x, op); }$/;"	f
vcmpnltsd	xbyak/xbyak_mnemonic.h	/^void vcmpnltsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 5); }$/;"	f
vcmpnltss	xbyak/xbyak_mnemonic.h	/^void vcmpnltss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 5); }$/;"	f
vcmpnltss	xbyak/xbyak_mnemonic.h	/^void vcmpnltss(const Xmm& x, const Operand& op) { vcmpnltss(x, x, op); }$/;"	f
vcmpnltss	xbyak/xbyak_mnemonic.h	/^void vcmpnltss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 5); }$/;"	f
vcmpord_spd	xbyak/xbyak_mnemonic.h	/^void vcmpord_spd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 23); }$/;"	f
vcmpord_spd	xbyak/xbyak_mnemonic.h	/^void vcmpord_spd(const Xmm& x, const Operand& op) { vcmpord_spd(x, x, op); }$/;"	f
vcmpord_spd	xbyak/xbyak_mnemonic.h	/^void vcmpord_spd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 23); }$/;"	f
vcmpord_sps	xbyak/xbyak_mnemonic.h	/^void vcmpord_sps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 23); }$/;"	f
vcmpord_sps	xbyak/xbyak_mnemonic.h	/^void vcmpord_sps(const Xmm& x, const Operand& op) { vcmpord_sps(x, x, op); }$/;"	f
vcmpord_sps	xbyak/xbyak_mnemonic.h	/^void vcmpord_sps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 23); }$/;"	f
vcmpord_ssd	xbyak/xbyak_mnemonic.h	/^void vcmpord_ssd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 23); }$/;"	f
vcmpord_ssd	xbyak/xbyak_mnemonic.h	/^void vcmpord_ssd(const Xmm& x, const Operand& op) { vcmpord_ssd(x, x, op); }$/;"	f
vcmpord_ssd	xbyak/xbyak_mnemonic.h	/^void vcmpord_ssd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 23); }$/;"	f
vcmpord_sss	xbyak/xbyak_mnemonic.h	/^void vcmpord_sss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 23); }$/;"	f
vcmpord_sss	xbyak/xbyak_mnemonic.h	/^void vcmpord_sss(const Xmm& x, const Operand& op) { vcmpord_sss(x, x, op); }$/;"	f
vcmpord_sss	xbyak/xbyak_mnemonic.h	/^void vcmpord_sss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 23); }$/;"	f
vcmpordpd	xbyak/xbyak_mnemonic.h	/^void vcmpordpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 7); }$/;"	f
vcmpordpd	xbyak/xbyak_mnemonic.h	/^void vcmpordpd(const Xmm& x, const Operand& op) { vcmpordpd(x, x, op); }$/;"	f
vcmpordpd	xbyak/xbyak_mnemonic.h	/^void vcmpordpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 7); }$/;"	f
vcmpordps	xbyak/xbyak_mnemonic.h	/^void vcmpordps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 7); }$/;"	f
vcmpordps	xbyak/xbyak_mnemonic.h	/^void vcmpordps(const Xmm& x, const Operand& op) { vcmpordps(x, x, op); }$/;"	f
vcmpordps	xbyak/xbyak_mnemonic.h	/^void vcmpordps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 7); }$/;"	f
vcmpordsd	xbyak/xbyak_mnemonic.h	/^void vcmpordsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 7); }$/;"	f
vcmpordsd	xbyak/xbyak_mnemonic.h	/^void vcmpordsd(const Xmm& x, const Operand& op) { vcmpordsd(x, x, op); }$/;"	f
vcmpordsd	xbyak/xbyak_mnemonic.h	/^void vcmpordsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 7); }$/;"	f
vcmpordss	xbyak/xbyak_mnemonic.h	/^void vcmpordss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 7); }$/;"	f
vcmpordss	xbyak/xbyak_mnemonic.h	/^void vcmpordss(const Xmm& x, const Operand& op) { vcmpordss(x, x, op); }$/;"	f
vcmpordss	xbyak/xbyak_mnemonic.h	/^void vcmpordss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 7); }$/;"	f
vcmppd	xbyak/xbyak_mnemonic.h	/^void vcmppd(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0xC2, imm); }$/;"	f
vcmppd	xbyak/xbyak_mnemonic.h	/^void vcmppd(const Xmm& x, const Operand& op, uint8_t imm) { vcmppd(x, x, op, imm); }$/;"	f
vcmppd	xbyak/xbyak_mnemonic.h	/^void vcmppd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0xC2, imm); }$/;"	f
vcmpph	xbyak/xbyak_mnemonic.h	/^void vcmpph(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B16, 0xC2, imm); }$/;"	f
vcmpps	xbyak/xbyak_mnemonic.h	/^void vcmpps(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_0F | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0xC2, imm); }$/;"	f
vcmpps	xbyak/xbyak_mnemonic.h	/^void vcmpps(const Xmm& x, const Operand& op, uint8_t imm) { vcmpps(x, x, op, imm); }$/;"	f
vcmpps	xbyak/xbyak_mnemonic.h	/^void vcmpps(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_0F | T_YMM, 0xC2, imm); }$/;"	f
vcmpsd	xbyak/xbyak_mnemonic.h	/^void vcmpsd(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_N8 | T_F2 | T_0F | T_EW1 | T_SAE_Z | T_MUST_EVEX, 0xC2, imm); }$/;"	f
vcmpsd	xbyak/xbyak_mnemonic.h	/^void vcmpsd(const Xmm& x, const Operand& op, uint8_t imm) { vcmpsd(x, x, op, imm); }$/;"	f
vcmpsd	xbyak/xbyak_mnemonic.h	/^void vcmpsd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_F2 | T_0F, 0xC2, imm); }$/;"	f
vcmpsh	xbyak/xbyak_mnemonic.h	/^void vcmpsh(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_N2 | T_F3 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0xC2, imm); }$/;"	f
vcmpss	xbyak/xbyak_mnemonic.h	/^void vcmpss(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_N4 | T_F3 | T_0F | T_EW0 | T_SAE_Z | T_MUST_EVEX, 0xC2, imm); }$/;"	f
vcmpss	xbyak/xbyak_mnemonic.h	/^void vcmpss(const Xmm& x, const Operand& op, uint8_t imm) { vcmpss(x, x, op, imm); }$/;"	f
vcmpss	xbyak/xbyak_mnemonic.h	/^void vcmpss(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_0F, 0xC2, imm); }$/;"	f
vcmptrue_uspd	xbyak/xbyak_mnemonic.h	/^void vcmptrue_uspd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 31); }$/;"	f
vcmptrue_uspd	xbyak/xbyak_mnemonic.h	/^void vcmptrue_uspd(const Xmm& x, const Operand& op) { vcmptrue_uspd(x, x, op); }$/;"	f
vcmptrue_uspd	xbyak/xbyak_mnemonic.h	/^void vcmptrue_uspd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 31); }$/;"	f
vcmptrue_usps	xbyak/xbyak_mnemonic.h	/^void vcmptrue_usps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 31); }$/;"	f
vcmptrue_usps	xbyak/xbyak_mnemonic.h	/^void vcmptrue_usps(const Xmm& x, const Operand& op) { vcmptrue_usps(x, x, op); }$/;"	f
vcmptrue_usps	xbyak/xbyak_mnemonic.h	/^void vcmptrue_usps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 31); }$/;"	f
vcmptrue_ussd	xbyak/xbyak_mnemonic.h	/^void vcmptrue_ussd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 31); }$/;"	f
vcmptrue_ussd	xbyak/xbyak_mnemonic.h	/^void vcmptrue_ussd(const Xmm& x, const Operand& op) { vcmptrue_ussd(x, x, op); }$/;"	f
vcmptrue_ussd	xbyak/xbyak_mnemonic.h	/^void vcmptrue_ussd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 31); }$/;"	f
vcmptrue_usss	xbyak/xbyak_mnemonic.h	/^void vcmptrue_usss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 31); }$/;"	f
vcmptrue_usss	xbyak/xbyak_mnemonic.h	/^void vcmptrue_usss(const Xmm& x, const Operand& op) { vcmptrue_usss(x, x, op); }$/;"	f
vcmptrue_usss	xbyak/xbyak_mnemonic.h	/^void vcmptrue_usss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 31); }$/;"	f
vcmptruepd	xbyak/xbyak_mnemonic.h	/^void vcmptruepd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 15); }$/;"	f
vcmptruepd	xbyak/xbyak_mnemonic.h	/^void vcmptruepd(const Xmm& x, const Operand& op) { vcmptruepd(x, x, op); }$/;"	f
vcmptruepd	xbyak/xbyak_mnemonic.h	/^void vcmptruepd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 15); }$/;"	f
vcmptrueps	xbyak/xbyak_mnemonic.h	/^void vcmptrueps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 15); }$/;"	f
vcmptrueps	xbyak/xbyak_mnemonic.h	/^void vcmptrueps(const Xmm& x, const Operand& op) { vcmptrueps(x, x, op); }$/;"	f
vcmptrueps	xbyak/xbyak_mnemonic.h	/^void vcmptrueps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 15); }$/;"	f
vcmptruesd	xbyak/xbyak_mnemonic.h	/^void vcmptruesd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 15); }$/;"	f
vcmptruesd	xbyak/xbyak_mnemonic.h	/^void vcmptruesd(const Xmm& x, const Operand& op) { vcmptruesd(x, x, op); }$/;"	f
vcmptruesd	xbyak/xbyak_mnemonic.h	/^void vcmptruesd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 15); }$/;"	f
vcmptruess	xbyak/xbyak_mnemonic.h	/^void vcmptruess(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 15); }$/;"	f
vcmptruess	xbyak/xbyak_mnemonic.h	/^void vcmptruess(const Xmm& x, const Operand& op) { vcmptruess(x, x, op); }$/;"	f
vcmptruess	xbyak/xbyak_mnemonic.h	/^void vcmptruess(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 15); }$/;"	f
vcmpunord_spd	xbyak/xbyak_mnemonic.h	/^void vcmpunord_spd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 19); }$/;"	f
vcmpunord_spd	xbyak/xbyak_mnemonic.h	/^void vcmpunord_spd(const Xmm& x, const Operand& op) { vcmpunord_spd(x, x, op); }$/;"	f
vcmpunord_spd	xbyak/xbyak_mnemonic.h	/^void vcmpunord_spd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 19); }$/;"	f
vcmpunord_sps	xbyak/xbyak_mnemonic.h	/^void vcmpunord_sps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 19); }$/;"	f
vcmpunord_sps	xbyak/xbyak_mnemonic.h	/^void vcmpunord_sps(const Xmm& x, const Operand& op) { vcmpunord_sps(x, x, op); }$/;"	f
vcmpunord_sps	xbyak/xbyak_mnemonic.h	/^void vcmpunord_sps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 19); }$/;"	f
vcmpunord_ssd	xbyak/xbyak_mnemonic.h	/^void vcmpunord_ssd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 19); }$/;"	f
vcmpunord_ssd	xbyak/xbyak_mnemonic.h	/^void vcmpunord_ssd(const Xmm& x, const Operand& op) { vcmpunord_ssd(x, x, op); }$/;"	f
vcmpunord_ssd	xbyak/xbyak_mnemonic.h	/^void vcmpunord_ssd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 19); }$/;"	f
vcmpunord_sss	xbyak/xbyak_mnemonic.h	/^void vcmpunord_sss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 19); }$/;"	f
vcmpunord_sss	xbyak/xbyak_mnemonic.h	/^void vcmpunord_sss(const Xmm& x, const Operand& op) { vcmpunord_sss(x, x, op); }$/;"	f
vcmpunord_sss	xbyak/xbyak_mnemonic.h	/^void vcmpunord_sss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 19); }$/;"	f
vcmpunordpd	xbyak/xbyak_mnemonic.h	/^void vcmpunordpd(const Opmask& k, const Xmm& x, const Operand& op) { vcmppd(k, x, op, 3); }$/;"	f
vcmpunordpd	xbyak/xbyak_mnemonic.h	/^void vcmpunordpd(const Xmm& x, const Operand& op) { vcmpunordpd(x, x, op); }$/;"	f
vcmpunordpd	xbyak/xbyak_mnemonic.h	/^void vcmpunordpd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmppd(x1, x2, op, 3); }$/;"	f
vcmpunordps	xbyak/xbyak_mnemonic.h	/^void vcmpunordps(const Opmask& k, const Xmm& x, const Operand& op) { vcmpps(k, x, op, 3); }$/;"	f
vcmpunordps	xbyak/xbyak_mnemonic.h	/^void vcmpunordps(const Xmm& x, const Operand& op) { vcmpunordps(x, x, op); }$/;"	f
vcmpunordps	xbyak/xbyak_mnemonic.h	/^void vcmpunordps(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpps(x1, x2, op, 3); }$/;"	f
vcmpunordsd	xbyak/xbyak_mnemonic.h	/^void vcmpunordsd(const Opmask& k, const Xmm& x, const Operand& op) { vcmpsd(k, x, op, 3); }$/;"	f
vcmpunordsd	xbyak/xbyak_mnemonic.h	/^void vcmpunordsd(const Xmm& x, const Operand& op) { vcmpunordsd(x, x, op); }$/;"	f
vcmpunordsd	xbyak/xbyak_mnemonic.h	/^void vcmpunordsd(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpsd(x1, x2, op, 3); }$/;"	f
vcmpunordss	xbyak/xbyak_mnemonic.h	/^void vcmpunordss(const Opmask& k, const Xmm& x, const Operand& op) { vcmpss(k, x, op, 3); }$/;"	f
vcmpunordss	xbyak/xbyak_mnemonic.h	/^void vcmpunordss(const Xmm& x, const Operand& op) { vcmpunordss(x, x, op); }$/;"	f
vcmpunordss	xbyak/xbyak_mnemonic.h	/^void vcmpunordss(const Xmm& x1, const Xmm& x2, const Operand& op) { vcmpss(x1, x2, op, 3); }$/;"	f
vcomisd	xbyak/xbyak_mnemonic.h	/^void vcomisd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_66 | T_0F | T_EW1 | T_EVEX | T_SAE_X, 0x2F); }$/;"	f
vcomish	xbyak/xbyak_mnemonic.h	/^void vcomish(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_MAP5 | T_MUST_EVEX | T_EW0 | T_SAE_X | T_N2, 0x2F); }$/;"	f
vcomiss	xbyak/xbyak_mnemonic.h	/^void vcomiss(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N4 | T_0F | T_EW0 | T_EVEX | T_SAE_X, 0x2F); }$/;"	f
vcompressb	xbyak/xbyak_mnemonic.h	/^void vcompressb(const Operand& op, const Xmm& x) { opAVX_X_XM_IMM(x, op, T_N1 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x63); }$/;"	f
vcompresspd	xbyak/xbyak_mnemonic.h	/^void vcompresspd(const Operand& op, const Xmm& x) { opAVX_X_XM_IMM(x, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x8A); }$/;"	f
vcompressps	xbyak/xbyak_mnemonic.h	/^void vcompressps(const Operand& op, const Xmm& x) { opAVX_X_XM_IMM(x, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x8A); }$/;"	f
vcompressw	xbyak/xbyak_mnemonic.h	/^void vcompressw(const Operand& op, const Xmm& x) { opAVX_X_XM_IMM(x, op, T_N2 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x63); }$/;"	f
vcvtdq2pd	xbyak/xbyak_mnemonic.h	/^void vcvtdq2pd(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_0F | T_F3 | T_YMM | T_EVEX | T_EW0 | T_B32 | T_N8 | T_N_VL, 0xE6); }$/;"	f
vcvtdq2ph	xbyak/xbyak_mnemonic.h	/^void vcvtdq2ph(const Xmm& x, const Operand& op) { checkCvt4(x, op); opCvt(x, op, T_N16 | T_N_VL | T_MAP5 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0x5B); }$/;"	f
vcvtdq2ps	xbyak/xbyak_mnemonic.h	/^void vcvtdq2ps(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x5B); }$/;"	f
vcvtne2ps2bf16	xbyak/xbyak_mnemonic.h	/^void vcvtne2ps2bf16(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F2 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x72); }$/;"	f
vcvtneebf162ps	xbyak/xbyak_mnemonic.h	/^void vcvtneebf162ps(const Xmm& x, const Address& addr) { opVex(x, 0, addr, T_F3 | T_0F38 | T_W0 | T_YMM, 0xB0); }$/;"	f
vcvtneeph2ps	xbyak/xbyak_mnemonic.h	/^void vcvtneeph2ps(const Xmm& x, const Address& addr) { opVex(x, 0, addr, T_66 | T_0F38 | T_W0 | T_YMM, 0xB0); }$/;"	f
vcvtneobf162ps	xbyak/xbyak_mnemonic.h	/^void vcvtneobf162ps(const Xmm& x, const Address& addr) { opVex(x, 0, addr, T_F2 | T_0F38 | T_W0 | T_YMM, 0xB0); }$/;"	f
vcvtneoph2ps	xbyak/xbyak_mnemonic.h	/^void vcvtneoph2ps(const Xmm& x, const Address& addr) { opVex(x, 0, addr, T_0F38 | T_W0 | T_YMM, 0xB0); }$/;"	f
vcvtneps2bf16	xbyak/xbyak_mnemonic.h	/^void vcvtneps2bf16(const Xmm& x, const Operand& op, PreferredEncoding encoding = DefaultEncoding) { opCvt2(x, op, T_F3 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_B32 | orEvexIf(encoding), 0x72); }$/;"	f
vcvtpd2dq	xbyak/xbyak_mnemonic.h	/^void vcvtpd2dq(const Xmm& x, const Operand& op) { opCvt2(x, op, T_0F | T_F2 | T_YMM | T_EVEX | T_EW1 | T_B64 | T_ER_Z, 0xE6); }$/;"	f
vcvtpd2ph	xbyak/xbyak_mnemonic.h	/^void vcvtpd2ph(const Xmm& x, const Operand& op) { opCvt5(x, op, T_N16 | T_N_VL | T_66 | T_MAP5 | T_EW1 | T_ER_Z | T_MUST_EVEX | T_B64, 0x5A); }$/;"	f
vcvtpd2ps	xbyak/xbyak_mnemonic.h	/^void vcvtpd2ps(const Xmm& x, const Operand& op) { opCvt2(x, op, T_0F | T_66 | T_YMM | T_EVEX | T_EW1 | T_B64 | T_ER_Z, 0x5A); }$/;"	f
vcvtpd2qq	xbyak/xbyak_mnemonic.h	/^void vcvtpd2qq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0x7B); }$/;"	f
vcvtpd2udq	xbyak/xbyak_mnemonic.h	/^void vcvtpd2udq(const Xmm& x, const Operand& op) { opCvt2(x, op, T_0F | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0x79); }$/;"	f
vcvtpd2uqq	xbyak/xbyak_mnemonic.h	/^void vcvtpd2uqq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0x79); }$/;"	f
vcvtph2dq	xbyak/xbyak_mnemonic.h	/^void vcvtph2dq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_66 | T_MAP5 | T_EW0 | T_YMM | T_ER_Y | T_MUST_EVEX | T_B16, 0x5B); }$/;"	f
vcvtph2pd	xbyak/xbyak_mnemonic.h	/^void vcvtph2pd(const Xmm& x, const Operand& op) { if (!op.isXMM() && !op.isMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(x, 0, op, T_N4 | T_N_VL | T_MAP5 | T_EW0 | T_YMM | T_SAE_X | T_MUST_EVEX | T_B16, 0x5A); }$/;"	f
vcvtph2ps	xbyak/xbyak_mnemonic.h	/^void vcvtph2ps(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_0F38 | T_66 | T_W0 | T_EVEX | T_EW0 | T_N8 | T_N_VL | T_SAE_Y, 0x13); }$/;"	f
vcvtph2psx	xbyak/xbyak_mnemonic.h	/^void vcvtph2psx(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_66 | T_MAP6 | T_EW0 | T_YMM | T_SAE_Y | T_MUST_EVEX | T_B16, 0x13); }$/;"	f
vcvtph2qq	xbyak/xbyak_mnemonic.h	/^void vcvtph2qq(const Xmm& x, const Operand& op) { if (!op.isXMM() && !op.isMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(x, 0, op, T_N4 | T_N_VL | T_66 | T_MAP5 | T_EW0 | T_YMM | T_ER_X | T_MUST_EVEX | T_B16, 0x7B); }$/;"	f
vcvtph2udq	xbyak/xbyak_mnemonic.h	/^void vcvtph2udq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_MAP5 | T_EW0 | T_YMM | T_ER_Y | T_MUST_EVEX | T_B16, 0x79); }$/;"	f
vcvtph2uqq	xbyak/xbyak_mnemonic.h	/^void vcvtph2uqq(const Xmm& x, const Operand& op) { if (!op.isXMM() && !op.isMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(x, 0, op, T_N4 | T_N_VL | T_66 | T_MAP5 | T_EW0 | T_YMM | T_ER_X | T_MUST_EVEX | T_B16, 0x79); }$/;"	f
vcvtph2uw	xbyak/xbyak_mnemonic.h	/^void vcvtph2uw(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_MAP5 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x7D); }$/;"	f
vcvtph2w	xbyak/xbyak_mnemonic.h	/^void vcvtph2w(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_MAP5 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x7D); }$/;"	f
vcvtps2dq	xbyak/xbyak_mnemonic.h	/^void vcvtps2dq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x5B); }$/;"	f
vcvtps2pd	xbyak/xbyak_mnemonic.h	/^void vcvtps2pd(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_0F | T_YMM | T_EVEX | T_EW0 | T_B32 | T_N8 | T_N_VL | T_SAE_Y, 0x5A); }$/;"	f
vcvtps2ph	xbyak/xbyak_mnemonic.h	/^void vcvtps2ph(const Operand& op, const Xmm& x, uint8_t imm) { checkCvt1(x, op); opVex(x, 0, op, T_0F3A | T_66 | T_W0 | T_EVEX | T_EW0 | T_N8 | T_N_VL | T_SAE_Y | T_M_K, 0x1D, imm); }$/;"	f
vcvtps2phx	xbyak/xbyak_mnemonic.h	/^void vcvtps2phx(const Xmm& x, const Operand& op) { checkCvt4(x, op); opCvt(x, op, T_N16 | T_N_VL | T_66 | T_MAP5 | T_EW0 | T_ER_Z | T_MUST_EVEX | T_B32, 0x1D); }$/;"	f
vcvtps2qq	xbyak/xbyak_mnemonic.h	/^void vcvtps2qq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_66 | T_0F | T_EW0 | T_YMM | T_ER_Y | T_MUST_EVEX | T_B32, 0x7B); }$/;"	f
vcvtps2udq	xbyak/xbyak_mnemonic.h	/^void vcvtps2udq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_0F | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0x79); }$/;"	f
vcvtps2uqq	xbyak/xbyak_mnemonic.h	/^void vcvtps2uqq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_66 | T_0F | T_EW0 | T_YMM | T_ER_Y | T_MUST_EVEX | T_B32, 0x79); }$/;"	f
vcvtqq2pd	xbyak/xbyak_mnemonic.h	/^void vcvtqq2pd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F3 | T_0F | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0xE6); }$/;"	f
vcvtqq2ph	xbyak/xbyak_mnemonic.h	/^void vcvtqq2ph(const Xmm& x, const Operand& op) { opCvt5(x, op, T_N16 | T_N_VL | T_MAP5 | T_EW1 | T_ER_Z | T_MUST_EVEX | T_B64, 0x5B); }$/;"	f
vcvtqq2ps	xbyak/xbyak_mnemonic.h	/^void vcvtqq2ps(const Xmm& x, const Operand& op) { opCvt2(x, op, T_0F | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0x5B); }$/;"	f
vcvtsd2sh	xbyak/xbyak_mnemonic.h	/^void vcvtsd2sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_F2 | T_MAP5 | T_EW1 | T_ER_X | T_MUST_EVEX, 0x5A); }$/;"	f
vcvtsd2si	xbyak/xbyak_mnemonic.h	/^void vcvtsd2si(const Reg32& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F2 | T_W0 | T_EVEX | T_EW0 | T_N4 | T_ER_X, 0x2D); }$/;"	f
vcvtsd2si	xbyak/xbyak_mnemonic.h	/^void vcvtsd2si(const Reg64& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F2 | T_W1 | T_EVEX | T_EW1 | T_N4 | T_ER_X, 0x2D); }$/;"	f
vcvtsd2ss	xbyak/xbyak_mnemonic.h	/^void vcvtsd2ss(const Xmm& x, const Operand& op) { vcvtsd2ss(x, x, op); }$/;"	f
vcvtsd2ss	xbyak/xbyak_mnemonic.h	/^void vcvtsd2ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_F2 | T_0F | T_EW1 | T_EVEX | T_ER_X, 0x5A); }$/;"	f
vcvtsd2usi	xbyak/xbyak_mnemonic.h	/^void vcvtsd2usi(const Reg32e& r, const Operand& op) { int type = (T_N8 | T_F2 | T_0F | T_ER_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x79); }$/;"	f
vcvtsh2sd	xbyak/xbyak_mnemonic.h	/^void vcvtsh2sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_F3 | T_MAP5 | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x5A); }$/;"	f
vcvtsh2si	xbyak/xbyak_mnemonic.h	/^void vcvtsh2si(const Reg32e& r, const Operand& op) { int type = (T_N2 | T_F3 | T_MAP5 | T_ER_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x2D); }$/;"	f
vcvtsh2ss	xbyak/xbyak_mnemonic.h	/^void vcvtsh2ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_MAP6 | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x13); }$/;"	f
vcvtsh2usi	xbyak/xbyak_mnemonic.h	/^void vcvtsh2usi(const Reg32e& r, const Operand& op) { int type = (T_N2 | T_F3 | T_MAP5 | T_ER_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x79); }$/;"	f
vcvtsi2sd	xbyak/xbyak_mnemonic.h	/^void vcvtsi2sd(const Xmm& x, const Operand& op) { vcvtsi2sd(x, x, op); }$/;"	f
vcvtsi2sd	xbyak/xbyak_mnemonic.h	/^void vcvtsi2sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opCvt3(x1, x2, op, T_0F | T_F2 | T_EVEX, T_W1 | T_EW1 | T_ER_X | T_N8, T_W0 | T_EW0 | T_N4, 0x2A); }$/;"	f
vcvtsi2sh	xbyak/xbyak_mnemonic.h	/^void vcvtsi2sh(const Xmm& x1, const Xmm& x2, const Operand& op) { if (!(x1.isXMM() && x2.isXMM() && op.isBit(32|64))) XBYAK_THROW(ERR_BAD_COMBINATION) int type = (T_F3 | T_MAP5 | T_ER_R | T_MUST_EVEX | T_M_K) | (op.isBit(32) ? (T_EW0 | T_N4) : (T_EW1 | T_N8)); opVex(x1, &x2, op, type, 0x2A); }$/;"	f
vcvtsi2ss	xbyak/xbyak_mnemonic.h	/^void vcvtsi2ss(const Xmm& x, const Operand& op) { vcvtsi2ss(x, x, op); }$/;"	f
vcvtsi2ss	xbyak/xbyak_mnemonic.h	/^void vcvtsi2ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opCvt3(x1, x2, op, T_0F | T_F3 | T_EVEX | T_ER_X, T_W1 | T_EW1 | T_N8, T_W0 | T_EW0 | T_N4, 0x2A); }$/;"	f
vcvtss2sd	xbyak/xbyak_mnemonic.h	/^void vcvtss2sd(const Xmm& x, const Operand& op) { vcvtss2sd(x, x, op); }$/;"	f
vcvtss2sd	xbyak/xbyak_mnemonic.h	/^void vcvtss2sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_F3 | T_0F | T_EW0 | T_EVEX | T_SAE_X, 0x5A); }$/;"	f
vcvtss2sh	xbyak/xbyak_mnemonic.h	/^void vcvtss2sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_MAP5 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x1D); }$/;"	f
vcvtss2si	xbyak/xbyak_mnemonic.h	/^void vcvtss2si(const Reg32& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F3 | T_W0 | T_EVEX | T_EW0 | T_ER_X | T_N8, 0x2D); }$/;"	f
vcvtss2si	xbyak/xbyak_mnemonic.h	/^void vcvtss2si(const Reg64& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F3 | T_W1 | T_EVEX | T_EW1 | T_ER_X | T_N8, 0x2D); }$/;"	f
vcvtss2usi	xbyak/xbyak_mnemonic.h	/^void vcvtss2usi(const Reg32e& r, const Operand& op) { int type = (T_N4 | T_F3 | T_0F | T_ER_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x79); }$/;"	f
vcvttpd2dq	xbyak/xbyak_mnemonic.h	/^void vcvttpd2dq(const Xmm& x, const Operand& op) { opCvt2(x, op, T_66 | T_0F | T_YMM | T_EVEX |T_EW1 | T_B64 | T_ER_Z, 0xE6); }$/;"	f
vcvttpd2qq	xbyak/xbyak_mnemonic.h	/^void vcvttpd2qq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x7A); }$/;"	f
vcvttpd2udq	xbyak/xbyak_mnemonic.h	/^void vcvttpd2udq(const Xmm& x, const Operand& op) { opCvt2(x, op, T_0F | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x78); }$/;"	f
vcvttpd2uqq	xbyak/xbyak_mnemonic.h	/^void vcvttpd2uqq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x78); }$/;"	f
vcvttph2dq	xbyak/xbyak_mnemonic.h	/^void vcvttph2dq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_F3 | T_MAP5 | T_EW0 | T_YMM | T_SAE_Y | T_MUST_EVEX | T_B16, 0x5B); }$/;"	f
vcvttph2qq	xbyak/xbyak_mnemonic.h	/^void vcvttph2qq(const Xmm& x, const Operand& op) { if (!op.isXMM() && !op.isMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(x, 0, op, T_N4 | T_N_VL | T_66 | T_MAP5 | T_EW0 | T_YMM | T_SAE_X | T_MUST_EVEX | T_B16, 0x7A); }$/;"	f
vcvttph2udq	xbyak/xbyak_mnemonic.h	/^void vcvttph2udq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_MAP5 | T_EW0 | T_YMM | T_SAE_Y | T_MUST_EVEX | T_B16, 0x78); }$/;"	f
vcvttph2uqq	xbyak/xbyak_mnemonic.h	/^void vcvttph2uqq(const Xmm& x, const Operand& op) { if (!op.isXMM() && !op.isMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(x, 0, op, T_N4 | T_N_VL | T_66 | T_MAP5 | T_EW0 | T_YMM | T_SAE_X | T_MUST_EVEX | T_B16, 0x78); }$/;"	f
vcvttph2uw	xbyak/xbyak_mnemonic.h	/^void vcvttph2uw(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_MAP5 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B16, 0x7C); }$/;"	f
vcvttph2w	xbyak/xbyak_mnemonic.h	/^void vcvttph2w(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_MAP5 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B16, 0x7C); }$/;"	f
vcvttps2dq	xbyak/xbyak_mnemonic.h	/^void vcvttps2dq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_F3 | T_0F | T_EW0 | T_YMM | T_EVEX | T_SAE_Z | T_B32, 0x5B); }$/;"	f
vcvttps2qq	xbyak/xbyak_mnemonic.h	/^void vcvttps2qq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_66 | T_0F | T_EW0 | T_YMM | T_SAE_Y | T_MUST_EVEX | T_B32, 0x7A); }$/;"	f
vcvttps2udq	xbyak/xbyak_mnemonic.h	/^void vcvttps2udq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_0F | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x78); }$/;"	f
vcvttps2uqq	xbyak/xbyak_mnemonic.h	/^void vcvttps2uqq(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_66 | T_0F | T_EW0 | T_YMM | T_SAE_Y | T_MUST_EVEX | T_B32, 0x78); }$/;"	f
vcvttsd2si	xbyak/xbyak_mnemonic.h	/^void vcvttsd2si(const Reg32& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F2 | T_W0 | T_EVEX | T_EW0 | T_N4 | T_SAE_X, 0x2C); }$/;"	f
vcvttsd2si	xbyak/xbyak_mnemonic.h	/^void vcvttsd2si(const Reg64& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F2 | T_W1 | T_EVEX | T_EW1 | T_N4 | T_SAE_X, 0x2C); }$/;"	f
vcvttsd2usi	xbyak/xbyak_mnemonic.h	/^void vcvttsd2usi(const Reg32e& r, const Operand& op) { int type = (T_N8 | T_F2 | T_0F | T_SAE_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x78); }$/;"	f
vcvttsh2si	xbyak/xbyak_mnemonic.h	/^void vcvttsh2si(const Reg32e& r, const Operand& op) { int type = (T_N2 | T_F3 | T_MAP5 | T_EW0 | T_SAE_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x2C); }$/;"	f
vcvttsh2usi	xbyak/xbyak_mnemonic.h	/^void vcvttsh2usi(const Reg32e& r, const Operand& op) { int type = (T_N2 | T_F3 | T_MAP5 | T_EW0 | T_SAE_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x78); }$/;"	f
vcvttss2si	xbyak/xbyak_mnemonic.h	/^void vcvttss2si(const Reg32& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F3 | T_W0 | T_EVEX | T_EW0 | T_SAE_X | T_N8, 0x2C); }$/;"	f
vcvttss2si	xbyak/xbyak_mnemonic.h	/^void vcvttss2si(const Reg64& r, const Operand& op) { opAVX_X_X_XM(Xmm(r.getIdx()), xm0, op, T_0F | T_F3 | T_W1 | T_EVEX | T_EW1 | T_SAE_X | T_N8, 0x2C); }$/;"	f
vcvttss2usi	xbyak/xbyak_mnemonic.h	/^void vcvttss2usi(const Reg32e& r, const Operand& op) { int type = (T_N4 | T_F3 | T_0F | T_SAE_X | T_MUST_EVEX) | (r.isREG(64) ? T_EW1 : T_EW0); opVex(r, &xm0, op, type, 0x78); }$/;"	f
vcvtudq2pd	xbyak/xbyak_mnemonic.h	/^void vcvtudq2pd(const Xmm& x, const Operand& op) { checkCvt1(x, op); opVex(x, 0, op, T_N8 | T_N_VL | T_F3 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x7A); }$/;"	f
vcvtudq2ph	xbyak/xbyak_mnemonic.h	/^void vcvtudq2ph(const Xmm& x, const Operand& op) { checkCvt4(x, op); opCvt(x, op, T_N16 | T_N_VL | T_F2 | T_MAP5 | T_EW0 | T_ER_Z | T_MUST_EVEX | T_B32, 0x7A); }$/;"	f
vcvtudq2ps	xbyak/xbyak_mnemonic.h	/^void vcvtudq2ps(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F2 | T_0F | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0x7A); }$/;"	f
vcvtuqq2pd	xbyak/xbyak_mnemonic.h	/^void vcvtuqq2pd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F3 | T_0F | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0x7A); }$/;"	f
vcvtuqq2ph	xbyak/xbyak_mnemonic.h	/^void vcvtuqq2ph(const Xmm& x, const Operand& op) { opCvt5(x, op, T_N16 | T_N_VL | T_F2 | T_MAP5 | T_EW1 | T_ER_Z | T_MUST_EVEX | T_B64, 0x7A); }$/;"	f
vcvtuqq2ps	xbyak/xbyak_mnemonic.h	/^void vcvtuqq2ps(const Xmm& x, const Operand& op) { opCvt2(x, op, T_F2 | T_0F | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0x7A); }$/;"	f
vcvtusi2sd	xbyak/xbyak_mnemonic.h	/^void vcvtusi2sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opCvt3(x1, x2, op, T_F2 | T_0F | T_MUST_EVEX, T_W1 | T_EW1 | T_ER_X | T_N8, T_W0 | T_EW0 | T_N4, 0x7B); }$/;"	f
vcvtusi2sh	xbyak/xbyak_mnemonic.h	/^void vcvtusi2sh(const Xmm& x1, const Xmm& x2, const Operand& op) { if (!(x1.isXMM() && x2.isXMM() && op.isBit(32|64))) XBYAK_THROW(ERR_BAD_COMBINATION) int type = (T_F3 | T_MAP5 | T_ER_R | T_MUST_EVEX | T_M_K) | (op.isBit(32) ? (T_EW0 | T_N4) : (T_EW1 | T_N8)); opVex(x1, &x2, op, type, 0x7B); }$/;"	f
vcvtusi2ss	xbyak/xbyak_mnemonic.h	/^void vcvtusi2ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opCvt3(x1, x2, op, T_F3 | T_0F | T_MUST_EVEX | T_ER_X, T_W1 | T_EW1 | T_N8, T_W0 | T_EW0 | T_N4, 0x7B); }$/;"	f
vcvtuw2ph	xbyak/xbyak_mnemonic.h	/^void vcvtuw2ph(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F2 | T_MAP5 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x7D); }$/;"	f
vcvtw2ph	xbyak/xbyak_mnemonic.h	/^void vcvtw2ph(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F3 | T_MAP5 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x7D); }$/;"	f
vdbpsadbw	xbyak/xbyak_mnemonic.h	/^void vdbpsadbw(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x42, imm); }$/;"	f
vdivpd	xbyak/xbyak_mnemonic.h	/^void vdivpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x5E); }$/;"	f
vdivph	xbyak/xbyak_mnemonic.h	/^void vdivph(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_EW0 | T_YMM | T_MUST_EVEX | T_ER_Z | T_B16, 0x5E); }$/;"	f
vdivps	xbyak/xbyak_mnemonic.h	/^void vdivps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x5E); }$/;"	f
vdivsd	xbyak/xbyak_mnemonic.h	/^void vdivsd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F2 | T_EW1 | T_EVEX | T_ER_X | T_N8, 0x5E); }$/;"	f
vdivsh	xbyak/xbyak_mnemonic.h	/^void vdivsh(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_F3 | T_EW0 | T_MUST_EVEX | T_ER_X | T_N2, 0x5E); }$/;"	f
vdivss	xbyak/xbyak_mnemonic.h	/^void vdivss(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F3 | T_EW0 | T_EVEX | T_ER_X | T_N4, 0x5E); }$/;"	f
vdpbf16ps	xbyak/xbyak_mnemonic.h	/^void vdpbf16ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x52); }$/;"	f
vdppd	xbyak/xbyak_mnemonic.h	/^void vdppd(const Xmm& x, const Operand& op, uint8_t imm) { vdppd(x, x, op, imm); }$/;"	f
vdppd	xbyak/xbyak_mnemonic.h	/^void vdppd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0, 0x41, imm); }$/;"	f
vdpps	xbyak/xbyak_mnemonic.h	/^void vdpps(const Xmm& x, const Operand& op, uint8_t imm) { vdpps(x, x, op, imm); }$/;"	f
vdpps	xbyak/xbyak_mnemonic.h	/^void vdpps(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0 | T_YMM, 0x40, imm); }$/;"	f
vec_broadcast_epi32_1_2	kernel_avx512f.h	/^static inline void vec_broadcast_epi32_1_2(__m512i* dst2regs, __m512i* src1regs) {$/;"	f	namespace:jblas::kernel::avx512f
vec_broadcast_epi32_2_4	kernel_avx512f.h	/^static inline void vec_broadcast_epi32_2_4(__m512i* dst4regs, __m512i* src2regs) {$/;"	f	namespace:jblas::kernel::avx512f
vec_broadcast_pi8_1_2	kernel_avx512f.h	/^static inline void vec_broadcast_pi8_1_2(__m128i* dst2regs, __m128i* src1regs, __m512i idxreg) {$/;"	f	namespace:jblas::kernel::avx512f
vec_broadcast_ps_1_2	kernel_avx512f.h	/^static inline void vec_broadcast_ps_1_2(__m512* dst2regs, __m512* src1regs, __m512i idxreg) {$/;"	f	namespace:jblas::kernel::avx512f
vec_loadscalex16	kernel_avx512f.h	/^inline __m512 vec_loadscalex16(utils::bf16* ptr) {$/;"	f	namespace:jblas::kernel::avx512f
vec_loadscalex16	kernel_avx512f.h	/^static inline __m512 vec_loadscalex16(_ST* ptr) {$/;"	f	namespace:jblas::kernel::avx512f
vec_quanout_s32_u32_v16	kernel_avx512f.h	/^static inline void vec_quanout_s32_u32_v16(const int32_t* srcptr, __m512& vfactor, __m512i& vzp, __m512i& vzeros,$/;"	f	namespace:jblas::kernel::avx512f
vector_compute	kernel_jit_injector.h	/^  void vector_compute(const Xbyak::Zmm& zmm_src, int const_p_offset = 0) {$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
verify	xbyak/xbyak.h	/^	XBYAK_CONSTEXPR void verify() const$/;"	f	class:Xbyak::RegExp
verifyDuplicate	xbyak/xbyak.h	/^	int verifyDuplicate(int a, int b, int c, int err)$/;"	f	class:Xbyak::CodeGenerator
verifyER	xbyak/xbyak.h	/^	void verifyER(const Reg& r, int type) const$/;"	f	class:Xbyak::CodeGenerator
verifyMemHasSize	xbyak/xbyak.h	/^	void verifyMemHasSize(const Operand& op) const$/;"	f	class:Xbyak::CodeGenerator
verifySAE	xbyak/xbyak.h	/^	void verifySAE(const Reg& r, int type) const$/;"	f	class:Xbyak::CodeGenerator
vex	xbyak/xbyak.h	/^	void vex(const Reg& reg, const Reg& base, const Operand *v, int type, int code, bool x = false)$/;"	f	class:Xbyak::CodeGenerator
vexp2pd	xbyak/xbyak_mnemonic.h	/^void vexp2pd(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW1 | T_B64 | T_SAE_Z, 0xC8); }$/;"	f
vexp2ps	xbyak/xbyak_mnemonic.h	/^void vexp2ps(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW0 | T_B32 | T_SAE_Z, 0xC8); }$/;"	f
vexpandpd	xbyak/xbyak_mnemonic.h	/^void vexpandpd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x88); }$/;"	f
vexpandps	xbyak/xbyak_mnemonic.h	/^void vexpandps(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x88); }$/;"	f
vextractf128	xbyak/xbyak_mnemonic.h	/^void vextractf128(const Operand& op, const Ymm& y, uint8_t imm) { if (!(op.isXMEM() && y.isYMM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(y, 0, op, T_0F3A | T_66 | T_W0 | T_YMM, 0x19, imm); }$/;"	f
vextractf32x4	xbyak/xbyak_mnemonic.h	/^void vextractf32x4(const Operand& op, const Ymm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::XMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N16 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x19, imm); }$/;"	f
vextractf32x8	xbyak/xbyak_mnemonic.h	/^void vextractf32x8(const Operand& op, const Zmm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N32 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x1B, imm); }$/;"	f
vextractf64x2	xbyak/xbyak_mnemonic.h	/^void vextractf64x2(const Operand& op, const Ymm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::XMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N16 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x19, imm); }$/;"	f
vextractf64x4	xbyak/xbyak_mnemonic.h	/^void vextractf64x4(const Operand& op, const Zmm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N32 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x1B, imm); }$/;"	f
vextracti128	xbyak/xbyak_mnemonic.h	/^void vextracti128(const Operand& op, const Ymm& y, uint8_t imm) { if (!(op.isXMEM() && y.isYMM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(y, 0, op, T_0F3A | T_66 | T_W0 | T_YMM, 0x39, imm); }$/;"	f
vextracti32x4	xbyak/xbyak_mnemonic.h	/^void vextracti32x4(const Operand& op, const Ymm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::XMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N16 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x39, imm); }$/;"	f
vextracti32x8	xbyak/xbyak_mnemonic.h	/^void vextracti32x8(const Operand& op, const Zmm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N32 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x3B, imm); }$/;"	f
vextracti64x2	xbyak/xbyak_mnemonic.h	/^void vextracti64x2(const Operand& op, const Ymm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::XMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N16 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x39, imm); }$/;"	f
vextracti64x4	xbyak/xbyak_mnemonic.h	/^void vextracti64x4(const Operand& op, const Zmm& r, uint8_t imm) { if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r, 0, op, T_N32 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x3B, imm); }$/;"	f
vextractps	xbyak/xbyak_mnemonic.h	/^void vextractps(const Operand& op, const Xmm& x, uint8_t imm) { if (!((op.isREG(32) || op.isMEM()) && x.isXMM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x, 0, op, T_0F3A | T_66 | T_W0 | T_EVEX | T_N4, 0x17, imm); }$/;"	f
vfcmaddcph	xbyak/xbyak_mnemonic.h	/^void vfcmaddcph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F2 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0x56); }$/;"	f
vfcmulcph	xbyak/xbyak_mnemonic.h	/^void vfcmulcph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F2 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0xD6); }$/;"	f
vfixupimmpd	xbyak/xbyak_mnemonic.h	/^void vfixupimmpd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x54, imm); }$/;"	f
vfixupimmps	xbyak/xbyak_mnemonic.h	/^void vfixupimmps(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x54, imm); }$/;"	f
vfixupimmsd	xbyak/xbyak_mnemonic.h	/^void vfixupimmsd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F3A | T_EW1 | T_SAE_Z | T_MUST_EVEX, 0x55, imm); }$/;"	f
vfixupimmss	xbyak/xbyak_mnemonic.h	/^void vfixupimmss(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F3A | T_EW0 | T_SAE_Z | T_MUST_EVEX, 0x55, imm); }$/;"	f
vfmadd132pd	xbyak/xbyak_mnemonic.h	/^void vfmadd132pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x98); }$/;"	f
vfmadd132ph	xbyak/xbyak_mnemonic.h	/^void vfmadd132ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x98); }$/;"	f
vfmadd132ps	xbyak/xbyak_mnemonic.h	/^void vfmadd132ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x98); }$/;"	f
vfmadd132sd	xbyak/xbyak_mnemonic.h	/^void vfmadd132sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0x99); }$/;"	f
vfmadd132sh	xbyak/xbyak_mnemonic.h	/^void vfmadd132sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x99); }$/;"	f
vfmadd132ss	xbyak/xbyak_mnemonic.h	/^void vfmadd132ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0x99); }$/;"	f
vfmadd213pd	xbyak/xbyak_mnemonic.h	/^void vfmadd213pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xA8); }$/;"	f
vfmadd213ph	xbyak/xbyak_mnemonic.h	/^void vfmadd213ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xA8); }$/;"	f
vfmadd213ps	xbyak/xbyak_mnemonic.h	/^void vfmadd213ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xA8); }$/;"	f
vfmadd213sd	xbyak/xbyak_mnemonic.h	/^void vfmadd213sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xA9); }$/;"	f
vfmadd213sh	xbyak/xbyak_mnemonic.h	/^void vfmadd213sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xA9); }$/;"	f
vfmadd213ss	xbyak/xbyak_mnemonic.h	/^void vfmadd213ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xA9); }$/;"	f
vfmadd231pd	xbyak/xbyak_mnemonic.h	/^void vfmadd231pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xB8); }$/;"	f
vfmadd231ph	xbyak/xbyak_mnemonic.h	/^void vfmadd231ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xB8); }$/;"	f
vfmadd231ps	xbyak/xbyak_mnemonic.h	/^void vfmadd231ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xB8); }$/;"	f
vfmadd231sd	xbyak/xbyak_mnemonic.h	/^void vfmadd231sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xB9); }$/;"	f
vfmadd231sh	xbyak/xbyak_mnemonic.h	/^void vfmadd231sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xB9); }$/;"	f
vfmadd231ss	xbyak/xbyak_mnemonic.h	/^void vfmadd231ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xB9); }$/;"	f
vfmaddcph	xbyak/xbyak_mnemonic.h	/^void vfmaddcph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0x56); }$/;"	f
vfmaddsub132pd	xbyak/xbyak_mnemonic.h	/^void vfmaddsub132pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x96); }$/;"	f
vfmaddsub132ph	xbyak/xbyak_mnemonic.h	/^void vfmaddsub132ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x96); }$/;"	f
vfmaddsub132ps	xbyak/xbyak_mnemonic.h	/^void vfmaddsub132ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x96); }$/;"	f
vfmaddsub213pd	xbyak/xbyak_mnemonic.h	/^void vfmaddsub213pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xA6); }$/;"	f
vfmaddsub213ph	xbyak/xbyak_mnemonic.h	/^void vfmaddsub213ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xA6); }$/;"	f
vfmaddsub213ps	xbyak/xbyak_mnemonic.h	/^void vfmaddsub213ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xA6); }$/;"	f
vfmaddsub231pd	xbyak/xbyak_mnemonic.h	/^void vfmaddsub231pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xB6); }$/;"	f
vfmaddsub231ph	xbyak/xbyak_mnemonic.h	/^void vfmaddsub231ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xB6); }$/;"	f
vfmaddsub231ps	xbyak/xbyak_mnemonic.h	/^void vfmaddsub231ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xB6); }$/;"	f
vfmsub132pd	xbyak/xbyak_mnemonic.h	/^void vfmsub132pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x9A); }$/;"	f
vfmsub132ph	xbyak/xbyak_mnemonic.h	/^void vfmsub132ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x9A); }$/;"	f
vfmsub132ps	xbyak/xbyak_mnemonic.h	/^void vfmsub132ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x9A); }$/;"	f
vfmsub132sd	xbyak/xbyak_mnemonic.h	/^void vfmsub132sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0x9B); }$/;"	f
vfmsub132sh	xbyak/xbyak_mnemonic.h	/^void vfmsub132sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x9B); }$/;"	f
vfmsub132ss	xbyak/xbyak_mnemonic.h	/^void vfmsub132ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0x9B); }$/;"	f
vfmsub213pd	xbyak/xbyak_mnemonic.h	/^void vfmsub213pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xAA); }$/;"	f
vfmsub213ph	xbyak/xbyak_mnemonic.h	/^void vfmsub213ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xAA); }$/;"	f
vfmsub213ps	xbyak/xbyak_mnemonic.h	/^void vfmsub213ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xAA); }$/;"	f
vfmsub213sd	xbyak/xbyak_mnemonic.h	/^void vfmsub213sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xAB); }$/;"	f
vfmsub213sh	xbyak/xbyak_mnemonic.h	/^void vfmsub213sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xAB); }$/;"	f
vfmsub213ss	xbyak/xbyak_mnemonic.h	/^void vfmsub213ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xAB); }$/;"	f
vfmsub231pd	xbyak/xbyak_mnemonic.h	/^void vfmsub231pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xBA); }$/;"	f
vfmsub231ph	xbyak/xbyak_mnemonic.h	/^void vfmsub231ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xBA); }$/;"	f
vfmsub231ps	xbyak/xbyak_mnemonic.h	/^void vfmsub231ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xBA); }$/;"	f
vfmsub231sd	xbyak/xbyak_mnemonic.h	/^void vfmsub231sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xBB); }$/;"	f
vfmsub231sh	xbyak/xbyak_mnemonic.h	/^void vfmsub231sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xBB); }$/;"	f
vfmsub231ss	xbyak/xbyak_mnemonic.h	/^void vfmsub231ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xBB); }$/;"	f
vfmsubadd132pd	xbyak/xbyak_mnemonic.h	/^void vfmsubadd132pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x97); }$/;"	f
vfmsubadd132ph	xbyak/xbyak_mnemonic.h	/^void vfmsubadd132ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x97); }$/;"	f
vfmsubadd132ps	xbyak/xbyak_mnemonic.h	/^void vfmsubadd132ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x97); }$/;"	f
vfmsubadd213pd	xbyak/xbyak_mnemonic.h	/^void vfmsubadd213pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xA7); }$/;"	f
vfmsubadd213ph	xbyak/xbyak_mnemonic.h	/^void vfmsubadd213ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xA7); }$/;"	f
vfmsubadd213ps	xbyak/xbyak_mnemonic.h	/^void vfmsubadd213ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xA7); }$/;"	f
vfmsubadd231pd	xbyak/xbyak_mnemonic.h	/^void vfmsubadd231pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xB7); }$/;"	f
vfmsubadd231ph	xbyak/xbyak_mnemonic.h	/^void vfmsubadd231ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xB7); }$/;"	f
vfmsubadd231ps	xbyak/xbyak_mnemonic.h	/^void vfmsubadd231ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xB7); }$/;"	f
vfmulcph	xbyak/xbyak_mnemonic.h	/^void vfmulcph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0xD6); }$/;"	f
vfnmadd132pd	xbyak/xbyak_mnemonic.h	/^void vfnmadd132pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x9C); }$/;"	f
vfnmadd132ph	xbyak/xbyak_mnemonic.h	/^void vfnmadd132ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x9C); }$/;"	f
vfnmadd132ps	xbyak/xbyak_mnemonic.h	/^void vfnmadd132ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x9C); }$/;"	f
vfnmadd132sd	xbyak/xbyak_mnemonic.h	/^void vfnmadd132sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0x9D); }$/;"	f
vfnmadd132sh	xbyak/xbyak_mnemonic.h	/^void vfnmadd132sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x9D); }$/;"	f
vfnmadd132ss	xbyak/xbyak_mnemonic.h	/^void vfnmadd132ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0x9D); }$/;"	f
vfnmadd213pd	xbyak/xbyak_mnemonic.h	/^void vfnmadd213pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xAC); }$/;"	f
vfnmadd213ph	xbyak/xbyak_mnemonic.h	/^void vfnmadd213ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xAC); }$/;"	f
vfnmadd213ps	xbyak/xbyak_mnemonic.h	/^void vfnmadd213ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xAC); }$/;"	f
vfnmadd213sd	xbyak/xbyak_mnemonic.h	/^void vfnmadd213sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xAD); }$/;"	f
vfnmadd213sh	xbyak/xbyak_mnemonic.h	/^void vfnmadd213sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xAD); }$/;"	f
vfnmadd213ss	xbyak/xbyak_mnemonic.h	/^void vfnmadd213ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xAD); }$/;"	f
vfnmadd231pd	xbyak/xbyak_mnemonic.h	/^void vfnmadd231pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xBC); }$/;"	f
vfnmadd231ph	xbyak/xbyak_mnemonic.h	/^void vfnmadd231ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xBC); }$/;"	f
vfnmadd231ps	xbyak/xbyak_mnemonic.h	/^void vfnmadd231ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xBC); }$/;"	f
vfnmadd231sd	xbyak/xbyak_mnemonic.h	/^void vfnmadd231sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xBD); }$/;"	f
vfnmadd231sh	xbyak/xbyak_mnemonic.h	/^void vfnmadd231sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xBD); }$/;"	f
vfnmadd231ss	xbyak/xbyak_mnemonic.h	/^void vfnmadd231ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xBD); }$/;"	f
vfnmsub132pd	xbyak/xbyak_mnemonic.h	/^void vfnmsub132pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x9E); }$/;"	f
vfnmsub132ph	xbyak/xbyak_mnemonic.h	/^void vfnmsub132ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x9E); }$/;"	f
vfnmsub132ps	xbyak/xbyak_mnemonic.h	/^void vfnmsub132ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x9E); }$/;"	f
vfnmsub132sd	xbyak/xbyak_mnemonic.h	/^void vfnmsub132sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0x9F); }$/;"	f
vfnmsub132sh	xbyak/xbyak_mnemonic.h	/^void vfnmsub132sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x9F); }$/;"	f
vfnmsub132ss	xbyak/xbyak_mnemonic.h	/^void vfnmsub132ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0x9F); }$/;"	f
vfnmsub213pd	xbyak/xbyak_mnemonic.h	/^void vfnmsub213pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xAE); }$/;"	f
vfnmsub213ph	xbyak/xbyak_mnemonic.h	/^void vfnmsub213ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xAE); }$/;"	f
vfnmsub213ps	xbyak/xbyak_mnemonic.h	/^void vfnmsub213ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xAE); }$/;"	f
vfnmsub213sd	xbyak/xbyak_mnemonic.h	/^void vfnmsub213sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xAF); }$/;"	f
vfnmsub213sh	xbyak/xbyak_mnemonic.h	/^void vfnmsub213sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xAF); }$/;"	f
vfnmsub213ss	xbyak/xbyak_mnemonic.h	/^void vfnmsub213ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xAF); }$/;"	f
vfnmsub231pd	xbyak/xbyak_mnemonic.h	/^void vfnmsub231pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0xBE); }$/;"	f
vfnmsub231ph	xbyak/xbyak_mnemonic.h	/^void vfnmsub231ph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0xBE); }$/;"	f
vfnmsub231ps	xbyak/xbyak_mnemonic.h	/^void vfnmsub231ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0xBE); }$/;"	f
vfnmsub231sd	xbyak/xbyak_mnemonic.h	/^void vfnmsub231sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_W1 | T_EW1 | T_EVEX | T_ER_X, 0xBF); }$/;"	f
vfnmsub231sh	xbyak/xbyak_mnemonic.h	/^void vfnmsub231sh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0xBF); }$/;"	f
vfnmsub231ss	xbyak/xbyak_mnemonic.h	/^void vfnmsub231ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_W0 | T_EW0 | T_EVEX | T_ER_X, 0xBF); }$/;"	f
vfpclasspd	xbyak/xbyak_mnemonic.h	/^void vfpclasspd(const Opmask& k, const Operand& op, uint8_t imm) { if (!op.isBit(128|256|512)) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(k.changeBit(op.getBit()), 0, op, T_66 | T_0F3A | T_MUST_EVEX | T_YMM | T_EW1 | T_B64, 0x66, imm); }$/;"	f
vfpclassph	xbyak/xbyak_mnemonic.h	/^void vfpclassph(const Opmask& k, const Operand& op, uint8_t imm) { if (!op.isBit(128|256|512)) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(k.changeBit(op.getBit()), 0, op, T_0F3A | T_MUST_EVEX | T_YMM | T_EW0 | T_B16, 0x66, imm); }$/;"	f
vfpclassps	xbyak/xbyak_mnemonic.h	/^void vfpclassps(const Opmask& k, const Operand& op, uint8_t imm) { if (!op.isBit(128|256|512)) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(k.changeBit(op.getBit()), 0, op, T_66 | T_0F3A | T_MUST_EVEX | T_YMM | T_EW0 | T_B32, 0x66, imm); }$/;"	f
vfpclasssd	xbyak/xbyak_mnemonic.h	/^void vfpclasssd(const Opmask& k, const Operand& op, uint8_t imm) { if (!op.isXMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(k, 0, op, T_66 | T_0F3A | T_MUST_EVEX | T_EW1 | T_N8, 0x67, imm); }$/;"	f
vfpclasssh	xbyak/xbyak_mnemonic.h	/^void vfpclasssh(const Opmask& k, const Operand& op, uint8_t imm) { if (!op.isXMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(k, 0, op, T_0F3A | T_MUST_EVEX | T_EW0 | T_N2, 0x67, imm); }$/;"	f
vfpclassss	xbyak/xbyak_mnemonic.h	/^void vfpclassss(const Opmask& k, const Operand& op, uint8_t imm) { if (!op.isXMEM()) XBYAK_THROW(ERR_BAD_MEM_SIZE) opVex(k, 0, op, T_66 | T_0F3A | T_MUST_EVEX | T_EW0 | T_N4, 0x67, imm); }$/;"	f
vgatherdpd	xbyak/xbyak_mnemonic.h	/^void vgatherdpd(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_VSIB, 0x92, 1); }$/;"	f
vgatherdpd	xbyak/xbyak_mnemonic.h	/^void vgatherdpd(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W1, 0x92, 0); }$/;"	f
vgatherdps	xbyak/xbyak_mnemonic.h	/^void vgatherdps(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_VSIB, 0x92, 0); }$/;"	f
vgatherdps	xbyak/xbyak_mnemonic.h	/^void vgatherdps(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W0, 0x92, 1); }$/;"	f
vgatherpf0dpd	xbyak/xbyak_mnemonic.h	/^void vgatherpf0dpd(const Address& addr) { opGatherFetch(addr, zm1, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::YMM); }$/;"	f
vgatherpf0dps	xbyak/xbyak_mnemonic.h	/^void vgatherpf0dps(const Address& addr) { opGatherFetch(addr, zm1, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::ZMM); }$/;"	f
vgatherpf0qpd	xbyak/xbyak_mnemonic.h	/^void vgatherpf0qpd(const Address& addr) { opGatherFetch(addr, zm1, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vgatherpf0qps	xbyak/xbyak_mnemonic.h	/^void vgatherpf0qps(const Address& addr) { opGatherFetch(addr, zm1, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vgatherpf1dpd	xbyak/xbyak_mnemonic.h	/^void vgatherpf1dpd(const Address& addr) { opGatherFetch(addr, zm2, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::YMM); }$/;"	f
vgatherpf1dps	xbyak/xbyak_mnemonic.h	/^void vgatherpf1dps(const Address& addr) { opGatherFetch(addr, zm2, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::ZMM); }$/;"	f
vgatherpf1qpd	xbyak/xbyak_mnemonic.h	/^void vgatherpf1qpd(const Address& addr) { opGatherFetch(addr, zm2, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vgatherpf1qps	xbyak/xbyak_mnemonic.h	/^void vgatherpf1qps(const Address& addr) { opGatherFetch(addr, zm2, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vgatherqpd	xbyak/xbyak_mnemonic.h	/^void vgatherqpd(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_VSIB, 0x93, 0); }$/;"	f
vgatherqpd	xbyak/xbyak_mnemonic.h	/^void vgatherqpd(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W1, 0x93, 1); }$/;"	f
vgatherqps	xbyak/xbyak_mnemonic.h	/^void vgatherqps(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_VSIB, 0x93, 2); }$/;"	f
vgatherqps	xbyak/xbyak_mnemonic.h	/^void vgatherqps(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W0, 0x93, 2); }$/;"	f
vgetexppd	xbyak/xbyak_mnemonic.h	/^void vgetexppd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x42); }$/;"	f
vgetexpph	xbyak/xbyak_mnemonic.h	/^void vgetexpph(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B16, 0x42); }$/;"	f
vgetexpps	xbyak/xbyak_mnemonic.h	/^void vgetexpps(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x42); }$/;"	f
vgetexpsd	xbyak/xbyak_mnemonic.h	/^void vgetexpsd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_SAE_X | T_MUST_EVEX, 0x43); }$/;"	f
vgetexpsh	xbyak/xbyak_mnemonic.h	/^void vgetexpsh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x43); }$/;"	f
vgetexpss	xbyak/xbyak_mnemonic.h	/^void vgetexpss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x43); }$/;"	f
vgetmantpd	xbyak/xbyak_mnemonic.h	/^void vgetmantpd(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x26, imm); }$/;"	f
vgetmantph	xbyak/xbyak_mnemonic.h	/^void vgetmantph(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B16, 0x26, imm); }$/;"	f
vgetmantps	xbyak/xbyak_mnemonic.h	/^void vgetmantps(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x26, imm); }$/;"	f
vgetmantsd	xbyak/xbyak_mnemonic.h	/^void vgetmantsd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F3A | T_EW1 | T_SAE_X | T_MUST_EVEX, 0x27, imm); }$/;"	f
vgetmantsh	xbyak/xbyak_mnemonic.h	/^void vgetmantsh(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x27, imm); }$/;"	f
vgetmantss	xbyak/xbyak_mnemonic.h	/^void vgetmantss(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x27, imm); }$/;"	f
vgf2p8affineinvqb	xbyak/xbyak_mnemonic.h	/^void vgf2p8affineinvqb(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W1 | T_EW1 | T_YMM | T_EVEX | T_SAE_Z | T_B64, 0xCF, imm); }$/;"	f
vgf2p8affineqb	xbyak/xbyak_mnemonic.h	/^void vgf2p8affineqb(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W1 | T_EW1 | T_YMM | T_EVEX | T_SAE_Z | T_B64, 0xCE, imm); }$/;"	f
vgf2p8mulb	xbyak/xbyak_mnemonic.h	/^void vgf2p8mulb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_SAE_Z, 0xCF); }$/;"	f
vhaddpd	xbyak/xbyak_mnemonic.h	/^void vhaddpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_66 | T_0F | T_YMM, 0x7C); }$/;"	f
vhaddps	xbyak/xbyak_mnemonic.h	/^void vhaddps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_F2 | T_0F | T_YMM, 0x7C); }$/;"	f
vhsubpd	xbyak/xbyak_mnemonic.h	/^void vhsubpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_66 | T_0F | T_YMM, 0x7D); }$/;"	f
vhsubps	xbyak/xbyak_mnemonic.h	/^void vhsubps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_F2 | T_0F | T_YMM, 0x7D); }$/;"	f
vinsertf128	xbyak/xbyak_mnemonic.h	/^void vinsertf128(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { if (!(y1.isYMM() && y2.isYMM() && op.isXMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(y1, &y2, op, T_0F3A | T_66 | T_W0 | T_YMM, 0x18, imm); }$/;"	f
vinsertf32x4	xbyak/xbyak_mnemonic.h	/^void vinsertf32x4(const Ymm& r1, const Ymm& r2, const Operand& op, uint8_t imm) {if (!(r1.getKind() == r2.getKind() && op.is(Operand::MEM | Operand::XMM))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N16 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x18, imm); }$/;"	f
vinsertf32x8	xbyak/xbyak_mnemonic.h	/^void vinsertf32x8(const Zmm& r1, const Zmm& r2, const Operand& op, uint8_t imm) {if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N32 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x1A, imm); }$/;"	f
vinsertf64x2	xbyak/xbyak_mnemonic.h	/^void vinsertf64x2(const Ymm& r1, const Ymm& r2, const Operand& op, uint8_t imm) {if (!(r1.getKind() == r2.getKind() && op.is(Operand::MEM | Operand::XMM))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N16 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x18, imm); }$/;"	f
vinsertf64x4	xbyak/xbyak_mnemonic.h	/^void vinsertf64x4(const Zmm& r1, const Zmm& r2, const Operand& op, uint8_t imm) {if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N32 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x1A, imm); }$/;"	f
vinserti128	xbyak/xbyak_mnemonic.h	/^void vinserti128(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { if (!(y1.isYMM() && y2.isYMM() && op.isXMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(y1, &y2, op, T_0F3A | T_66 | T_W0 | T_YMM, 0x38, imm); }$/;"	f
vinserti32x4	xbyak/xbyak_mnemonic.h	/^void vinserti32x4(const Ymm& r1, const Ymm& r2, const Operand& op, uint8_t imm) {if (!(r1.getKind() == r2.getKind() && op.is(Operand::MEM | Operand::XMM))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N16 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x38, imm); }$/;"	f
vinserti32x8	xbyak/xbyak_mnemonic.h	/^void vinserti32x8(const Zmm& r1, const Zmm& r2, const Operand& op, uint8_t imm) {if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N32 | T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x3A, imm); }$/;"	f
vinserti64x2	xbyak/xbyak_mnemonic.h	/^void vinserti64x2(const Ymm& r1, const Ymm& r2, const Operand& op, uint8_t imm) {if (!(r1.getKind() == r2.getKind() && op.is(Operand::MEM | Operand::XMM))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N16 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x38, imm); }$/;"	f
vinserti64x4	xbyak/xbyak_mnemonic.h	/^void vinserti64x4(const Zmm& r1, const Zmm& r2, const Operand& op, uint8_t imm) {if (!op.is(Operand::MEM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(r1, &r2, op, T_N32 | T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x3A, imm); }$/;"	f
vinsertps	xbyak/xbyak_mnemonic.h	/^void vinsertps(const Xmm& x, const Operand& op, uint8_t imm) { vinsertps(x, x, op, imm); }$/;"	f
vinsertps	xbyak/xbyak_mnemonic.h	/^void vinsertps(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F3A | T_W0 | T_EW0 | T_EVEX, 0x21, imm); }$/;"	f
vlddqu	xbyak/xbyak_mnemonic.h	/^void vlddqu(const Xmm& x, const Address& addr) { opAVX_X_X_XM(x, cvtIdx0(x), addr, T_0F | T_F2 | T_W0 | T_YMM, 0xF0); }$/;"	f
vldmxcsr	xbyak/xbyak_mnemonic.h	/^void vldmxcsr(const Address& addr) { opAVX_X_X_XM(xm2, xm0, addr, T_0F, 0xAE); }$/;"	f
vmask	kernel_jit.h	/^    Xbyak::Zmm vmask;  \/\/ TODO: contain one tmp_zmm.$/;"	m	struct:jblas::kernel::jit::DequanKBlockS4F32::convert_s4_s8_param
vmaskmovdqu	xbyak/xbyak_mnemonic.h	/^void vmaskmovdqu(const Xmm& x1, const Xmm& x2) { opAVX_X_X_XM(x1, xm0, x2, T_0F | T_66, 0xF7); }$/;"	f
vmaskmovpd	xbyak/xbyak_mnemonic.h	/^void vmaskmovpd(const Address& addr, const Xmm& x1, const Xmm& x2) { opAVX_X_X_XM(x2, x1, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x2F); }$/;"	f
vmaskmovpd	xbyak/xbyak_mnemonic.h	/^void vmaskmovpd(const Xmm& x1, const Xmm& x2, const Address& addr) { opAVX_X_X_XM(x1, x2, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x2D); }$/;"	f
vmaskmovps	xbyak/xbyak_mnemonic.h	/^void vmaskmovps(const Address& addr, const Xmm& x1, const Xmm& x2) { opAVX_X_X_XM(x2, x1, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x2E); }$/;"	f
vmaskmovps	xbyak/xbyak_mnemonic.h	/^void vmaskmovps(const Xmm& x1, const Xmm& x2, const Address& addr) { opAVX_X_X_XM(x1, x2, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x2C); }$/;"	f
vmaxpd	xbyak/xbyak_mnemonic.h	/^void vmaxpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x5F); }$/;"	f
vmaxph	xbyak/xbyak_mnemonic.h	/^void vmaxph(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_EW0 | T_YMM | T_MUST_EVEX | T_ER_Z | T_B16, 0x5F); }$/;"	f
vmaxps	xbyak/xbyak_mnemonic.h	/^void vmaxps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x5F); }$/;"	f
vmaxsd	xbyak/xbyak_mnemonic.h	/^void vmaxsd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F2 | T_EW1 | T_EVEX | T_ER_X | T_N8, 0x5F); }$/;"	f
vmaxsh	xbyak/xbyak_mnemonic.h	/^void vmaxsh(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_F3 | T_EW0 | T_MUST_EVEX | T_ER_X | T_N2, 0x5F); }$/;"	f
vmaxss	xbyak/xbyak_mnemonic.h	/^void vmaxss(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F3 | T_EW0 | T_EVEX | T_ER_X | T_N4, 0x5F); }$/;"	f
vminpd	xbyak/xbyak_mnemonic.h	/^void vminpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x5D); }$/;"	f
vminph	xbyak/xbyak_mnemonic.h	/^void vminph(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_EW0 | T_YMM | T_MUST_EVEX | T_ER_Z | T_B16, 0x5D); }$/;"	f
vminps	xbyak/xbyak_mnemonic.h	/^void vminps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x5D); }$/;"	f
vminsd	xbyak/xbyak_mnemonic.h	/^void vminsd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F2 | T_EW1 | T_EVEX | T_ER_X | T_N8, 0x5D); }$/;"	f
vminsh	xbyak/xbyak_mnemonic.h	/^void vminsh(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_F3 | T_EW0 | T_MUST_EVEX | T_ER_X | T_N2, 0x5D); }$/;"	f
vminss	xbyak/xbyak_mnemonic.h	/^void vminss(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F3 | T_EW0 | T_EVEX | T_ER_X | T_N4, 0x5D); }$/;"	f
vmovapd	xbyak/xbyak_mnemonic.h	/^void vmovapd(const Address& addr, const Xmm& xmm) { opAVX_X_XM_IMM(xmm, addr, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_M_K, 0x29); }$/;"	f
vmovapd	xbyak/xbyak_mnemonic.h	/^void vmovapd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX, 0x28); }$/;"	f
vmovaps	xbyak/xbyak_mnemonic.h	/^void vmovaps(const Address& addr, const Xmm& xmm) { opAVX_X_XM_IMM(xmm, addr, T_0F | T_EW0 | T_YMM | T_EVEX | T_M_K, 0x29); }$/;"	f
vmovaps	xbyak/xbyak_mnemonic.h	/^void vmovaps(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_0F | T_EW0 | T_YMM | T_EVEX, 0x28); }$/;"	f
vmovd	xbyak/xbyak_mnemonic.h	/^void vmovd(const Operand& op, const Xmm& x) { if (!op.isREG(32) && !op.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x, xm0, op, T_0F | T_66 | T_W0 | T_EVEX | T_N4, 0x7E); }$/;"	f
vmovd	xbyak/xbyak_mnemonic.h	/^void vmovd(const Xmm& x, const Operand& op) { if (!op.isREG(32) && !op.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x, xm0, op, T_0F | T_66 | T_W0 | T_EVEX | T_N4, 0x6E); }$/;"	f
vmovddup	xbyak/xbyak_mnemonic.h	/^void vmovddup(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_DUP | T_F2 | T_0F | T_EW1 | T_YMM | T_EVEX | T_ER_X | T_ER_Y | T_ER_Z, 0x12); }$/;"	f
vmovdqa	xbyak/xbyak_mnemonic.h	/^void vmovdqa(const Address& addr, const Xmm& xmm) { opAVX_X_XM_IMM(xmm, addr, T_66 | T_0F | T_YMM, 0x7F); }$/;"	f
vmovdqa	xbyak/xbyak_mnemonic.h	/^void vmovdqa(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F | T_YMM, 0x6F); }$/;"	f
vmovdqa32	xbyak/xbyak_mnemonic.h	/^void vmovdqa32(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_66 | T_0F | T_EW0 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX | T_M_K, 0x7F); }$/;"	f
vmovdqa32	xbyak/xbyak_mnemonic.h	/^void vmovdqa32(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F | T_EW0 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX, 0x6F); }$/;"	f
vmovdqa64	xbyak/xbyak_mnemonic.h	/^void vmovdqa64(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_66 | T_0F | T_EW1 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX | T_M_K, 0x7F); }$/;"	f
vmovdqa64	xbyak/xbyak_mnemonic.h	/^void vmovdqa64(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F | T_EW1 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX, 0x6F); }$/;"	f
vmovdqu	xbyak/xbyak_mnemonic.h	/^void vmovdqu(const Address& addr, const Xmm& xmm) { opAVX_X_XM_IMM(xmm, addr, T_F3 | T_0F | T_YMM, 0x7F); }$/;"	f
vmovdqu	xbyak/xbyak_mnemonic.h	/^void vmovdqu(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_F3 | T_0F | T_YMM, 0x6F); }$/;"	f
vmovdqu16	xbyak/xbyak_mnemonic.h	/^void vmovdqu16(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_F2 | T_0F | T_EW1 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX | T_M_K, 0x7F); }$/;"	f
vmovdqu16	xbyak/xbyak_mnemonic.h	/^void vmovdqu16(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F2 | T_0F | T_EW1 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX, 0x6F); }$/;"	f
vmovdqu32	xbyak/xbyak_mnemonic.h	/^void vmovdqu32(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_F3 | T_0F | T_EW0 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX | T_M_K, 0x7F); }$/;"	f
vmovdqu32	xbyak/xbyak_mnemonic.h	/^void vmovdqu32(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F3 | T_0F | T_EW0 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX, 0x6F); }$/;"	f
vmovdqu64	xbyak/xbyak_mnemonic.h	/^void vmovdqu64(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_F3 | T_0F | T_EW1 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX | T_M_K, 0x7F); }$/;"	f
vmovdqu64	xbyak/xbyak_mnemonic.h	/^void vmovdqu64(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F3 | T_0F | T_EW1 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX, 0x6F); }$/;"	f
vmovdqu8	xbyak/xbyak_mnemonic.h	/^void vmovdqu8(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_F2 | T_0F | T_EW0 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX | T_M_K, 0x7F); }$/;"	f
vmovdqu8	xbyak/xbyak_mnemonic.h	/^void vmovdqu8(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_F2 | T_0F | T_EW0 | T_YMM | T_ER_X | T_ER_Y | T_ER_Z | T_MUST_EVEX, 0x6F); }$/;"	f
vmovhlps	xbyak/xbyak_mnemonic.h	/^void vmovhlps(const Xmm& x1, const Xmm& x2, const Operand& op = Operand()) { if (!op.isNone() && !op.isXMM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x1, x2, op, T_0F | T_EVEX | T_EW0, 0x12); }$/;"	f
vmovhpd	xbyak/xbyak_mnemonic.h	/^void vmovhpd(const Address& addr, const Xmm& x) { opAVX_X_X_XM(x, xm0, addr, T_0F | T_66 | T_EVEX | T_EW1 | T_N8, 0x17); }$/;"	f
vmovhpd	xbyak/xbyak_mnemonic.h	/^void vmovhpd(const Xmm& x, const Operand& op1, const Operand& op2 = Operand()) { if (!op2.isNone() && !op2.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x, op1, op2, T_0F | T_66 | T_EVEX | T_EW1 | T_N8, 0x16); }$/;"	f
vmovhps	xbyak/xbyak_mnemonic.h	/^void vmovhps(const Address& addr, const Xmm& x) { opAVX_X_X_XM(x, xm0, addr, T_0F | T_EVEX | T_EW0 | T_N8, 0x17); }$/;"	f
vmovhps	xbyak/xbyak_mnemonic.h	/^void vmovhps(const Xmm& x, const Operand& op1, const Operand& op2 = Operand()) { if (!op2.isNone() && !op2.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x, op1, op2, T_0F | T_EVEX | T_EW0 | T_N8, 0x16); }$/;"	f
vmovlhps	xbyak/xbyak_mnemonic.h	/^void vmovlhps(const Xmm& x1, const Xmm& x2, const Operand& op = Operand()) { if (!op.isNone() && !op.isXMM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x1, x2, op, T_0F | T_EVEX | T_EW0, 0x16); }$/;"	f
vmovlpd	xbyak/xbyak_mnemonic.h	/^void vmovlpd(const Address& addr, const Xmm& x) { opAVX_X_X_XM(x, xm0, addr, T_0F | T_66 | T_EVEX | T_EW1 | T_N8, 0x13); }$/;"	f
vmovlpd	xbyak/xbyak_mnemonic.h	/^void vmovlpd(const Xmm& x, const Operand& op1, const Operand& op2 = Operand()) { if (!op2.isNone() && !op2.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x, op1, op2, T_0F | T_66 | T_EVEX | T_EW1 | T_N8, 0x12); }$/;"	f
vmovlps	xbyak/xbyak_mnemonic.h	/^void vmovlps(const Address& addr, const Xmm& x) { opAVX_X_X_XM(x, xm0, addr, T_0F | T_EVEX | T_EW0 | T_N8, 0x13); }$/;"	f
vmovlps	xbyak/xbyak_mnemonic.h	/^void vmovlps(const Xmm& x, const Operand& op1, const Operand& op2 = Operand()) { if (!op2.isNone() && !op2.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x, op1, op2, T_0F | T_EVEX | T_EW0 | T_N8, 0x12); }$/;"	f
vmovmskpd	xbyak/xbyak_mnemonic.h	/^void vmovmskpd(const Reg& r, const Xmm& x) { if (!r.isBit(i32e)) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x.isXMM() ? Xmm(r.getIdx()) : Ymm(r.getIdx()), cvtIdx0(x), x, T_0F | T_66 | T_W0 | T_YMM, 0x50); }$/;"	f
vmovmskps	xbyak/xbyak_mnemonic.h	/^void vmovmskps(const Reg& r, const Xmm& x) { if (!r.isBit(i32e)) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x.isXMM() ? Xmm(r.getIdx()) : Ymm(r.getIdx()), cvtIdx0(x), x, T_0F | T_W0 | T_YMM, 0x50); }$/;"	f
vmovntdq	xbyak/xbyak_mnemonic.h	/^void vmovntdq(const Address& addr, const Xmm& x) { opVex(x, 0, addr, T_0F | T_66 | T_YMM | T_EVEX | T_EW0, 0xE7); }$/;"	f
vmovntdqa	xbyak/xbyak_mnemonic.h	/^void vmovntdqa(const Xmm& x, const Address& addr) { opVex(x, 0, addr, T_0F38 | T_66 | T_YMM | T_EVEX | T_EW0, 0x2A); }$/;"	f
vmovntpd	xbyak/xbyak_mnemonic.h	/^void vmovntpd(const Address& addr, const Xmm& x) { opVex(x, 0, addr, T_0F | T_66 | T_YMM | T_EVEX | T_EW1, 0x2B); }$/;"	f
vmovntps	xbyak/xbyak_mnemonic.h	/^void vmovntps(const Address& addr, const Xmm& x) { opVex(x, 0, addr, T_0F | T_YMM | T_EVEX | T_EW0, 0x2B); }$/;"	f
vmovq	xbyak/xbyak_mnemonic.h	/^void vmovq(const Address& addr, const Xmm& x) { opAVX_X_X_XM(x, xm0, addr, T_0F | T_66 | T_EVEX | T_EW1 | T_N8, x.getIdx() < 16 ? 0xD6 : 0x7E); }$/;"	f
vmovq	xbyak/xbyak_mnemonic.h	/^void vmovq(const Reg64& r, const Xmm& x) { opAVX_X_X_XM(x, xm0, Xmm(r.getIdx()), T_66 | T_0F | T_W1 | T_EVEX | T_EW1, 0x7E); }$/;"	f
vmovq	xbyak/xbyak_mnemonic.h	/^void vmovq(const Xmm& x, const Address& addr) { int type, code; if (x.getIdx() < 16) { type = T_0F | T_F3; code = 0x7E; } else { type = T_0F | T_66 | T_EVEX | T_EW1 | T_N8; code = 0x6E; } opAVX_X_X_XM(x, xm0, addr, type, code); }$/;"	f
vmovq	xbyak/xbyak_mnemonic.h	/^void vmovq(const Xmm& x, const Reg64& r) { opAVX_X_X_XM(x, xm0, Xmm(r.getIdx()), T_66 | T_0F | T_W1 | T_EVEX | T_EW1, 0x6E); }$/;"	f
vmovq	xbyak/xbyak_mnemonic.h	/^void vmovq(const Xmm& x1, const Xmm& x2) { opAVX_X_X_XM(x1, xm0, x2, T_0F | T_F3 | T_EVEX | T_EW1 | T_N8, 0x7E); }$/;"	f
vmovsd	xbyak/xbyak_mnemonic.h	/^void vmovsd(const Address& addr, const Xmm& x) { opAVX_X_X_XM(x, xm0, addr, T_N8 | T_F2 | T_0F | T_EW1 | T_EVEX | T_M_K, 0x11); }$/;"	f
vmovsd	xbyak/xbyak_mnemonic.h	/^void vmovsd(const Xmm& x, const Address& addr) { opAVX_X_X_XM(x, xm0, addr, T_N8 | T_F2 | T_0F | T_EW1 | T_EVEX, 0x10); }$/;"	f
vmovsd	xbyak/xbyak_mnemonic.h	/^void vmovsd(const Xmm& x1, const Xmm& x2, const Operand& op = Operand()) { if (!op.isNone() && !op.isXMM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x1, x2, op, T_N8 | T_F2 | T_0F | T_EW1 | T_EVEX, 0x10); }$/;"	f
vmovsh	xbyak/xbyak_mnemonic.h	/^void vmovsh(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_N2 | T_F3 | T_MAP5 | T_EW0 | T_MUST_EVEX | T_M_K, 0x11); }$/;"	f
vmovsh	xbyak/xbyak_mnemonic.h	/^void vmovsh(const Xmm& x, const Address& addr) { opAVX_X_X_XM(x, xm0, addr, T_N2 | T_F3 | T_MAP5 | T_EW0 | T_MUST_EVEX, 0x10); }$/;"	f
vmovsh	xbyak/xbyak_mnemonic.h	/^void vmovsh(const Xmm& x1, const Xmm& x2, const Xmm& x3) { opAVX_X_X_XM(x1, x2, x3, T_N2 | T_F3 | T_MAP5 | T_EW0 | T_MUST_EVEX, 0x10); }$/;"	f
vmovshdup	xbyak/xbyak_mnemonic.h	/^void vmovshdup(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_F3 | T_0F | T_EW0 | T_YMM | T_EVEX, 0x16); }$/;"	f
vmovsldup	xbyak/xbyak_mnemonic.h	/^void vmovsldup(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_F3 | T_0F | T_EW0 | T_YMM | T_EVEX, 0x12); }$/;"	f
vmovss	xbyak/xbyak_mnemonic.h	/^void vmovss(const Address& addr, const Xmm& x) { opAVX_X_X_XM(x, xm0, addr, T_N4 | T_F3 | T_0F | T_EW0 | T_EVEX | T_M_K, 0x11); }$/;"	f
vmovss	xbyak/xbyak_mnemonic.h	/^void vmovss(const Xmm& x, const Address& addr) { opAVX_X_X_XM(x, xm0, addr, T_N4 | T_F3 | T_0F | T_EW0 | T_EVEX, 0x10); }$/;"	f
vmovss	xbyak/xbyak_mnemonic.h	/^void vmovss(const Xmm& x1, const Xmm& x2, const Operand& op = Operand()) { if (!op.isNone() && !op.isXMM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x1, x2, op, T_N4 | T_F3 | T_0F | T_EW0 | T_EVEX, 0x10); }$/;"	f
vmovupd	xbyak/xbyak_mnemonic.h	/^void vmovupd(const Address& addr, const Xmm& xmm) { opAVX_X_XM_IMM(xmm, addr, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_M_K, 0x11); }$/;"	f
vmovupd	xbyak/xbyak_mnemonic.h	/^void vmovupd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX, 0x10); }$/;"	f
vmovups	xbyak/xbyak_mnemonic.h	/^void vmovups(const Address& addr, const Xmm& xmm) { opAVX_X_XM_IMM(xmm, addr, T_0F | T_EW0 | T_YMM | T_EVEX | T_M_K, 0x11); }$/;"	f
vmovups	xbyak/xbyak_mnemonic.h	/^void vmovups(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_0F | T_EW0 | T_YMM | T_EVEX, 0x10); }$/;"	f
vmovw	xbyak/xbyak_mnemonic.h	/^void vmovw(const Address& addr, const Xmm& x) { opAVX_X_XM_IMM(x, addr, T_N2 | T_66 | T_MAP5 | T_MUST_EVEX, 0x7E); }$/;"	f
vmovw	xbyak/xbyak_mnemonic.h	/^void vmovw(const Reg32e& r, const Xmm& x) { opAVX_X_X_XM(x, xm0, r, T_N2 | T_66 | T_MAP5 | T_MUST_EVEX, 0x7E); }$/;"	f
vmovw	xbyak/xbyak_mnemonic.h	/^void vmovw(const Xmm& x, const Operand& op) { if (!op.isREG(32|64) && !op.isMEM()) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_X_XM(x, xm0, op, T_N2 | T_66 | T_MAP5 | T_MUST_EVEX, 0x6E); }$/;"	f
vmpsadbw	xbyak/xbyak_mnemonic.h	/^void vmpsadbw(const Xmm& x, const Operand& op, uint8_t imm) { vmpsadbw(x, x, op, imm); }$/;"	f
vmpsadbw	xbyak/xbyak_mnemonic.h	/^void vmpsadbw(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0 | T_YMM, 0x42, imm); }$/;"	f
vmulpd	xbyak/xbyak_mnemonic.h	/^void vmulpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x59); }$/;"	f
vmulph	xbyak/xbyak_mnemonic.h	/^void vmulph(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_EW0 | T_YMM | T_MUST_EVEX | T_ER_Z | T_B16, 0x59); }$/;"	f
vmulps	xbyak/xbyak_mnemonic.h	/^void vmulps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x59); }$/;"	f
vmulsd	xbyak/xbyak_mnemonic.h	/^void vmulsd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F2 | T_EW1 | T_EVEX | T_ER_X | T_N8, 0x59); }$/;"	f
vmulsh	xbyak/xbyak_mnemonic.h	/^void vmulsh(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_F3 | T_EW0 | T_MUST_EVEX | T_ER_X | T_N2, 0x59); }$/;"	f
vmulss	xbyak/xbyak_mnemonic.h	/^void vmulss(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F3 | T_EW0 | T_EVEX | T_ER_X | T_N4, 0x59); }$/;"	f
vorpd	xbyak/xbyak_mnemonic.h	/^void vorpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x56); }$/;"	f
vorps	xbyak/xbyak_mnemonic.h	/^void vorps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x56); }$/;"	f
vp2intersectd	xbyak/xbyak_mnemonic.h	/^void vp2intersectd(const Opmask& k, const Xmm& x, const Operand& op) { if (k.getOpmaskIdx() != 0) XBYAK_THROW(ERR_OPMASK_IS_ALREADY_SET) opAVX_K_X_XM(k, x, op, T_F2 | T_0F38 | T_YMM | T_EVEX | T_EW0 | T_B32, 0x68); }$/;"	f
vp2intersectq	xbyak/xbyak_mnemonic.h	/^void vp2intersectq(const Opmask& k, const Xmm& x, const Operand& op) { if (k.getOpmaskIdx() != 0) XBYAK_THROW(ERR_OPMASK_IS_ALREADY_SET) opAVX_K_X_XM(k, x, op, T_F2 | T_0F38 | T_YMM | T_EVEX | T_EW1 | T_B64, 0x68); }$/;"	f
vp4dpwssd	xbyak/xbyak_mnemonic.h	/^void vp4dpwssd(const Zmm& z1, const Zmm& z2, const Address& addr) { opAVX_X_X_XM(z1, z2, addr, T_0F38 | T_F2 | T_EW0 | T_YMM | T_MUST_EVEX | T_N16, 0x52); }$/;"	f
vp4dpwssds	xbyak/xbyak_mnemonic.h	/^void vp4dpwssds(const Zmm& z1, const Zmm& z2, const Address& addr) { opAVX_X_X_XM(z1, z2, addr, T_0F38 | T_F2 | T_EW0 | T_YMM | T_MUST_EVEX | T_N16, 0x53); }$/;"	f
vpabsb	xbyak/xbyak_mnemonic.h	/^void vpabsb(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x1C); }$/;"	f
vpabsd	xbyak/xbyak_mnemonic.h	/^void vpabsd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x1E); }$/;"	f
vpabsq	xbyak/xbyak_mnemonic.h	/^void vpabsq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_MUST_EVEX | T_EW1 | T_B64 | T_YMM, 0x1F); }$/;"	f
vpabsw	xbyak/xbyak_mnemonic.h	/^void vpabsw(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x1D); }$/;"	f
vpackssdw	xbyak/xbyak_mnemonic.h	/^void vpackssdw(const Xmm& x, const Operand& op) { vpackssdw(x, x, op); }$/;"	f
vpackssdw	xbyak/xbyak_mnemonic.h	/^void vpackssdw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0x6B); }$/;"	f
vpacksswb	xbyak/xbyak_mnemonic.h	/^void vpacksswb(const Xmm& x, const Operand& op) { vpacksswb(x, x, op); }$/;"	f
vpacksswb	xbyak/xbyak_mnemonic.h	/^void vpacksswb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0x63); }$/;"	f
vpackusdw	xbyak/xbyak_mnemonic.h	/^void vpackusdw(const Xmm& x, const Operand& op) { vpackusdw(x, x, op); }$/;"	f
vpackusdw	xbyak/xbyak_mnemonic.h	/^void vpackusdw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x2B); }$/;"	f
vpackuswb	xbyak/xbyak_mnemonic.h	/^void vpackuswb(const Xmm& x, const Operand& op) { vpackuswb(x, x, op); }$/;"	f
vpackuswb	xbyak/xbyak_mnemonic.h	/^void vpackuswb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0x67); }$/;"	f
vpaddb	xbyak/xbyak_mnemonic.h	/^void vpaddb(const Xmm& x, const Operand& op) { vpaddb(x, x, op); }$/;"	f
vpaddb	xbyak/xbyak_mnemonic.h	/^void vpaddb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xFC); }$/;"	f
vpaddd	xbyak/xbyak_mnemonic.h	/^void vpaddd(const Xmm& x, const Operand& op) { vpaddd(x, x, op); }$/;"	f
vpaddd	xbyak/xbyak_mnemonic.h	/^void vpaddd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0xFE); }$/;"	f
vpaddq	xbyak/xbyak_mnemonic.h	/^void vpaddq(const Xmm& x, const Operand& op) { vpaddq(x, x, op); }$/;"	f
vpaddq	xbyak/xbyak_mnemonic.h	/^void vpaddq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0xD4); }$/;"	f
vpaddsb	xbyak/xbyak_mnemonic.h	/^void vpaddsb(const Xmm& x, const Operand& op) { vpaddsb(x, x, op); }$/;"	f
vpaddsb	xbyak/xbyak_mnemonic.h	/^void vpaddsb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xEC); }$/;"	f
vpaddsw	xbyak/xbyak_mnemonic.h	/^void vpaddsw(const Xmm& x, const Operand& op) { vpaddsw(x, x, op); }$/;"	f
vpaddsw	xbyak/xbyak_mnemonic.h	/^void vpaddsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xED); }$/;"	f
vpaddusb	xbyak/xbyak_mnemonic.h	/^void vpaddusb(const Xmm& x, const Operand& op) { vpaddusb(x, x, op); }$/;"	f
vpaddusb	xbyak/xbyak_mnemonic.h	/^void vpaddusb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xDC); }$/;"	f
vpaddusw	xbyak/xbyak_mnemonic.h	/^void vpaddusw(const Xmm& x, const Operand& op) { vpaddusw(x, x, op); }$/;"	f
vpaddusw	xbyak/xbyak_mnemonic.h	/^void vpaddusw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xDD); }$/;"	f
vpaddw	xbyak/xbyak_mnemonic.h	/^void vpaddw(const Xmm& x, const Operand& op) { vpaddw(x, x, op); }$/;"	f
vpaddw	xbyak/xbyak_mnemonic.h	/^void vpaddw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xFD); }$/;"	f
vpalignr	xbyak/xbyak_mnemonic.h	/^void vpalignr(const Xmm& x, const Operand& op, uint8_t imm) { vpalignr(x, x, op, imm); }$/;"	f
vpalignr	xbyak/xbyak_mnemonic.h	/^void vpalignr(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_YMM | T_EVEX, 0x0F, imm); }$/;"	f
vpand	xbyak/xbyak_mnemonic.h	/^void vpand(const Xmm& x, const Operand& op) { vpand(x, x, op); }$/;"	f
vpand	xbyak/xbyak_mnemonic.h	/^void vpand(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0xDB); }$/;"	f
vpandd	xbyak/xbyak_mnemonic.h	/^void vpandd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0xDB); }$/;"	f
vpandn	xbyak/xbyak_mnemonic.h	/^void vpandn(const Xmm& x, const Operand& op) { vpandn(x, x, op); }$/;"	f
vpandn	xbyak/xbyak_mnemonic.h	/^void vpandn(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0xDF); }$/;"	f
vpandnd	xbyak/xbyak_mnemonic.h	/^void vpandnd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0xDF); }$/;"	f
vpandnq	xbyak/xbyak_mnemonic.h	/^void vpandnq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0xDF); }$/;"	f
vpandq	xbyak/xbyak_mnemonic.h	/^void vpandq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0xDB); }$/;"	f
vpavgb	xbyak/xbyak_mnemonic.h	/^void vpavgb(const Xmm& x, const Operand& op) { vpavgb(x, x, op); }$/;"	f
vpavgb	xbyak/xbyak_mnemonic.h	/^void vpavgb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xE0); }$/;"	f
vpavgw	xbyak/xbyak_mnemonic.h	/^void vpavgw(const Xmm& x, const Operand& op) { vpavgw(x, x, op); }$/;"	f
vpavgw	xbyak/xbyak_mnemonic.h	/^void vpavgw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xE3); }$/;"	f
vpblendd	xbyak/xbyak_mnemonic.h	/^void vpblendd(const Xmm& x, const Operand& op, uint8_t imm) { vpblendd(x, x, op, imm); }$/;"	f
vpblendd	xbyak/xbyak_mnemonic.h	/^void vpblendd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0 | T_YMM, 0x02, imm); }$/;"	f
vpblendmb	xbyak/xbyak_mnemonic.h	/^void vpblendmb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x66); }$/;"	f
vpblendmd	xbyak/xbyak_mnemonic.h	/^void vpblendmd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x64); }$/;"	f
vpblendmq	xbyak/xbyak_mnemonic.h	/^void vpblendmq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x64); }$/;"	f
vpblendmw	xbyak/xbyak_mnemonic.h	/^void vpblendmw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x66); }$/;"	f
vpblendvb	xbyak/xbyak_mnemonic.h	/^void vpblendvb(const Xmm& x1, const Operand& op, const Xmm& x4) { vpblendvb(x1, x1, op, x4); }$/;"	f
vpblendvb	xbyak/xbyak_mnemonic.h	/^void vpblendvb(const Xmm& x1, const Xmm& x2, const Operand& op, const Xmm& x4) { opAVX_X_X_XM(x1, x2, op, T_0F3A | T_66 | T_YMM, 0x4C, x4.getIdx() << 4); }$/;"	f
vpblendw	xbyak/xbyak_mnemonic.h	/^void vpblendw(const Xmm& x, const Operand& op, uint8_t imm) { vpblendw(x, x, op, imm); }$/;"	f
vpblendw	xbyak/xbyak_mnemonic.h	/^void vpblendw(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0 | T_YMM, 0x0E, imm); }$/;"	f
vpbroadcastb	xbyak/xbyak_mnemonic.h	/^void vpbroadcastb(const Xmm& x, const Operand& op) { if (!(op.isXMM() || op.isMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_XM_IMM(x, op, T_N1 | T_66 | T_0F38 | T_W0 | T_YMM | T_EVEX, 0x78); }$/;"	f
vpbroadcastb	xbyak/xbyak_mnemonic.h	/^void vpbroadcastb(const Xmm& x, const Reg8& r) { opVex(x, 0, r, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x7A); }$/;"	f
vpbroadcastd	xbyak/xbyak_mnemonic.h	/^void vpbroadcastd(const Xmm& x, const Operand& op) { if (!(op.isXMM() || op.isMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_XM_IMM(x, op, T_N4 | T_66 | T_0F38 | T_W0 | T_YMM | T_EVEX, 0x58); }$/;"	f
vpbroadcastd	xbyak/xbyak_mnemonic.h	/^void vpbroadcastd(const Xmm& x, const Reg32& r) { opVex(x, 0, r, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x7C); }$/;"	f
vpbroadcastmb2q	xbyak/xbyak_mnemonic.h	/^void vpbroadcastmb2q(const Xmm& x, const Opmask& k) { opVex(x, 0, k, T_F3 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW1, 0x2A); }$/;"	f
vpbroadcastmw2d	xbyak/xbyak_mnemonic.h	/^void vpbroadcastmw2d(const Xmm& x, const Opmask& k) { opVex(x, 0, k, T_F3 | T_0F38 | T_YMM | T_MUST_EVEX | T_EW0, 0x3A); }$/;"	f
vpbroadcastq	xbyak/xbyak_mnemonic.h	/^void vpbroadcastq(const Xmm& x, const Operand& op) { if (!(op.isXMM() || op.isMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_XM_IMM(x, op, T_N8 | T_66 | T_0F38 | T_W0 | T_EW1 | T_YMM | T_EVEX, 0x59); }$/;"	f
vpbroadcastq	xbyak/xbyak_mnemonic.h	/^void vpbroadcastq(const Xmm& x, const Reg64& r) { opVex(x, 0, r, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x7C); }$/;"	f
vpbroadcastw	xbyak/xbyak_mnemonic.h	/^void vpbroadcastw(const Xmm& x, const Operand& op) { if (!(op.isXMM() || op.isMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opAVX_X_XM_IMM(x, op, T_N2 | T_66 | T_0F38 | T_W0 | T_YMM | T_EVEX, 0x79); }$/;"	f
vpbroadcastw	xbyak/xbyak_mnemonic.h	/^void vpbroadcastw(const Xmm& x, const Reg16& r) { opVex(x, 0, r, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x7B); }$/;"	f
vpclmulqdq	xbyak/xbyak_mnemonic.h	/^void vpclmulqdq(const Xmm& x, const Operand& op, uint8_t imm) { vpclmulqdq(x, x, op, imm); }$/;"	f
vpclmulqdq	xbyak/xbyak_mnemonic.h	/^void vpclmulqdq(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0 | T_YMM | T_EVEX, 0x44, imm); }$/;"	f
vpcmpb	xbyak/xbyak_mnemonic.h	/^void vpcmpb(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x3F, imm); }$/;"	f
vpcmpd	xbyak/xbyak_mnemonic.h	/^void vpcmpd(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x1F, imm); }$/;"	f
vpcmpeqb	xbyak/xbyak_mnemonic.h	/^void vpcmpeqb(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F | T_YMM | T_MUST_EVEX, 0x74); }$/;"	f
vpcmpeqb	xbyak/xbyak_mnemonic.h	/^void vpcmpeqb(const Xmm& x, const Operand& op) { vpcmpeqb(x, x, op); }$/;"	f
vpcmpeqb	xbyak/xbyak_mnemonic.h	/^void vpcmpeqb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0x74); }$/;"	f
vpcmpeqd	xbyak/xbyak_mnemonic.h	/^void vpcmpeqd(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F | T_YMM | T_MUST_EVEX | T_B32, 0x76); }$/;"	f
vpcmpeqd	xbyak/xbyak_mnemonic.h	/^void vpcmpeqd(const Xmm& x, const Operand& op) { vpcmpeqd(x, x, op); }$/;"	f
vpcmpeqd	xbyak/xbyak_mnemonic.h	/^void vpcmpeqd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0x76); }$/;"	f
vpcmpeqq	xbyak/xbyak_mnemonic.h	/^void vpcmpeqq(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x29); }$/;"	f
vpcmpeqq	xbyak/xbyak_mnemonic.h	/^void vpcmpeqq(const Xmm& x, const Operand& op) { vpcmpeqq(x, x, op); }$/;"	f
vpcmpeqq	xbyak/xbyak_mnemonic.h	/^void vpcmpeqq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x29); }$/;"	f
vpcmpeqw	xbyak/xbyak_mnemonic.h	/^void vpcmpeqw(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F | T_YMM | T_MUST_EVEX, 0x75); }$/;"	f
vpcmpeqw	xbyak/xbyak_mnemonic.h	/^void vpcmpeqw(const Xmm& x, const Operand& op) { vpcmpeqw(x, x, op); }$/;"	f
vpcmpeqw	xbyak/xbyak_mnemonic.h	/^void vpcmpeqw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0x75); }$/;"	f
vpcmpestri	xbyak/xbyak_mnemonic.h	/^void vpcmpestri(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A, 0x61, imm); }$/;"	f
vpcmpestrm	xbyak/xbyak_mnemonic.h	/^void vpcmpestrm(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A, 0x60, imm); }$/;"	f
vpcmpgtb	xbyak/xbyak_mnemonic.h	/^void vpcmpgtb(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F | T_YMM | T_MUST_EVEX, 0x64); }$/;"	f
vpcmpgtb	xbyak/xbyak_mnemonic.h	/^void vpcmpgtb(const Xmm& x, const Operand& op) { vpcmpgtb(x, x, op); }$/;"	f
vpcmpgtb	xbyak/xbyak_mnemonic.h	/^void vpcmpgtb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0x64); }$/;"	f
vpcmpgtd	xbyak/xbyak_mnemonic.h	/^void vpcmpgtd(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x66); }$/;"	f
vpcmpgtd	xbyak/xbyak_mnemonic.h	/^void vpcmpgtd(const Xmm& x, const Operand& op) { vpcmpgtd(x, x, op); }$/;"	f
vpcmpgtd	xbyak/xbyak_mnemonic.h	/^void vpcmpgtd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0x66); }$/;"	f
vpcmpgtq	xbyak/xbyak_mnemonic.h	/^void vpcmpgtq(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x37); }$/;"	f
vpcmpgtq	xbyak/xbyak_mnemonic.h	/^void vpcmpgtq(const Xmm& x, const Operand& op) { vpcmpgtq(x, x, op); }$/;"	f
vpcmpgtq	xbyak/xbyak_mnemonic.h	/^void vpcmpgtq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x37); }$/;"	f
vpcmpgtw	xbyak/xbyak_mnemonic.h	/^void vpcmpgtw(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F | T_YMM | T_MUST_EVEX, 0x65); }$/;"	f
vpcmpgtw	xbyak/xbyak_mnemonic.h	/^void vpcmpgtw(const Xmm& x, const Operand& op) { vpcmpgtw(x, x, op); }$/;"	f
vpcmpgtw	xbyak/xbyak_mnemonic.h	/^void vpcmpgtw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0x65); }$/;"	f
vpcmpistri	xbyak/xbyak_mnemonic.h	/^void vpcmpistri(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A, 0x63, imm); }$/;"	f
vpcmpistrm	xbyak/xbyak_mnemonic.h	/^void vpcmpistrm(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A, 0x62, imm); }$/;"	f
vpcmpq	xbyak/xbyak_mnemonic.h	/^void vpcmpq(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x1F, imm); }$/;"	f
vpcmpub	xbyak/xbyak_mnemonic.h	/^void vpcmpub(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX, 0x3E, imm); }$/;"	f
vpcmpud	xbyak/xbyak_mnemonic.h	/^void vpcmpud(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x1E, imm); }$/;"	f
vpcmpuq	xbyak/xbyak_mnemonic.h	/^void vpcmpuq(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x1E, imm); }$/;"	f
vpcmpuw	xbyak/xbyak_mnemonic.h	/^void vpcmpuw(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x3E, imm); }$/;"	f
vpcmpw	xbyak/xbyak_mnemonic.h	/^void vpcmpw(const Opmask& k, const Xmm& x, const Operand& op, uint8_t imm) { opAVX_K_X_XM(k, x, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX, 0x3F, imm); }$/;"	f
vpcompressd	xbyak/xbyak_mnemonic.h	/^void vpcompressd(const Operand& op, const Xmm& x) { opAVX_X_XM_IMM(x, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x8B); }$/;"	f
vpcompressq	xbyak/xbyak_mnemonic.h	/^void vpcompressq(const Operand& op, const Xmm& x) { opAVX_X_XM_IMM(x, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x8B); }$/;"	f
vpconflictd	xbyak/xbyak_mnemonic.h	/^void vpconflictd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0xC4); }$/;"	f
vpconflictq	xbyak/xbyak_mnemonic.h	/^void vpconflictq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0xC4); }$/;"	f
vpdpbssd	xbyak/xbyak_mnemonic.h	/^void vpdpbssd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F2 | T_0F38 | T_W0 | T_YMM, 0x50); }$/;"	f
vpdpbssds	xbyak/xbyak_mnemonic.h	/^void vpdpbssds(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F2 | T_0F38 | T_W0 | T_YMM, 0x51); }$/;"	f
vpdpbsud	xbyak/xbyak_mnemonic.h	/^void vpdpbsud(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_0F38 | T_W0 | T_YMM, 0x50); }$/;"	f
vpdpbsuds	xbyak/xbyak_mnemonic.h	/^void vpdpbsuds(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_0F38 | T_W0 | T_YMM, 0x51); }$/;"	f
vpdpbusd	xbyak/xbyak_mnemonic.h	/^void vpdpbusd(const Xmm& x1, const Xmm& x2, const Operand& op, PreferredEncoding encoding = DefaultEncoding) { opEncoding(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_B32, 0x50, encoding); }$/;"	f
vpdpbusds	xbyak/xbyak_mnemonic.h	/^void vpdpbusds(const Xmm& x1, const Xmm& x2, const Operand& op, PreferredEncoding encoding = DefaultEncoding) { opEncoding(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_B32, 0x51, encoding); }$/;"	f
vpdpbuud	xbyak/xbyak_mnemonic.h	/^void vpdpbuud(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_0F38 | T_W0 | T_YMM, 0x50); }$/;"	f
vpdpbuuds	xbyak/xbyak_mnemonic.h	/^void vpdpbuuds(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_0F38 | T_W0 | T_YMM, 0x51); }$/;"	f
vpdpwssd	xbyak/xbyak_mnemonic.h	/^void vpdpwssd(const Xmm& x1, const Xmm& x2, const Operand& op, PreferredEncoding encoding = DefaultEncoding) { opEncoding(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_B32, 0x52, encoding); }$/;"	f
vpdpwssds	xbyak/xbyak_mnemonic.h	/^void vpdpwssds(const Xmm& x1, const Xmm& x2, const Operand& op, PreferredEncoding encoding = DefaultEncoding) { opEncoding(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_B32, 0x53, encoding); }$/;"	f
vperm2f128	xbyak/xbyak_mnemonic.h	/^void vperm2f128(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { if (!(y1.isYMM() && y2.isYMM() && op.isYMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(y1, &y2, op, T_0F3A | T_66 | T_W0 | T_YMM, 0x06, imm); }$/;"	f
vperm2i128	xbyak/xbyak_mnemonic.h	/^void vperm2i128(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { if (!(y1.isYMM() && y2.isYMM() && op.isYMEM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(y1, &y2, op, T_0F3A | T_66 | T_W0 | T_YMM, 0x46, imm); }$/;"	f
vpermb	xbyak/xbyak_mnemonic.h	/^void vpermb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x8D); }$/;"	f
vpermd	xbyak/xbyak_mnemonic.h	/^void vpermd(const Ymm& y1, const Ymm& y2, const Operand& op) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x36); }$/;"	f
vpermi2b	xbyak/xbyak_mnemonic.h	/^void vpermi2b(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x75); }$/;"	f
vpermi2d	xbyak/xbyak_mnemonic.h	/^void vpermi2d(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x76); }$/;"	f
vpermi2pd	xbyak/xbyak_mnemonic.h	/^void vpermi2pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x77); }$/;"	f
vpermi2ps	xbyak/xbyak_mnemonic.h	/^void vpermi2ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x77); }$/;"	f
vpermi2q	xbyak/xbyak_mnemonic.h	/^void vpermi2q(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x76); }$/;"	f
vpermi2w	xbyak/xbyak_mnemonic.h	/^void vpermi2w(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x75); }$/;"	f
vpermilpd	xbyak/xbyak_mnemonic.h	/^void vpermilpd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x0D); }$/;"	f
vpermilpd	xbyak/xbyak_mnemonic.h	/^void vpermilpd(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_EVEX | T_B64, 0x05, imm); }$/;"	f
vpermilps	xbyak/xbyak_mnemonic.h	/^void vpermilps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x0C); }$/;"	f
vpermilps	xbyak/xbyak_mnemonic.h	/^void vpermilps(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_EVEX | T_B32, 0x04, imm); }$/;"	f
vpermpd	xbyak/xbyak_mnemonic.h	/^void vpermpd(const Ymm& y, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(y, op, T_66 | T_0F3A | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x01, imm); }$/;"	f
vpermpd	xbyak/xbyak_mnemonic.h	/^void vpermpd(const Ymm& y1, const Ymm& y2, const Operand& op) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x16); }$/;"	f
vpermps	xbyak/xbyak_mnemonic.h	/^void vpermps(const Ymm& y1, const Ymm& y2, const Operand& op) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x16); }$/;"	f
vpermq	xbyak/xbyak_mnemonic.h	/^void vpermq(const Ymm& y, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(y, op, T_66 | T_0F3A | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x00, imm); }$/;"	f
vpermq	xbyak/xbyak_mnemonic.h	/^void vpermq(const Ymm& y1, const Ymm& y2, const Operand& op) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F38 | T_W0 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x36); }$/;"	f
vpermt2b	xbyak/xbyak_mnemonic.h	/^void vpermt2b(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x7D); }$/;"	f
vpermt2d	xbyak/xbyak_mnemonic.h	/^void vpermt2d(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x7E); }$/;"	f
vpermt2pd	xbyak/xbyak_mnemonic.h	/^void vpermt2pd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x7F); }$/;"	f
vpermt2ps	xbyak/xbyak_mnemonic.h	/^void vpermt2ps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x7F); }$/;"	f
vpermt2q	xbyak/xbyak_mnemonic.h	/^void vpermt2q(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x7E); }$/;"	f
vpermt2w	xbyak/xbyak_mnemonic.h	/^void vpermt2w(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x7D); }$/;"	f
vpermw	xbyak/xbyak_mnemonic.h	/^void vpermw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x8D); }$/;"	f
vpexpandb	xbyak/xbyak_mnemonic.h	/^void vpexpandb(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_N1 | T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x62); }$/;"	f
vpexpandd	xbyak/xbyak_mnemonic.h	/^void vpexpandd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x89); }$/;"	f
vpexpandq	xbyak/xbyak_mnemonic.h	/^void vpexpandq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x89); }$/;"	f
vpexpandw	xbyak/xbyak_mnemonic.h	/^void vpexpandw(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_N2 | T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x62); }$/;"	f
vpextrb	xbyak/xbyak_mnemonic.h	/^void vpextrb(const Operand& op, const Xmm& x, uint8_t imm) { if (!((op.isREG(8|16|i32e) || op.isMEM()) && x.isXMM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x, 0, op, T_0F3A | T_66 | T_EVEX | T_N1, 0x14, imm); }$/;"	f
vpextrd	xbyak/xbyak_mnemonic.h	/^void vpextrd(const Operand& op, const Xmm& x, uint8_t imm) { if (!((op.isREG(32) || op.isMEM()) && x.isXMM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x, 0, op, T_0F3A | T_66 | T_W0 | T_EVEX | T_EW0 | T_N4, 0x16, imm); }$/;"	f
vpextrq	xbyak/xbyak_mnemonic.h	/^void vpextrq(const Operand& op, const Xmm& x, uint8_t imm) { if (!((op.isREG(64) || op.isMEM()) && x.isXMM())) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x, 0, op, T_0F3A | T_66 | T_W1 | T_EVEX | T_EW1 | T_N8, 0x16, imm); }$/;"	f
vpextrw	xbyak/xbyak_mnemonic.h	/^void vpextrw(const Operand& op, const Xmm& x, uint8_t imm) { if (!((op.isREG(16|i32e) || op.isMEM()) && x.isXMM())) XBYAK_THROW(ERR_BAD_COMBINATION) if (op.isREG() && x.getIdx() < 16) { opAVX_X_X_XM(Xmm(op.getIdx()), xm0, x, T_0F | T_66, 0xC5, imm); } else { opVex(x, 0, op, T_0F3A | T_66 | T_EVEX | T_N2, 0x15, imm); } }$/;"	f
vpgatherdd	xbyak/xbyak_mnemonic.h	/^void vpgatherdd(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_VSIB, 0x90, 0); }$/;"	f
vpgatherdd	xbyak/xbyak_mnemonic.h	/^void vpgatherdd(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W0, 0x90, 1); }$/;"	f
vpgatherdq	xbyak/xbyak_mnemonic.h	/^void vpgatherdq(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_VSIB, 0x90, 1); }$/;"	f
vpgatherdq	xbyak/xbyak_mnemonic.h	/^void vpgatherdq(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W1, 0x90, 0); }$/;"	f
vpgatherqd	xbyak/xbyak_mnemonic.h	/^void vpgatherqd(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_VSIB, 0x91, 2); }$/;"	f
vpgatherqd	xbyak/xbyak_mnemonic.h	/^void vpgatherqd(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W0, 0x91, 2); }$/;"	f
vpgatherqq	xbyak/xbyak_mnemonic.h	/^void vpgatherqq(const Xmm& x, const Address& addr) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_VSIB, 0x91, 0); }$/;"	f
vpgatherqq	xbyak/xbyak_mnemonic.h	/^void vpgatherqq(const Xmm& x1, const Address& addr, const Xmm& x2) { opGather(x1, addr, x2, T_0F38 | T_66 | T_YMM | T_VSIB | T_W1, 0x91, 1); }$/;"	f
vphaddd	xbyak/xbyak_mnemonic.h	/^void vphaddd(const Xmm& x, const Operand& op) { vphaddd(x, x, op); }$/;"	f
vphaddd	xbyak/xbyak_mnemonic.h	/^void vphaddd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x02); }$/;"	f
vphaddsw	xbyak/xbyak_mnemonic.h	/^void vphaddsw(const Xmm& x, const Operand& op) { vphaddsw(x, x, op); }$/;"	f
vphaddsw	xbyak/xbyak_mnemonic.h	/^void vphaddsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x03); }$/;"	f
vphaddw	xbyak/xbyak_mnemonic.h	/^void vphaddw(const Xmm& x, const Operand& op) { vphaddw(x, x, op); }$/;"	f
vphaddw	xbyak/xbyak_mnemonic.h	/^void vphaddw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x01); }$/;"	f
vphminposuw	xbyak/xbyak_mnemonic.h	/^void vphminposuw(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38, 0x41); }$/;"	f
vphsubd	xbyak/xbyak_mnemonic.h	/^void vphsubd(const Xmm& x, const Operand& op) { vphsubd(x, x, op); }$/;"	f
vphsubd	xbyak/xbyak_mnemonic.h	/^void vphsubd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x06); }$/;"	f
vphsubsw	xbyak/xbyak_mnemonic.h	/^void vphsubsw(const Xmm& x, const Operand& op) { vphsubsw(x, x, op); }$/;"	f
vphsubsw	xbyak/xbyak_mnemonic.h	/^void vphsubsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x07); }$/;"	f
vphsubw	xbyak/xbyak_mnemonic.h	/^void vphsubw(const Xmm& x, const Operand& op) { vphsubw(x, x, op); }$/;"	f
vphsubw	xbyak/xbyak_mnemonic.h	/^void vphsubw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x05); }$/;"	f
vpinsrb	xbyak/xbyak_mnemonic.h	/^void vpinsrb(const Xmm& x, const Operand& op, uint8_t imm) { vpinsrb(x, x, op, imm); }$/;"	f
vpinsrb	xbyak/xbyak_mnemonic.h	/^void vpinsrb(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { if (!(x1.isXMM() && x2.isXMM() && (op.isREG(32) || op.isMEM()))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x1, &x2, op, T_0F3A | T_66 | T_EVEX | T_N1, 0x20, imm); }$/;"	f
vpinsrd	xbyak/xbyak_mnemonic.h	/^void vpinsrd(const Xmm& x, const Operand& op, uint8_t imm) { vpinsrd(x, x, op, imm); }$/;"	f
vpinsrd	xbyak/xbyak_mnemonic.h	/^void vpinsrd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { if (!(x1.isXMM() && x2.isXMM() && (op.isREG(32) || op.isMEM()))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x1, &x2, op, T_0F3A | T_66 | T_W0 | T_EVEX | T_EW0 | T_N4, 0x22, imm); }$/;"	f
vpinsrq	xbyak/xbyak_mnemonic.h	/^void vpinsrq(const Xmm& x, const Operand& op, uint8_t imm) { vpinsrq(x, x, op, imm); }$/;"	f
vpinsrq	xbyak/xbyak_mnemonic.h	/^void vpinsrq(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { if (!(x1.isXMM() && x2.isXMM() && (op.isREG(64) || op.isMEM()))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x1, &x2, op, T_0F3A | T_66 | T_W1 | T_EVEX | T_EW1 | T_N8, 0x22, imm); }$/;"	f
vpinsrw	xbyak/xbyak_mnemonic.h	/^void vpinsrw(const Xmm& x, const Operand& op, uint8_t imm) { vpinsrw(x, x, op, imm); }$/;"	f
vpinsrw	xbyak/xbyak_mnemonic.h	/^void vpinsrw(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { if (!(x1.isXMM() && x2.isXMM() && (op.isREG(32) || op.isMEM()))) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x1, &x2, op, T_0F | T_66 | T_EVEX | T_N2, 0xC4, imm); }$/;"	f
vplzcntd	xbyak/xbyak_mnemonic.h	/^void vplzcntd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x44); }$/;"	f
vplzcntq	xbyak/xbyak_mnemonic.h	/^void vplzcntq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x44); }$/;"	f
vpmadd52huq	xbyak/xbyak_mnemonic.h	/^void vpmadd52huq(const Xmm& x1, const Xmm& x2, const Operand& op, PreferredEncoding encoding = DefaultEncoding) { opEncoding(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_B64, 0xB5, encoding); }$/;"	f
vpmadd52luq	xbyak/xbyak_mnemonic.h	/^void vpmadd52luq(const Xmm& x1, const Xmm& x2, const Operand& op, PreferredEncoding encoding = DefaultEncoding) { opEncoding(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_B64, 0xB4, encoding); }$/;"	f
vpmaddubsw	xbyak/xbyak_mnemonic.h	/^void vpmaddubsw(const Xmm& x, const Operand& op) { vpmaddubsw(x, x, op); }$/;"	f
vpmaddubsw	xbyak/xbyak_mnemonic.h	/^void vpmaddubsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x04); }$/;"	f
vpmaddwd	xbyak/xbyak_mnemonic.h	/^void vpmaddwd(const Xmm& x, const Operand& op) { vpmaddwd(x, x, op); }$/;"	f
vpmaddwd	xbyak/xbyak_mnemonic.h	/^void vpmaddwd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xF5); }$/;"	f
vpmaskmovd	xbyak/xbyak_mnemonic.h	/^void vpmaskmovd(const Address& addr, const Xmm& x1, const Xmm& x2) { opAVX_X_X_XM(x2, x1, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x8E); }$/;"	f
vpmaskmovd	xbyak/xbyak_mnemonic.h	/^void vpmaskmovd(const Xmm& x1, const Xmm& x2, const Address& addr) { opAVX_X_X_XM(x1, x2, addr, T_0F38 | T_66 | T_W0 | T_YMM, 0x8C); }$/;"	f
vpmaskmovq	xbyak/xbyak_mnemonic.h	/^void vpmaskmovq(const Address& addr, const Xmm& x1, const Xmm& x2) { opAVX_X_X_XM(x2, x1, addr, T_0F38 | T_66 | T_W1 | T_YMM, 0x8E); }$/;"	f
vpmaskmovq	xbyak/xbyak_mnemonic.h	/^void vpmaskmovq(const Xmm& x1, const Xmm& x2, const Address& addr) { opAVX_X_X_XM(x1, x2, addr, T_0F38 | T_66 | T_W1 | T_YMM, 0x8C); }$/;"	f
vpmaxsb	xbyak/xbyak_mnemonic.h	/^void vpmaxsb(const Xmm& x, const Operand& op) { vpmaxsb(x, x, op); }$/;"	f
vpmaxsb	xbyak/xbyak_mnemonic.h	/^void vpmaxsb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x3C); }$/;"	f
vpmaxsd	xbyak/xbyak_mnemonic.h	/^void vpmaxsd(const Xmm& x, const Operand& op) { vpmaxsd(x, x, op); }$/;"	f
vpmaxsd	xbyak/xbyak_mnemonic.h	/^void vpmaxsd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x3D); }$/;"	f
vpmaxsq	xbyak/xbyak_mnemonic.h	/^void vpmaxsq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x3D); }$/;"	f
vpmaxsw	xbyak/xbyak_mnemonic.h	/^void vpmaxsw(const Xmm& x, const Operand& op) { vpmaxsw(x, x, op); }$/;"	f
vpmaxsw	xbyak/xbyak_mnemonic.h	/^void vpmaxsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xEE); }$/;"	f
vpmaxub	xbyak/xbyak_mnemonic.h	/^void vpmaxub(const Xmm& x, const Operand& op) { vpmaxub(x, x, op); }$/;"	f
vpmaxub	xbyak/xbyak_mnemonic.h	/^void vpmaxub(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xDE); }$/;"	f
vpmaxud	xbyak/xbyak_mnemonic.h	/^void vpmaxud(const Xmm& x, const Operand& op) { vpmaxud(x, x, op); }$/;"	f
vpmaxud	xbyak/xbyak_mnemonic.h	/^void vpmaxud(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x3F); }$/;"	f
vpmaxuq	xbyak/xbyak_mnemonic.h	/^void vpmaxuq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x3F); }$/;"	f
vpmaxuw	xbyak/xbyak_mnemonic.h	/^void vpmaxuw(const Xmm& x, const Operand& op) { vpmaxuw(x, x, op); }$/;"	f
vpmaxuw	xbyak/xbyak_mnemonic.h	/^void vpmaxuw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x3E); }$/;"	f
vpminsb	xbyak/xbyak_mnemonic.h	/^void vpminsb(const Xmm& x, const Operand& op) { vpminsb(x, x, op); }$/;"	f
vpminsb	xbyak/xbyak_mnemonic.h	/^void vpminsb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x38); }$/;"	f
vpminsd	xbyak/xbyak_mnemonic.h	/^void vpminsd(const Xmm& x, const Operand& op) { vpminsd(x, x, op); }$/;"	f
vpminsd	xbyak/xbyak_mnemonic.h	/^void vpminsd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x39); }$/;"	f
vpminsq	xbyak/xbyak_mnemonic.h	/^void vpminsq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x39); }$/;"	f
vpminsw	xbyak/xbyak_mnemonic.h	/^void vpminsw(const Xmm& x, const Operand& op) { vpminsw(x, x, op); }$/;"	f
vpminsw	xbyak/xbyak_mnemonic.h	/^void vpminsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xEA); }$/;"	f
vpminub	xbyak/xbyak_mnemonic.h	/^void vpminub(const Xmm& x, const Operand& op) { vpminub(x, x, op); }$/;"	f
vpminub	xbyak/xbyak_mnemonic.h	/^void vpminub(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xDA); }$/;"	f
vpminud	xbyak/xbyak_mnemonic.h	/^void vpminud(const Xmm& x, const Operand& op) { vpminud(x, x, op); }$/;"	f
vpminud	xbyak/xbyak_mnemonic.h	/^void vpminud(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x3B); }$/;"	f
vpminuq	xbyak/xbyak_mnemonic.h	/^void vpminuq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x3B); }$/;"	f
vpminuw	xbyak/xbyak_mnemonic.h	/^void vpminuw(const Xmm& x, const Operand& op) { vpminuw(x, x, op); }$/;"	f
vpminuw	xbyak/xbyak_mnemonic.h	/^void vpminuw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x3A); }$/;"	f
vpmovb2m	xbyak/xbyak_mnemonic.h	/^void vpmovb2m(const Opmask& k, const Xmm& x) { opVex(k, 0, x, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW0, 0x29); }$/;"	f
vpmovd2m	xbyak/xbyak_mnemonic.h	/^void vpmovd2m(const Opmask& k, const Xmm& x) { opVex(k, 0, x, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW0, 0x39); }$/;"	f
vpmovdb	xbyak/xbyak_mnemonic.h	/^void vpmovdb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N4 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x31, false); }$/;"	f
vpmovdw	xbyak/xbyak_mnemonic.h	/^void vpmovdw(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x33, true); }$/;"	f
vpmovm2b	xbyak/xbyak_mnemonic.h	/^void vpmovm2b(const Xmm& x, const Opmask& k) { opVex(x, 0, k, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW0, 0x28); }$/;"	f
vpmovm2d	xbyak/xbyak_mnemonic.h	/^void vpmovm2d(const Xmm& x, const Opmask& k) { opVex(x, 0, k, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW0, 0x38); }$/;"	f
vpmovm2q	xbyak/xbyak_mnemonic.h	/^void vpmovm2q(const Xmm& x, const Opmask& k) { opVex(x, 0, k, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW1, 0x38); }$/;"	f
vpmovm2w	xbyak/xbyak_mnemonic.h	/^void vpmovm2w(const Xmm& x, const Opmask& k) { opVex(x, 0, k, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW1, 0x28); }$/;"	f
vpmovmskb	xbyak/xbyak_mnemonic.h	/^void vpmovmskb(const Reg32e& r, const Xmm& x) { if (!x.is(Operand::XMM | Operand::YMM)) XBYAK_THROW(ERR_BAD_COMBINATION) opVex(x.isYMM() ? Ymm(r.getIdx()) : Xmm(r.getIdx()), 0, x, T_0F | T_66 | T_YMM, 0xD7); }$/;"	f
vpmovq2m	xbyak/xbyak_mnemonic.h	/^void vpmovq2m(const Opmask& k, const Xmm& x) { opVex(k, 0, x, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW1, 0x39); }$/;"	f
vpmovqb	xbyak/xbyak_mnemonic.h	/^void vpmovqb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N2 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x32, false); }$/;"	f
vpmovqd	xbyak/xbyak_mnemonic.h	/^void vpmovqd(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x35, true); }$/;"	f
vpmovqw	xbyak/xbyak_mnemonic.h	/^void vpmovqw(const Operand& op, const Xmm& x) { opVmov(op, x, T_N4 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x34, false); }$/;"	f
vpmovsdb	xbyak/xbyak_mnemonic.h	/^void vpmovsdb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N4 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x21, false); }$/;"	f
vpmovsdw	xbyak/xbyak_mnemonic.h	/^void vpmovsdw(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x23, true); }$/;"	f
vpmovsqb	xbyak/xbyak_mnemonic.h	/^void vpmovsqb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N2 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x22, false); }$/;"	f
vpmovsqd	xbyak/xbyak_mnemonic.h	/^void vpmovsqd(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x25, true); }$/;"	f
vpmovsqw	xbyak/xbyak_mnemonic.h	/^void vpmovsqw(const Operand& op, const Xmm& x) { opVmov(op, x, T_N4 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x24, false); }$/;"	f
vpmovswb	xbyak/xbyak_mnemonic.h	/^void vpmovswb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x20, true); }$/;"	f
vpmovsxbd	xbyak/xbyak_mnemonic.h	/^void vpmovsxbd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N4 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x21); }$/;"	f
vpmovsxbq	xbyak/xbyak_mnemonic.h	/^void vpmovsxbq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N2 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x22); }$/;"	f
vpmovsxbw	xbyak/xbyak_mnemonic.h	/^void vpmovsxbw(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x20); }$/;"	f
vpmovsxdq	xbyak/xbyak_mnemonic.h	/^void vpmovsxdq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_N_VL | T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX, 0x25); }$/;"	f
vpmovsxwd	xbyak/xbyak_mnemonic.h	/^void vpmovsxwd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x23); }$/;"	f
vpmovsxwq	xbyak/xbyak_mnemonic.h	/^void vpmovsxwq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N4 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x24); }$/;"	f
vpmovusdb	xbyak/xbyak_mnemonic.h	/^void vpmovusdb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N4 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x11, false); }$/;"	f
vpmovusdw	xbyak/xbyak_mnemonic.h	/^void vpmovusdw(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x13, true); }$/;"	f
vpmovusqb	xbyak/xbyak_mnemonic.h	/^void vpmovusqb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N2 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x12, false); }$/;"	f
vpmovusqd	xbyak/xbyak_mnemonic.h	/^void vpmovusqd(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x15, true); }$/;"	f
vpmovusqw	xbyak/xbyak_mnemonic.h	/^void vpmovusqw(const Operand& op, const Xmm& x) { opVmov(op, x, T_N4 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x14, false); }$/;"	f
vpmovuswb	xbyak/xbyak_mnemonic.h	/^void vpmovuswb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x10, true); }$/;"	f
vpmovw2m	xbyak/xbyak_mnemonic.h	/^void vpmovw2m(const Opmask& k, const Xmm& x) { opVex(k, 0, x, T_F3 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW1, 0x29); }$/;"	f
vpmovwb	xbyak/xbyak_mnemonic.h	/^void vpmovwb(const Operand& op, const Xmm& x) { opVmov(op, x, T_N8 | T_N_VL | T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K, 0x30, true); }$/;"	f
vpmovzxbd	xbyak/xbyak_mnemonic.h	/^void vpmovzxbd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N4 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x31); }$/;"	f
vpmovzxbq	xbyak/xbyak_mnemonic.h	/^void vpmovzxbq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N2 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x32); }$/;"	f
vpmovzxbw	xbyak/xbyak_mnemonic.h	/^void vpmovzxbw(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x30); }$/;"	f
vpmovzxdq	xbyak/xbyak_mnemonic.h	/^void vpmovzxdq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_N_VL | T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX, 0x35); }$/;"	f
vpmovzxwd	xbyak/xbyak_mnemonic.h	/^void vpmovzxwd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x33); }$/;"	f
vpmovzxwq	xbyak/xbyak_mnemonic.h	/^void vpmovzxwq(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N4 | T_N_VL | T_66 | T_0F38 | T_YMM | T_EVEX, 0x34); }$/;"	f
vpmuldq	xbyak/xbyak_mnemonic.h	/^void vpmuldq(const Xmm& x, const Operand& op) { vpmuldq(x, x, op); }$/;"	f
vpmuldq	xbyak/xbyak_mnemonic.h	/^void vpmuldq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x28); }$/;"	f
vpmulhrsw	xbyak/xbyak_mnemonic.h	/^void vpmulhrsw(const Xmm& x, const Operand& op) { vpmulhrsw(x, x, op); }$/;"	f
vpmulhrsw	xbyak/xbyak_mnemonic.h	/^void vpmulhrsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x0B); }$/;"	f
vpmulhuw	xbyak/xbyak_mnemonic.h	/^void vpmulhuw(const Xmm& x, const Operand& op) { vpmulhuw(x, x, op); }$/;"	f
vpmulhuw	xbyak/xbyak_mnemonic.h	/^void vpmulhuw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xE4); }$/;"	f
vpmulhw	xbyak/xbyak_mnemonic.h	/^void vpmulhw(const Xmm& x, const Operand& op) { vpmulhw(x, x, op); }$/;"	f
vpmulhw	xbyak/xbyak_mnemonic.h	/^void vpmulhw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xE5); }$/;"	f
vpmulld	xbyak/xbyak_mnemonic.h	/^void vpmulld(const Xmm& x, const Operand& op) { vpmulld(x, x, op); }$/;"	f
vpmulld	xbyak/xbyak_mnemonic.h	/^void vpmulld(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x40); }$/;"	f
vpmullq	xbyak/xbyak_mnemonic.h	/^void vpmullq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x40); }$/;"	f
vpmullw	xbyak/xbyak_mnemonic.h	/^void vpmullw(const Xmm& x, const Operand& op) { vpmullw(x, x, op); }$/;"	f
vpmullw	xbyak/xbyak_mnemonic.h	/^void vpmullw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xD5); }$/;"	f
vpmultishiftqb	xbyak/xbyak_mnemonic.h	/^void vpmultishiftqb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x83); }$/;"	f
vpmuludq	xbyak/xbyak_mnemonic.h	/^void vpmuludq(const Xmm& x, const Operand& op) { vpmuludq(x, x, op); }$/;"	f
vpmuludq	xbyak/xbyak_mnemonic.h	/^void vpmuludq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0xF4); }$/;"	f
vpopcntb	xbyak/xbyak_mnemonic.h	/^void vpopcntb(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x54); }$/;"	f
vpopcntd	xbyak/xbyak_mnemonic.h	/^void vpopcntd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x55); }$/;"	f
vpopcntq	xbyak/xbyak_mnemonic.h	/^void vpopcntq(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x55); }$/;"	f
vpopcntw	xbyak/xbyak_mnemonic.h	/^void vpopcntw(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x54); }$/;"	f
vpor	xbyak/xbyak_mnemonic.h	/^void vpor(const Xmm& x, const Operand& op) { vpor(x, x, op); }$/;"	f
vpor	xbyak/xbyak_mnemonic.h	/^void vpor(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0xEB); }$/;"	f
vpord	xbyak/xbyak_mnemonic.h	/^void vpord(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0xEB); }$/;"	f
vporq	xbyak/xbyak_mnemonic.h	/^void vporq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0xEB); }$/;"	f
vprold	xbyak/xbyak_mnemonic.h	/^void vprold(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 1), x, op, T_66 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x72, imm); }$/;"	f
vprolq	xbyak/xbyak_mnemonic.h	/^void vprolq(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 1), x, op, T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x72, imm); }$/;"	f
vprolvd	xbyak/xbyak_mnemonic.h	/^void vprolvd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x15); }$/;"	f
vprolvq	xbyak/xbyak_mnemonic.h	/^void vprolvq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x15); }$/;"	f
vprord	xbyak/xbyak_mnemonic.h	/^void vprord(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 0), x, op, T_66 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x72, imm); }$/;"	f
vprorq	xbyak/xbyak_mnemonic.h	/^void vprorq(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 0), x, op, T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x72, imm); }$/;"	f
vprorvd	xbyak/xbyak_mnemonic.h	/^void vprorvd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x14); }$/;"	f
vprorvq	xbyak/xbyak_mnemonic.h	/^void vprorvq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x14); }$/;"	f
vpsadbw	xbyak/xbyak_mnemonic.h	/^void vpsadbw(const Xmm& x, const Operand& op) { vpsadbw(x, x, op); }$/;"	f
vpsadbw	xbyak/xbyak_mnemonic.h	/^void vpsadbw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xF6); }$/;"	f
vpscatterdd	xbyak/xbyak_mnemonic.h	/^void vpscatterdd(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA0, 0); }$/;"	f
vpscatterdq	xbyak/xbyak_mnemonic.h	/^void vpscatterdq(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA0, 1); }$/;"	f
vpscatterqd	xbyak/xbyak_mnemonic.h	/^void vpscatterqd(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA1, 2); }$/;"	f
vpscatterqq	xbyak/xbyak_mnemonic.h	/^void vpscatterqq(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA1, 0); }$/;"	f
vpshldd	xbyak/xbyak_mnemonic.h	/^void vpshldd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x71, imm); }$/;"	f
vpshldq	xbyak/xbyak_mnemonic.h	/^void vpshldq(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x71, imm); }$/;"	f
vpshldvd	xbyak/xbyak_mnemonic.h	/^void vpshldvd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x71); }$/;"	f
vpshldvq	xbyak/xbyak_mnemonic.h	/^void vpshldvq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x71); }$/;"	f
vpshldvw	xbyak/xbyak_mnemonic.h	/^void vpshldvw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x70); }$/;"	f
vpshldw	xbyak/xbyak_mnemonic.h	/^void vpshldw(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x70, imm); }$/;"	f
vpshrdd	xbyak/xbyak_mnemonic.h	/^void vpshrdd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x73, imm); }$/;"	f
vpshrdq	xbyak/xbyak_mnemonic.h	/^void vpshrdq(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x73, imm); }$/;"	f
vpshrdvd	xbyak/xbyak_mnemonic.h	/^void vpshrdvd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x73); }$/;"	f
vpshrdvq	xbyak/xbyak_mnemonic.h	/^void vpshrdvq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x73); }$/;"	f
vpshrdvw	xbyak/xbyak_mnemonic.h	/^void vpshrdvw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x72); }$/;"	f
vpshrdw	xbyak/xbyak_mnemonic.h	/^void vpshrdw(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX, 0x72, imm); }$/;"	f
vpshufb	xbyak/xbyak_mnemonic.h	/^void vpshufb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM | T_EVEX, 0x00); }$/;"	f
vpshufbitqmb	xbyak/xbyak_mnemonic.h	/^void vpshufbitqmb(const Opmask& k, const Xmm& x, const Operand& op) { opVex(k, &x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x8F); }$/;"	f
vpshufd	xbyak/xbyak_mnemonic.h	/^void vpshufd(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0x70, imm); }$/;"	f
vpshufhw	xbyak/xbyak_mnemonic.h	/^void vpshufhw(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_F3 | T_0F | T_YMM | T_EVEX, 0x70, imm); }$/;"	f
vpshuflw	xbyak/xbyak_mnemonic.h	/^void vpshuflw(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_F2 | T_0F | T_YMM | T_EVEX, 0x70, imm); }$/;"	f
vpsignb	xbyak/xbyak_mnemonic.h	/^void vpsignb(const Xmm& x, const Operand& op) { vpsignb(x, x, op); }$/;"	f
vpsignb	xbyak/xbyak_mnemonic.h	/^void vpsignb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x08); }$/;"	f
vpsignd	xbyak/xbyak_mnemonic.h	/^void vpsignd(const Xmm& x, const Operand& op) { vpsignd(x, x, op); }$/;"	f
vpsignd	xbyak/xbyak_mnemonic.h	/^void vpsignd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x0A); }$/;"	f
vpsignw	xbyak/xbyak_mnemonic.h	/^void vpsignw(const Xmm& x, const Operand& op) { vpsignw(x, x, op); }$/;"	f
vpsignw	xbyak/xbyak_mnemonic.h	/^void vpsignw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_YMM, 0x09); }$/;"	f
vpslld	xbyak/xbyak_mnemonic.h	/^void vpslld(const Xmm& x, const Operand& op) { vpslld(x, x, op); }$/;"	f
vpslld	xbyak/xbyak_mnemonic.h	/^void vpslld(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 6), x, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32 | T_MEM_EVEX, 0x72, imm); }$/;"	f
vpslld	xbyak/xbyak_mnemonic.h	/^void vpslld(const Xmm& x, uint8_t imm) { vpslld(x, x, imm); }$/;"	f
vpslld	xbyak/xbyak_mnemonic.h	/^void vpslld(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_EW0 | T_YMM | T_EVEX, 0xF2); }$/;"	f
vpslldq	xbyak/xbyak_mnemonic.h	/^void vpslldq(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 7), x, op, T_66 | T_0F | T_YMM | T_EVEX | T_MEM_EVEX, 0x73, imm); }$/;"	f
vpslldq	xbyak/xbyak_mnemonic.h	/^void vpslldq(const Xmm& x, uint8_t imm) { vpslldq(x, x, imm); }$/;"	f
vpsllq	xbyak/xbyak_mnemonic.h	/^void vpsllq(const Xmm& x, const Operand& op) { vpsllq(x, x, op); }$/;"	f
vpsllq	xbyak/xbyak_mnemonic.h	/^void vpsllq(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 6), x, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64 | T_MEM_EVEX, 0x73, imm); }$/;"	f
vpsllq	xbyak/xbyak_mnemonic.h	/^void vpsllq(const Xmm& x, uint8_t imm) { vpsllq(x, x, imm); }$/;"	f
vpsllq	xbyak/xbyak_mnemonic.h	/^void vpsllq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_EW1 | T_YMM | T_EVEX, 0xF3); }$/;"	f
vpsllvd	xbyak/xbyak_mnemonic.h	/^void vpsllvd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x47); }$/;"	f
vpsllvq	xbyak/xbyak_mnemonic.h	/^void vpsllvq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x47); }$/;"	f
vpsllvw	xbyak/xbyak_mnemonic.h	/^void vpsllvw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x12); }$/;"	f
vpsllw	xbyak/xbyak_mnemonic.h	/^void vpsllw(const Xmm& x, const Operand& op) { vpsllw(x, x, op); }$/;"	f
vpsllw	xbyak/xbyak_mnemonic.h	/^void vpsllw(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 6), x, op, T_66 | T_0F | T_YMM | T_EVEX | T_MEM_EVEX, 0x71, imm); }$/;"	f
vpsllw	xbyak/xbyak_mnemonic.h	/^void vpsllw(const Xmm& x, uint8_t imm) { vpsllw(x, x, imm); }$/;"	f
vpsllw	xbyak/xbyak_mnemonic.h	/^void vpsllw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_YMM | T_EVEX, 0xF1); }$/;"	f
vpsrad	xbyak/xbyak_mnemonic.h	/^void vpsrad(const Xmm& x, const Operand& op) { vpsrad(x, x, op); }$/;"	f
vpsrad	xbyak/xbyak_mnemonic.h	/^void vpsrad(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 4), x, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32 | T_MEM_EVEX, 0x72, imm); }$/;"	f
vpsrad	xbyak/xbyak_mnemonic.h	/^void vpsrad(const Xmm& x, uint8_t imm) { vpsrad(x, x, imm); }$/;"	f
vpsrad	xbyak/xbyak_mnemonic.h	/^void vpsrad(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_EW0 | T_YMM | T_EVEX, 0xE2); }$/;"	f
vpsraq	xbyak/xbyak_mnemonic.h	/^void vpsraq(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 4), x, op, T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x72, imm); }$/;"	f
vpsraq	xbyak/xbyak_mnemonic.h	/^void vpsraq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX, 0xE2); }$/;"	f
vpsravd	xbyak/xbyak_mnemonic.h	/^void vpsravd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x46); }$/;"	f
vpsravq	xbyak/xbyak_mnemonic.h	/^void vpsravq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x46); }$/;"	f
vpsravw	xbyak/xbyak_mnemonic.h	/^void vpsravw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x11); }$/;"	f
vpsraw	xbyak/xbyak_mnemonic.h	/^void vpsraw(const Xmm& x, const Operand& op) { vpsraw(x, x, op); }$/;"	f
vpsraw	xbyak/xbyak_mnemonic.h	/^void vpsraw(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 4), x, op, T_66 | T_0F | T_YMM | T_EVEX | T_MEM_EVEX, 0x71, imm); }$/;"	f
vpsraw	xbyak/xbyak_mnemonic.h	/^void vpsraw(const Xmm& x, uint8_t imm) { vpsraw(x, x, imm); }$/;"	f
vpsraw	xbyak/xbyak_mnemonic.h	/^void vpsraw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_YMM | T_EVEX, 0xE1); }$/;"	f
vpsrld	xbyak/xbyak_mnemonic.h	/^void vpsrld(const Xmm& x, const Operand& op) { vpsrld(x, x, op); }$/;"	f
vpsrld	xbyak/xbyak_mnemonic.h	/^void vpsrld(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 2), x, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32 | T_MEM_EVEX, 0x72, imm); }$/;"	f
vpsrld	xbyak/xbyak_mnemonic.h	/^void vpsrld(const Xmm& x, uint8_t imm) { vpsrld(x, x, imm); }$/;"	f
vpsrld	xbyak/xbyak_mnemonic.h	/^void vpsrld(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_EW0 | T_YMM | T_EVEX, 0xD2); }$/;"	f
vpsrldq	xbyak/xbyak_mnemonic.h	/^void vpsrldq(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 3), x, op, T_66 | T_0F | T_YMM | T_EVEX | T_MEM_EVEX, 0x73, imm); }$/;"	f
vpsrldq	xbyak/xbyak_mnemonic.h	/^void vpsrldq(const Xmm& x, uint8_t imm) { vpsrldq(x, x, imm); }$/;"	f
vpsrlq	xbyak/xbyak_mnemonic.h	/^void vpsrlq(const Xmm& x, const Operand& op) { vpsrlq(x, x, op); }$/;"	f
vpsrlq	xbyak/xbyak_mnemonic.h	/^void vpsrlq(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 2), x, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64 | T_MEM_EVEX, 0x73, imm); }$/;"	f
vpsrlq	xbyak/xbyak_mnemonic.h	/^void vpsrlq(const Xmm& x, uint8_t imm) { vpsrlq(x, x, imm); }$/;"	f
vpsrlq	xbyak/xbyak_mnemonic.h	/^void vpsrlq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_EW1 | T_YMM | T_EVEX, 0xD3); }$/;"	f
vpsrlvd	xbyak/xbyak_mnemonic.h	/^void vpsrlvd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W0 | T_EW0 | T_YMM | T_EVEX | T_B32, 0x45); }$/;"	f
vpsrlvq	xbyak/xbyak_mnemonic.h	/^void vpsrlvq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_W1 | T_EW1 | T_YMM | T_EVEX | T_B64, 0x45); }$/;"	f
vpsrlvw	xbyak/xbyak_mnemonic.h	/^void vpsrlvw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x10); }$/;"	f
vpsrlw	xbyak/xbyak_mnemonic.h	/^void vpsrlw(const Xmm& x, const Operand& op) { vpsrlw(x, x, op); }$/;"	f
vpsrlw	xbyak/xbyak_mnemonic.h	/^void vpsrlw(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_X_XM(Xmm(x.getKind(), 2), x, op, T_66 | T_0F | T_YMM | T_EVEX | T_MEM_EVEX, 0x71, imm); }$/;"	f
vpsrlw	xbyak/xbyak_mnemonic.h	/^void vpsrlw(const Xmm& x, uint8_t imm) { vpsrlw(x, x, imm); }$/;"	f
vpsrlw	xbyak/xbyak_mnemonic.h	/^void vpsrlw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N16 | T_66 | T_0F | T_YMM | T_EVEX, 0xD1); }$/;"	f
vpsubb	xbyak/xbyak_mnemonic.h	/^void vpsubb(const Xmm& x, const Operand& op) { vpsubb(x, x, op); }$/;"	f
vpsubb	xbyak/xbyak_mnemonic.h	/^void vpsubb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xF8); }$/;"	f
vpsubd	xbyak/xbyak_mnemonic.h	/^void vpsubd(const Xmm& x, const Operand& op) { vpsubd(x, x, op); }$/;"	f
vpsubd	xbyak/xbyak_mnemonic.h	/^void vpsubd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0xFA); }$/;"	f
vpsubq	xbyak/xbyak_mnemonic.h	/^void vpsubq(const Xmm& x, const Operand& op) { vpsubq(x, x, op); }$/;"	f
vpsubq	xbyak/xbyak_mnemonic.h	/^void vpsubq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0xFB); }$/;"	f
vpsubsb	xbyak/xbyak_mnemonic.h	/^void vpsubsb(const Xmm& x, const Operand& op) { vpsubsb(x, x, op); }$/;"	f
vpsubsb	xbyak/xbyak_mnemonic.h	/^void vpsubsb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xE8); }$/;"	f
vpsubsw	xbyak/xbyak_mnemonic.h	/^void vpsubsw(const Xmm& x, const Operand& op) { vpsubsw(x, x, op); }$/;"	f
vpsubsw	xbyak/xbyak_mnemonic.h	/^void vpsubsw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xE9); }$/;"	f
vpsubusb	xbyak/xbyak_mnemonic.h	/^void vpsubusb(const Xmm& x, const Operand& op) { vpsubusb(x, x, op); }$/;"	f
vpsubusb	xbyak/xbyak_mnemonic.h	/^void vpsubusb(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xD8); }$/;"	f
vpsubusw	xbyak/xbyak_mnemonic.h	/^void vpsubusw(const Xmm& x, const Operand& op) { vpsubusw(x, x, op); }$/;"	f
vpsubusw	xbyak/xbyak_mnemonic.h	/^void vpsubusw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xD9); }$/;"	f
vpsubw	xbyak/xbyak_mnemonic.h	/^void vpsubw(const Xmm& x, const Operand& op) { vpsubw(x, x, op); }$/;"	f
vpsubw	xbyak/xbyak_mnemonic.h	/^void vpsubw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0xF9); }$/;"	f
vpternlogd	xbyak/xbyak_mnemonic.h	/^void vpternlogd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x25, imm); }$/;"	f
vpternlogq	xbyak/xbyak_mnemonic.h	/^void vpternlogq(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x25, imm); }$/;"	f
vptest	xbyak/xbyak_mnemonic.h	/^void vptest(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38 | T_YMM, 0x17); }$/;"	f
vptestmb	xbyak/xbyak_mnemonic.h	/^void vptestmb(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x26); }$/;"	f
vptestmd	xbyak/xbyak_mnemonic.h	/^void vptestmd(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x27); }$/;"	f
vptestmq	xbyak/xbyak_mnemonic.h	/^void vptestmq(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x27); }$/;"	f
vptestmw	xbyak/xbyak_mnemonic.h	/^void vptestmw(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x26); }$/;"	f
vptestnmb	xbyak/xbyak_mnemonic.h	/^void vptestnmb(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x26); }$/;"	f
vptestnmd	xbyak/xbyak_mnemonic.h	/^void vptestnmd(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_F3 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x27); }$/;"	f
vptestnmq	xbyak/xbyak_mnemonic.h	/^void vptestnmq(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_F3 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x27); }$/;"	f
vptestnmw	xbyak/xbyak_mnemonic.h	/^void vptestnmw(const Opmask& k, const Xmm& x, const Operand& op) { opAVX_K_X_XM(k, x, op, T_F3 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x26); }$/;"	f
vpunpckhbw	xbyak/xbyak_mnemonic.h	/^void vpunpckhbw(const Xmm& x, const Operand& op) { vpunpckhbw(x, x, op); }$/;"	f
vpunpckhbw	xbyak/xbyak_mnemonic.h	/^void vpunpckhbw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0x68); }$/;"	f
vpunpckhdq	xbyak/xbyak_mnemonic.h	/^void vpunpckhdq(const Xmm& x, const Operand& op) { vpunpckhdq(x, x, op); }$/;"	f
vpunpckhdq	xbyak/xbyak_mnemonic.h	/^void vpunpckhdq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0x6A); }$/;"	f
vpunpckhqdq	xbyak/xbyak_mnemonic.h	/^void vpunpckhqdq(const Xmm& x, const Operand& op) { vpunpckhqdq(x, x, op); }$/;"	f
vpunpckhqdq	xbyak/xbyak_mnemonic.h	/^void vpunpckhqdq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0x6D); }$/;"	f
vpunpckhwd	xbyak/xbyak_mnemonic.h	/^void vpunpckhwd(const Xmm& x, const Operand& op) { vpunpckhwd(x, x, op); }$/;"	f
vpunpckhwd	xbyak/xbyak_mnemonic.h	/^void vpunpckhwd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0x69); }$/;"	f
vpunpcklbw	xbyak/xbyak_mnemonic.h	/^void vpunpcklbw(const Xmm& x, const Operand& op) { vpunpcklbw(x, x, op); }$/;"	f
vpunpcklbw	xbyak/xbyak_mnemonic.h	/^void vpunpcklbw(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0x60); }$/;"	f
vpunpckldq	xbyak/xbyak_mnemonic.h	/^void vpunpckldq(const Xmm& x, const Operand& op) { vpunpckldq(x, x, op); }$/;"	f
vpunpckldq	xbyak/xbyak_mnemonic.h	/^void vpunpckldq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0x62); }$/;"	f
vpunpcklqdq	xbyak/xbyak_mnemonic.h	/^void vpunpcklqdq(const Xmm& x, const Operand& op) { vpunpcklqdq(x, x, op); }$/;"	f
vpunpcklqdq	xbyak/xbyak_mnemonic.h	/^void vpunpcklqdq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0x6C); }$/;"	f
vpunpcklwd	xbyak/xbyak_mnemonic.h	/^void vpunpcklwd(const Xmm& x, const Operand& op) { vpunpcklwd(x, x, op); }$/;"	f
vpunpcklwd	xbyak/xbyak_mnemonic.h	/^void vpunpcklwd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM | T_EVEX, 0x61); }$/;"	f
vpxor	xbyak/xbyak_mnemonic.h	/^void vpxor(const Xmm& x, const Operand& op) { vpxor(x, x, op); }$/;"	f
vpxor	xbyak/xbyak_mnemonic.h	/^void vpxor(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_YMM, 0xEF); }$/;"	f
vpxord	xbyak/xbyak_mnemonic.h	/^void vpxord(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0xEF); }$/;"	f
vpxorq	xbyak/xbyak_mnemonic.h	/^void vpxorq(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0xEF); }$/;"	f
vrangepd	xbyak/xbyak_mnemonic.h	/^void vrangepd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x50, imm); }$/;"	f
vrangeps	xbyak/xbyak_mnemonic.h	/^void vrangeps(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x50, imm); }$/;"	f
vrangesd	xbyak/xbyak_mnemonic.h	/^void vrangesd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F3A | T_EW1 | T_SAE_X | T_MUST_EVEX, 0x51, imm); }$/;"	f
vrangess	xbyak/xbyak_mnemonic.h	/^void vrangess(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x51, imm); }$/;"	f
vrcp14pd	xbyak/xbyak_mnemonic.h	/^void vrcp14pd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x4C); }$/;"	f
vrcp14ps	xbyak/xbyak_mnemonic.h	/^void vrcp14ps(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x4C); }$/;"	f
vrcp14sd	xbyak/xbyak_mnemonic.h	/^void vrcp14sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX, 0x4D); }$/;"	f
vrcp14ss	xbyak/xbyak_mnemonic.h	/^void vrcp14ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX, 0x4D); }$/;"	f
vrcp28pd	xbyak/xbyak_mnemonic.h	/^void vrcp28pd(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW1 | T_B64 | T_SAE_Z, 0xCA); }$/;"	f
vrcp28ps	xbyak/xbyak_mnemonic.h	/^void vrcp28ps(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW0 | T_B32 | T_SAE_Z, 0xCA); }$/;"	f
vrcp28sd	xbyak/xbyak_mnemonic.h	/^void vrcp28sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_SAE_X | T_MUST_EVEX, 0xCB); }$/;"	f
vrcp28ss	xbyak/xbyak_mnemonic.h	/^void vrcp28ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_SAE_X | T_MUST_EVEX, 0xCB); }$/;"	f
vrcpph	xbyak/xbyak_mnemonic.h	/^void vrcpph(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_MUST_EVEX | T_B16, 0x4C); }$/;"	f
vrcpps	xbyak/xbyak_mnemonic.h	/^void vrcpps(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_0F | T_YMM, 0x53); }$/;"	f
vrcpsh	xbyak/xbyak_mnemonic.h	/^void vrcpsh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_MUST_EVEX, 0x4D); }$/;"	f
vrcpss	xbyak/xbyak_mnemonic.h	/^void vrcpss(const Xmm& x, const Operand& op) { vrcpss(x, x, op); }$/;"	f
vrcpss	xbyak/xbyak_mnemonic.h	/^void vrcpss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_0F, 0x53); }$/;"	f
vreducepd	xbyak/xbyak_mnemonic.h	/^void vreducepd(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x56, imm); }$/;"	f
vreduceph	xbyak/xbyak_mnemonic.h	/^void vreduceph(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B16, 0x56, imm); }$/;"	f
vreduceps	xbyak/xbyak_mnemonic.h	/^void vreduceps(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x56, imm); }$/;"	f
vreducesd	xbyak/xbyak_mnemonic.h	/^void vreducesd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F3A | T_EW1 | T_SAE_X | T_MUST_EVEX, 0x57, imm); }$/;"	f
vreducesh	xbyak/xbyak_mnemonic.h	/^void vreducesh(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x57, imm); }$/;"	f
vreducess	xbyak/xbyak_mnemonic.h	/^void vreducess(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x57, imm); }$/;"	f
vreg_pop	jit_base.hpp	/^  void vreg_pop(const Xbyak::Reg64& baseaddr) {$/;"	f	class:jblas::xbyak::JitBase
vreg_push	jit_base.hpp	/^  void vreg_push(const Xbyak::Reg64& baseaddr) {$/;"	f	class:jblas::xbyak::JitBase
vreg_t	jit_base.hpp	/^  typedef Xbyak::Ymm vreg_t;$/;"	t	class:jblas::xbyak::JitAvx
vreg_t	jit_base.hpp	/^  typedef Xbyak::Ymm vreg_t;$/;"	t	class:jblas::xbyak::JitAvx2
vreg_t	jit_base.hpp	/^  typedef Xbyak::Zmm vreg_t;$/;"	t	class:jblas::xbyak::JitAvx512f
vrndscalepd	xbyak/xbyak_mnemonic.h	/^void vrndscalepd(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_66 | T_0F3A | T_EW1 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B64, 0x09, imm); }$/;"	f
vrndscaleph	xbyak/xbyak_mnemonic.h	/^void vrndscaleph(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B16, 0x08, imm); }$/;"	f
vrndscaleps	xbyak/xbyak_mnemonic.h	/^void vrndscaleps(const Xmm& x, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(x, op, T_66 | T_0F3A | T_EW0 | T_YMM | T_SAE_Z | T_MUST_EVEX | T_B32, 0x08, imm); }$/;"	f
vrndscalesd	xbyak/xbyak_mnemonic.h	/^void vrndscalesd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F3A | T_EW1 | T_SAE_X | T_MUST_EVEX, 0x0B, imm); }$/;"	f
vrndscalesh	xbyak/xbyak_mnemonic.h	/^void vrndscalesh(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x0A, imm); }$/;"	f
vrndscaless	xbyak/xbyak_mnemonic.h	/^void vrndscaless(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F3A | T_EW0 | T_SAE_X | T_MUST_EVEX, 0x0A, imm); }$/;"	f
vroundpd	xbyak/xbyak_mnemonic.h	/^void vroundpd(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A | T_YMM, 0x09, imm); }$/;"	f
vroundps	xbyak/xbyak_mnemonic.h	/^void vroundps(const Xmm& xm, const Operand& op, uint8_t imm) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F3A | T_YMM, 0x08, imm); }$/;"	f
vroundsd	xbyak/xbyak_mnemonic.h	/^void vroundsd(const Xmm& x, const Operand& op, uint8_t imm) { vroundsd(x, x, op, imm); }$/;"	f
vroundsd	xbyak/xbyak_mnemonic.h	/^void vroundsd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0, 0x0B, imm); }$/;"	f
vroundss	xbyak/xbyak_mnemonic.h	/^void vroundss(const Xmm& x, const Operand& op, uint8_t imm) { vroundss(x, x, op, imm); }$/;"	f
vroundss	xbyak/xbyak_mnemonic.h	/^void vroundss(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F3A | T_W0, 0x0A, imm); }$/;"	f
vrsqrt14pd	xbyak/xbyak_mnemonic.h	/^void vrsqrt14pd(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_B64, 0x4E); }$/;"	f
vrsqrt14ps	xbyak/xbyak_mnemonic.h	/^void vrsqrt14ps(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_B32, 0x4E); }$/;"	f
vrsqrt14sd	xbyak/xbyak_mnemonic.h	/^void vrsqrt14sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX, 0x4F); }$/;"	f
vrsqrt14ss	xbyak/xbyak_mnemonic.h	/^void vrsqrt14ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX, 0x4F); }$/;"	f
vrsqrt28pd	xbyak/xbyak_mnemonic.h	/^void vrsqrt28pd(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW1 | T_B64 | T_SAE_Z, 0xCC); }$/;"	f
vrsqrt28ps	xbyak/xbyak_mnemonic.h	/^void vrsqrt28ps(const Zmm& z, const Operand& op) { opAVX_X_XM_IMM(z, op, T_66 | T_0F38 | T_MUST_EVEX | T_YMM | T_EW0 | T_B32 | T_SAE_Z, 0xCC); }$/;"	f
vrsqrt28sd	xbyak/xbyak_mnemonic.h	/^void vrsqrt28sd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_SAE_X | T_MUST_EVEX, 0xCD); }$/;"	f
vrsqrt28ss	xbyak/xbyak_mnemonic.h	/^void vrsqrt28ss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_SAE_X | T_MUST_EVEX, 0xCD); }$/;"	f
vrsqrtph	xbyak/xbyak_mnemonic.h	/^void vrsqrtph(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_MUST_EVEX | T_B16, 0x4E); }$/;"	f
vrsqrtps	xbyak/xbyak_mnemonic.h	/^void vrsqrtps(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_0F | T_YMM, 0x52); }$/;"	f
vrsqrtsh	xbyak/xbyak_mnemonic.h	/^void vrsqrtsh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_MUST_EVEX, 0x4F); }$/;"	f
vrsqrtss	xbyak/xbyak_mnemonic.h	/^void vrsqrtss(const Xmm& x, const Operand& op) { vrsqrtss(x, x, op); }$/;"	f
vrsqrtss	xbyak/xbyak_mnemonic.h	/^void vrsqrtss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_F3 | T_0F, 0x52); }$/;"	f
vscalefpd	xbyak/xbyak_mnemonic.h	/^void vscalefpd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW1 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B64, 0x2C); }$/;"	f
vscalefph	xbyak/xbyak_mnemonic.h	/^void vscalefph(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_MAP6 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x2C); }$/;"	f
vscalefps	xbyak/xbyak_mnemonic.h	/^void vscalefps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F38 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B32, 0x2C); }$/;"	f
vscalefsd	xbyak/xbyak_mnemonic.h	/^void vscalefsd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_66 | T_0F38 | T_EW1 | T_ER_X | T_MUST_EVEX, 0x2D); }$/;"	f
vscalefsh	xbyak/xbyak_mnemonic.h	/^void vscalefsh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_66 | T_MAP6 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x2D); }$/;"	f
vscalefss	xbyak/xbyak_mnemonic.h	/^void vscalefss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_66 | T_0F38 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x2D); }$/;"	f
vscatterdpd	xbyak/xbyak_mnemonic.h	/^void vscatterdpd(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA2, 1); }$/;"	f
vscatterdps	xbyak/xbyak_mnemonic.h	/^void vscatterdps(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA2, 0); }$/;"	f
vscatterpf0dpd	xbyak/xbyak_mnemonic.h	/^void vscatterpf0dpd(const Address& addr) { opGatherFetch(addr, zm5, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::YMM); }$/;"	f
vscatterpf0dps	xbyak/xbyak_mnemonic.h	/^void vscatterpf0dps(const Address& addr) { opGatherFetch(addr, zm5, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::ZMM); }$/;"	f
vscatterpf0qpd	xbyak/xbyak_mnemonic.h	/^void vscatterpf0qpd(const Address& addr) { opGatherFetch(addr, zm5, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vscatterpf0qps	xbyak/xbyak_mnemonic.h	/^void vscatterpf0qps(const Address& addr) { opGatherFetch(addr, zm5, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vscatterpf1dpd	xbyak/xbyak_mnemonic.h	/^void vscatterpf1dpd(const Address& addr) { opGatherFetch(addr, zm6, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::YMM); }$/;"	f
vscatterpf1dps	xbyak/xbyak_mnemonic.h	/^void vscatterpf1dps(const Address& addr) { opGatherFetch(addr, zm6, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC6, Operand::ZMM); }$/;"	f
vscatterpf1qpd	xbyak/xbyak_mnemonic.h	/^void vscatterpf1qpd(const Address& addr) { opGatherFetch(addr, zm6, T_N8 | T_66 | T_0F38 | T_EW1 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vscatterpf1qps	xbyak/xbyak_mnemonic.h	/^void vscatterpf1qps(const Address& addr) { opGatherFetch(addr, zm6, T_N4 | T_66 | T_0F38 | T_EW0 | T_MUST_EVEX | T_M_K | T_VSIB, 0xC7, Operand::ZMM); }$/;"	f
vscatterqpd	xbyak/xbyak_mnemonic.h	/^void vscatterqpd(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N8 | T_66 | T_0F38 | T_EW1 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA3, 0); }$/;"	f
vscatterqps	xbyak/xbyak_mnemonic.h	/^void vscatterqps(const Address& addr, const Xmm& x) { opGather2(x, addr, T_N4 | T_66 | T_0F38 | T_EW0 | T_YMM | T_MUST_EVEX | T_M_K | T_VSIB, 0xA3, 2); }$/;"	f
vshuff32x4	xbyak/xbyak_mnemonic.h	/^void vshuff32x4(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F3A | T_YMM | T_MUST_EVEX | T_EW0 | T_B32, 0x23, imm); }$/;"	f
vshuff64x2	xbyak/xbyak_mnemonic.h	/^void vshuff64x2(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F3A | T_YMM | T_MUST_EVEX | T_EW1 | T_B64, 0x23, imm); }$/;"	f
vshufi32x4	xbyak/xbyak_mnemonic.h	/^void vshufi32x4(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F3A | T_YMM | T_MUST_EVEX | T_EW0 | T_B32, 0x43, imm); }$/;"	f
vshufi64x2	xbyak/xbyak_mnemonic.h	/^void vshufi64x2(const Ymm& y1, const Ymm& y2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(y1, y2, op, T_66 | T_0F3A | T_YMM | T_MUST_EVEX | T_EW1 | T_B64, 0x43, imm); }$/;"	f
vshufpd	xbyak/xbyak_mnemonic.h	/^void vshufpd(const Xmm& x, const Operand& op, uint8_t imm) { vshufpd(x, x, op, imm); }$/;"	f
vshufpd	xbyak/xbyak_mnemonic.h	/^void vshufpd(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0xC6, imm); }$/;"	f
vshufps	xbyak/xbyak_mnemonic.h	/^void vshufps(const Xmm& x, const Operand& op, uint8_t imm) { vshufps(x, x, op, imm); }$/;"	f
vshufps	xbyak/xbyak_mnemonic.h	/^void vshufps(const Xmm& x1, const Xmm& x2, const Operand& op, uint8_t imm) { opAVX_X_X_XM(x1, x2, op, T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0xC6, imm); }$/;"	f
vsqrtpd	xbyak/xbyak_mnemonic.h	/^void vsqrtpd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x51); }$/;"	f
vsqrtph	xbyak/xbyak_mnemonic.h	/^void vsqrtph(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_MAP5 | T_EW0 | T_YMM | T_ER_Z | T_MUST_EVEX | T_B16, 0x51); }$/;"	f
vsqrtps	xbyak/xbyak_mnemonic.h	/^void vsqrtps(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x51); }$/;"	f
vsqrtsd	xbyak/xbyak_mnemonic.h	/^void vsqrtsd(const Xmm& x, const Operand& op) { vsqrtsd(x, x, op); }$/;"	f
vsqrtsd	xbyak/xbyak_mnemonic.h	/^void vsqrtsd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N8 | T_F2 | T_0F | T_EW1 | T_EVEX | T_ER_X, 0x51); }$/;"	f
vsqrtsh	xbyak/xbyak_mnemonic.h	/^void vsqrtsh(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N2 | T_F3 | T_MAP5 | T_EW0 | T_ER_X | T_MUST_EVEX, 0x51); }$/;"	f
vsqrtss	xbyak/xbyak_mnemonic.h	/^void vsqrtss(const Xmm& x, const Operand& op) { vsqrtss(x, x, op); }$/;"	f
vsqrtss	xbyak/xbyak_mnemonic.h	/^void vsqrtss(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_N4 | T_F3 | T_0F | T_EW0 | T_EVEX | T_ER_X, 0x51); }$/;"	f
vstmxcsr	xbyak/xbyak_mnemonic.h	/^void vstmxcsr(const Address& addr) { opAVX_X_X_XM(xm3, xm0, addr, T_0F, 0xAE); }$/;"	f
vsubpd	xbyak/xbyak_mnemonic.h	/^void vsubpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x5C); }$/;"	f
vsubph	xbyak/xbyak_mnemonic.h	/^void vsubph(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_EW0 | T_YMM | T_MUST_EVEX | T_ER_Z | T_B16, 0x5C); }$/;"	f
vsubps	xbyak/xbyak_mnemonic.h	/^void vsubps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x5C); }$/;"	f
vsubsd	xbyak/xbyak_mnemonic.h	/^void vsubsd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F2 | T_EW1 | T_EVEX | T_ER_X | T_N8, 0x5C); }$/;"	f
vsubsh	xbyak/xbyak_mnemonic.h	/^void vsubsh(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_MAP5 | T_F3 | T_EW0 | T_MUST_EVEX | T_ER_X | T_N2, 0x5C); }$/;"	f
vsubss	xbyak/xbyak_mnemonic.h	/^void vsubss(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_F3 | T_EW0 | T_EVEX | T_ER_X | T_N4, 0x5C); }$/;"	f
vtestpd	xbyak/xbyak_mnemonic.h	/^void vtestpd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38 | T_YMM, 0x0F); }$/;"	f
vtestps	xbyak/xbyak_mnemonic.h	/^void vtestps(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_66 | T_0F38 | T_YMM, 0x0E); }$/;"	f
vucomisd	xbyak/xbyak_mnemonic.h	/^void vucomisd(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N8 | T_66 | T_0F | T_EW1 | T_EVEX | T_SAE_X, 0x2E); }$/;"	f
vucomish	xbyak/xbyak_mnemonic.h	/^void vucomish(const Xmm& x, const Operand& op) { opAVX_X_XM_IMM(x, op, T_MAP5 | T_MUST_EVEX | T_EW0 | T_SAE_X | T_N2, 0x2E); }$/;"	f
vucomiss	xbyak/xbyak_mnemonic.h	/^void vucomiss(const Xmm& xm, const Operand& op) { opAVX_X_XM_IMM(xm, op, T_N4 | T_0F | T_EW0 | T_EVEX | T_SAE_X, 0x2E); }$/;"	f
vunpckhpd	xbyak/xbyak_mnemonic.h	/^void vunpckhpd(const Xmm& x, const Operand& op) { vunpckhpd(x, x, op); }$/;"	f
vunpckhpd	xbyak/xbyak_mnemonic.h	/^void vunpckhpd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0x15); }$/;"	f
vunpckhps	xbyak/xbyak_mnemonic.h	/^void vunpckhps(const Xmm& x, const Operand& op) { vunpckhps(x, x, op); }$/;"	f
vunpckhps	xbyak/xbyak_mnemonic.h	/^void vunpckhps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0x15); }$/;"	f
vunpcklpd	xbyak/xbyak_mnemonic.h	/^void vunpcklpd(const Xmm& x, const Operand& op) { vunpcklpd(x, x, op); }$/;"	f
vunpcklpd	xbyak/xbyak_mnemonic.h	/^void vunpcklpd(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_66 | T_0F | T_EW1 | T_YMM | T_EVEX | T_B64, 0x14); }$/;"	f
vunpcklps	xbyak/xbyak_mnemonic.h	/^void vunpcklps(const Xmm& x, const Operand& op) { vunpcklps(x, x, op); }$/;"	f
vunpcklps	xbyak/xbyak_mnemonic.h	/^void vunpcklps(const Xmm& x1, const Xmm& x2, const Operand& op) { opAVX_X_X_XM(x1, x2, op, T_0F | T_EW0 | T_YMM | T_EVEX | T_B32, 0x14); }$/;"	f
vxorpd	xbyak/xbyak_mnemonic.h	/^void vxorpd(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_66 | T_EW1 | T_YMM | T_EVEX | T_ER_Z | T_B64, 0x57); }$/;"	f
vxorps	xbyak/xbyak_mnemonic.h	/^void vxorps(const Xmm& xmm, const Operand& op1, const Operand& op2 = Operand()) { opAVX_X_X_XM(xmm, op1, op2, T_0F | T_EW0 | T_YMM | T_EVEX | T_ER_Z | T_B32, 0x57); }$/;"	f
vzeroall	xbyak/xbyak_mnemonic.h	/^void vzeroall() { db(0xC5); db(0xFC); db(0x77); }$/;"	f
vzeroupper	xbyak/xbyak_mnemonic.h	/^void vzeroupper() { db(0xC5); db(0xF8); db(0x77); }$/;"	f
wait	xbyak/xbyak_mnemonic.h	/^void wait() { db(0x9B); }$/;"	f
wbinvd	xbyak/xbyak_mnemonic.h	/^void wbinvd() { db(0x0F); db(0x09); }$/;"	f
weight_comp	jit_blas_transformer.h	/^namespace weight_comp {$/;"	n	namespace:jblas::wrapper::transformer_default
weight_comp	jit_blas_weight_compression.h	/^namespace weight_comp {$/;"	n	namespace:jblas::prologue
weight_comp	jit_blas_weight_compression.h	/^namespace weight_comp {$/;"	n	namespace:jblas::wrapper::gemm_default
word	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
workspace	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::params
workspace	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::params
workspace	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::params
workspace	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::params
workspace	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::params
workspace	jit_blas_gemm.h	/^    void *workspace, *cfg;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_16x48_AMX_INT8_KBLOCK::params
workspace	jit_blas_transformer.h	/^    void* workspace;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfaceKBlockPackWeight::Arguments
workspace	jit_blas_transformer.h	/^    void* workspace;$/;"	m	struct:jblas::wrapper::transformer::QKVGemmInterfacePackWeight::Arguments
workspace	jit_blas_weight_compression.h	/^    void* workspace;$/;"	m	struct:jblas::wrapper::gemm_kblock::GemmSLauncherKBlockPackWeight::Param
workspace	jit_blas_wrapper.h	/^    void* workspace;$/;"	m	struct:jblas::wrapper::gemm_pack_weight::GemmLauncherPackWeight::Param
wrapper	jit_blas_transformer.h	/^namespace wrapper {$/;"	n	namespace:jblas
wrapper	jit_blas_weight_compression.h	/^namespace wrapper {$/;"	n	namespace:jblas
wrapper	jit_blas_wrapper.h	/^namespace wrapper {$/;"	n	namespace:jblas
wrapper	kernel_wrapper.h	/^namespace wrapper {$/;"	n	namespace:jblas::kernel
wrapper	ut/jit_blas_transformer.cpp	/^namespace wrapper {$/;"	n	namespace:jblas	file:
wrapper	ut/jit_blas_weight_compression.cpp	/^namespace wrapper {$/;"	n	namespace:jblas	file:
wrapper	ut/jit_blas_wrapper.cpp	/^namespace wrapper {$/;"	n	namespace:jblas	file:
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_BF16::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x48_AMX_INT8_ss::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_BF16::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_16x64_AMX_INT8::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_4x24_AVX2::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512F::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x48_AVX512_VNNI::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x64_AVX512_FP16::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& parambase, const Xbyak::Reg64& reg_matCptr,$/;"	f	class:jblas::gemm::GemmCore_Row_NN_8x96_AVX512_FP16::MicroKernel
write_back	jit_blas_gemm.h	/^    void write_back(int _mtile, int _NRegs, const Xbyak::Reg64& reg_matCptr, const Xbyak::Reg64& reg_cstep) {$/;"	f	class:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::MicroKernel
wrmsr	xbyak/xbyak_mnemonic.h	/^void wrmsr() { db(0x0F); db(0x30); }$/;"	f
x	jit_blas_utils.h	/^  int8_t x : 4;$/;"	m	struct:jblas::utils::bit4x2
x	jit_blas_utils.h	/^  uint16_t x;$/;"	m	struct:jblas::utils::bf16
x	jit_blas_utils.h	/^  uint16_t x;$/;"	m	struct:jblas::utils::fp16
x2APIC_supported_	xbyak/xbyak_util.h	/^	bool x2APIC_supported_;$/;"	m	class:Xbyak::util::Cpu
xadd	xbyak/xbyak_mnemonic.h	/^void xadd(const Operand& op, const Reg& reg) { opModRM(reg, op, (op.isREG() && reg.isREG() && op.getBit() == reg.getBit()), op.isMEM(), 0x0F, 0xC0 | (reg.isBit(8) ? 0 : 1)); }$/;"	f
xbyak	jit_base.hpp	/^namespace xbyak {$/;"	n	namespace:jblas
xchg	xbyak/xbyak.h	/^	void xchg(const Operand& op1, const Operand& op2)$/;"	f	class:Xbyak::CodeGenerator
xgetbv	xbyak/xbyak_mnemonic.h	/^void xgetbv() { db(0x0F); db(0x01); db(0xD0); }$/;"	f
xlatb	xbyak/xbyak_mnemonic.h	/^void xlatb() { db(0xD7); }$/;"	f
xm0	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm1	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm10	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xm11	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xm12	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xm13	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xm14	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xm15	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xm16	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm17	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm18	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm19	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm2	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm20	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm21	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm22	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm23	xbyak/xbyak.h	/^	const Xmm &xm16, &xm17, &xm18, &xm19, &xm20, &xm21, &xm22, &xm23;$/;"	m	class:Xbyak::CodeGenerator
xm24	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm25	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm26	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm27	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm28	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm29	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm3	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm30	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm31	xbyak/xbyak.h	/^	const Xmm &xm24, &xm25, &xm26, &xm27, &xm28, &xm29, &xm30, &xm31;$/;"	m	class:Xbyak::CodeGenerator
xm4	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm5	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm6	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm7	xbyak/xbyak.h	/^	const Xmm &xm0, &xm1, &xm2, &xm3, &xm4, &xm5, &xm6, &xm7;$/;"	m	class:Xbyak::CodeGenerator
xm8	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xm9	xbyak/xbyak.h	/^	const Xmm &xm8, &xm9, &xm10, &xm11, &xm12, &xm13, &xm14, &xm15; \/\/ for my convenience$/;"	m	class:Xbyak::CodeGenerator
xmm0	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm1	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm10	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xmm11	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xmm12	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xmm13	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xmm14	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xmm15	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xmm16	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm17	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm18	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm19	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm2	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm20	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm21	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm22	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm23	xbyak/xbyak.h	/^	const Xmm xmm16, xmm17, xmm18, xmm19, xmm20, xmm21, xmm22, xmm23;$/;"	m	class:Xbyak::CodeGenerator
xmm24	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm25	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm26	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm27	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm28	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm29	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm3	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm30	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm31	xbyak/xbyak.h	/^	const Xmm xmm24, xmm25, xmm26, xmm27, xmm28, xmm29, xmm30, xmm31;$/;"	m	class:Xbyak::CodeGenerator
xmm4	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm5	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm6	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm7	xbyak/xbyak.h	/^	const Xmm xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7;$/;"	m	class:Xbyak::CodeGenerator
xmm8	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xmm9	xbyak/xbyak.h	/^	const Xmm xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15;$/;"	m	class:Xbyak::CodeGenerator
xor	xbyak/xbyak_mnemonic.h	/^void xor(const Operand& op, uint32_t imm) { xor_(op, imm); }$/;"	f
xor	xbyak/xbyak_mnemonic.h	/^void xor(const Operand& op1, const Operand& op2) { xor_(op1, op2); }$/;"	f
xor_	xbyak/xbyak_mnemonic.h	/^void xor_(const Operand& op, uint32_t imm) { opRM_I(op, imm, 0x30, 6); }$/;"	f
xor_	xbyak/xbyak_mnemonic.h	/^void xor_(const Operand& op1, const Operand& op2) { opRM_RM(op1, op2, 0x30); }$/;"	f
xorpd	xbyak/xbyak_mnemonic.h	/^void xorpd(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x57, 0x66, isXMM_XMMorMEM); }$/;"	f
xorps	xbyak/xbyak_mnemonic.h	/^void xorps(const Xmm& xmm, const Operand& op) { opGen(xmm, op, 0x57, 0x100, isXMM_XMMorMEM); }$/;"	f
xword	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
xword_b	xbyak/xbyak.h	/^	const AddressFrame ptr_b, xword_b, yword_b, zword_b; \/\/ broadcast such as {1to2}, {1to4}, {1to8}, {1to16}, {b}$/;"	m	class:Xbyak::CodeGenerator
xx_xy_yz	xbyak/xbyak.h	/^		xx_xy_yz = 2$/;"	e	enum:Xbyak::CodeGenerator::__anon11
xx_yx_zy	xbyak/xbyak.h	/^		xx_yx_zy = 1,$/;"	e	enum:Xbyak::CodeGenerator::__anon11
xx_yy_zz	xbyak/xbyak.h	/^		xx_yy_zz = 0,$/;"	e	enum:Xbyak::CodeGenerator::__anon11
y	jit_blas_utils.h	/^  int8_t y : 4;$/;"	m	struct:jblas::utils::bit4x2
ym0	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym1	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym10	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ym11	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ym12	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ym13	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ym14	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ym15	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ym16	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym17	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym18	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym19	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym2	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym20	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym21	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym22	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym23	xbyak/xbyak.h	/^	const Ymm &ym16, &ym17, &ym18, &ym19, &ym20, &ym21, &ym22, &ym23;$/;"	m	class:Xbyak::CodeGenerator
ym24	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym25	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym26	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym27	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym28	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym29	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym3	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym30	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym31	xbyak/xbyak.h	/^	const Ymm &ym24, &ym25, &ym26, &ym27, &ym28, &ym29, &ym30, &ym31;$/;"	m	class:Xbyak::CodeGenerator
ym4	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym5	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym6	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym7	xbyak/xbyak.h	/^	const Ymm &ym0, &ym1, &ym2, &ym3, &ym4, &ym5, &ym6, &ym7;$/;"	m	class:Xbyak::CodeGenerator
ym8	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ym9	xbyak/xbyak.h	/^	const Ymm &ym8, &ym9, &ym10, &ym11, &ym12, &ym13, &ym14, &ym15;$/;"	m	class:Xbyak::CodeGenerator
ymm0	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm1	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm10	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
ymm11	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
ymm12	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
ymm13	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
ymm14	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
ymm15	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
ymm16	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm17	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm18	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm19	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm2	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm20	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm21	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm22	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm23	xbyak/xbyak.h	/^	const Ymm ymm16, ymm17, ymm18, ymm19, ymm20, ymm21, ymm22, ymm23;$/;"	m	class:Xbyak::CodeGenerator
ymm24	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm25	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm26	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm27	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm28	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm29	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm3	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm30	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm31	xbyak/xbyak.h	/^	const Ymm ymm24, ymm25, ymm26, ymm27, ymm28, ymm29, ymm30, ymm31;$/;"	m	class:Xbyak::CodeGenerator
ymm4	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm5	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm6	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm7	xbyak/xbyak.h	/^	const Ymm ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7;$/;"	m	class:Xbyak::CodeGenerator
ymm8	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
ymm9	xbyak/xbyak.h	/^	const Ymm ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;$/;"	m	class:Xbyak::CodeGenerator
yword	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
yword_b	xbyak/xbyak.h	/^	const AddressFrame ptr_b, xword_b, yword_b, zword_b; \/\/ broadcast such as {1to2}, {1to4}, {1to8}, {1to16}, {b}$/;"	m	class:Xbyak::CodeGenerator
zero	kernel_jit_injector.h	/^    zero = 0,                             \/\/ 0.f$/;"	e	enum:jblas::kernel::jit_injector::eltwise_injector::key_t
zeropoints	ut/jit_blas_ut.h	/^  utils::aligned_vector<int> zeropoints;$/;"	m	struct:jblas::ut::UT_vector_u8
zm0	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm1	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm10	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zm11	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zm12	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zm13	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zm14	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zm15	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zm16	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm17	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm18	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm19	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm2	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm20	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm21	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm22	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm23	xbyak/xbyak.h	/^	const Zmm &zm16, &zm17, &zm18, &zm19, &zm20, &zm21, &zm22, &zm23;$/;"	m	class:Xbyak::CodeGenerator
zm24	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm25	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm26	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm27	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm28	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm29	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm3	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm30	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm31	xbyak/xbyak.h	/^	const Zmm &zm24, &zm25, &zm26, &zm27, &zm28, &zm29, &zm30, &zm31;$/;"	m	class:Xbyak::CodeGenerator
zm4	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm5	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm6	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm7	xbyak/xbyak.h	/^	const Zmm &zm0, &zm1, &zm2, &zm3, &zm4, &zm5, &zm6, &zm7;$/;"	m	class:Xbyak::CodeGenerator
zm8	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zm9	xbyak/xbyak.h	/^	const Zmm &zm8, &zm9, &zm10, &zm11, &zm12, &zm13, &zm14, &zm15;$/;"	m	class:Xbyak::CodeGenerator
zmm0	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm1	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm10	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm11	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm12	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm13	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm14	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm15	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm16	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm17	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm18	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm19	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm2	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm20	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm21	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm22	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm23	xbyak/xbyak.h	/^	const Zmm zmm16, zmm17, zmm18, zmm19, zmm20, zmm21, zmm22, zmm23;$/;"	m	class:Xbyak::CodeGenerator
zmm24	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm25	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm26	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm27	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm28	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm29	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm3	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm30	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm31	xbyak/xbyak.h	/^	const Zmm zmm24, zmm25, zmm26, zmm27, zmm28, zmm29, zmm30, zmm31;$/;"	m	class:Xbyak::CodeGenerator
zmm4	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm5	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm6	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm7	xbyak/xbyak.h	/^	const Zmm zmm0, zmm1, zmm2, zmm3, zmm4, zmm5, zmm6, zmm7;$/;"	m	class:Xbyak::CodeGenerator
zmm8	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm9	xbyak/xbyak.h	/^	const Zmm zmm8, zmm9, zmm10, zmm11, zmm12, zmm13, zmm14, zmm15;$/;"	m	class:Xbyak::CodeGenerator
zmm_aux0	kernel_jit_injector.h	/^  Zmm zmm_mask, zmm_aux0, zmm_aux1, zmm_aux2, zmm_aux3, zmm_aux4;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
zmm_aux1	kernel_jit_injector.h	/^  Zmm zmm_mask, zmm_aux0, zmm_aux1, zmm_aux2, zmm_aux3, zmm_aux4;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
zmm_aux2	kernel_jit_injector.h	/^  Zmm zmm_mask, zmm_aux0, zmm_aux1, zmm_aux2, zmm_aux3, zmm_aux4;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
zmm_aux3	kernel_jit_injector.h	/^  Zmm zmm_mask, zmm_aux0, zmm_aux1, zmm_aux2, zmm_aux3, zmm_aux4;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
zmm_aux4	kernel_jit_injector.h	/^  Zmm zmm_mask, zmm_aux0, zmm_aux1, zmm_aux2, zmm_aux3, zmm_aux4;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
zmm_mask	kernel_jit_injector.h	/^  Zmm zmm_mask, zmm_aux0, zmm_aux1, zmm_aux2, zmm_aux3, zmm_aux4;$/;"	m	class:jblas::kernel::jit_injector::eltwise_injector
zpA	jit_blas_epilogue.h	/^    uint8_t* zpA;$/;"	m	struct:jblas::epilogue::gemm::ZpDequantInt32ToFp32::Param
zpA	jit_blas_gemm.h	/^    uint8_t* zpA;$/;"	m	struct:jblas::gemm::kblock::GemmCore_Row_NN_3x48_AVX512_VNNI_KBLOCK::params
zpC	jit_blas_epilogue.h	/^    int zpC;$/;"	m	struct:jblas::epilogue::gemm::AlphaBetaProcessS32U8::Param
zword	xbyak/xbyak.h	/^	const AddressFrame ptr, byte, word, dword, qword, xword, yword, zword; \/\/ xword is same as oword of NASM$/;"	m	class:Xbyak::CodeGenerator
zword_b	xbyak/xbyak.h	/^	const AddressFrame ptr_b, xword_b, yword_b, zword_b; \/\/ broadcast such as {1to2}, {1to4}, {1to8}, {1to16}, {b}$/;"	m	class:Xbyak::CodeGenerator
~Allocator	xbyak/xbyak.h	/^	virtual ~Allocator() {}$/;"	f	struct:Xbyak::Allocator
~CodeArray	xbyak/xbyak.h	/^	virtual ~CodeArray()$/;"	f	class:Xbyak::CodeArray
~Label	xbyak/xbyak.h	/^inline Label::~Label()$/;"	f	class:Xbyak::Label
~LabelManager	xbyak/xbyak.h	/^	~LabelManager()$/;"	f	class:Xbyak::LabelManager
~PackedWeight	jit_blas_prologue.h	/^  virtual ~PackedWeight() {}$/;"	f	class:jblas::prologue::PackedWeight
~Profiler	xbyak/xbyak_util.h	/^	~Profiler()$/;"	f	class:Xbyak::util::Profiler
~StackFrame	xbyak/xbyak_util.h	/^	~StackFrame()$/;"	f	class:Xbyak::util::StackFrame
~eltwise_injector	kernel_jit_injector.h	/^  virtual ~eltwise_injector() {}$/;"	f	class:jblas::kernel::jit_injector::eltwise_injector
